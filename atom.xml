<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Loh&#39;s Blog</title>
  
  <subtitle>Loh&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://saboloh.com/"/>
  <updated>2018-03-29T07:14:11.462Z</updated>
  <id>http://saboloh.com/</id>
  
  <author>
    <name>saboloh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 Webpack 管理前端 JS</title>
    <link href="http://saboloh.com/2017/06/29/use-webpack-build-script/"/>
    <id>http://saboloh.com/2017/06/29/use-webpack-build-script/</id>
    <published>2017-06-29T06:01:46.000Z</published>
    <updated>2018-03-29T07:14:11.462Z</updated>
    
    <content type="html"><![CDATA[<p>Webpack是啥？官网的解释是“webpack takes modules with dependencies and generates static assets representing those modules.”</p><p>说简单点就是一款前端的模块加载兼打包工具。  </p><p>首先看看项目的目录结构：  </p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">-</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>resources  <span class="token operator">-</span> src    <span class="token operator">-</span> imgs               <span class="token comment" spellcheck="true">//图片</span>    <span class="token operator">-</span> scripts            <span class="token comment" spellcheck="true">//JS脚本，按照page、components进行组织</span>      <span class="token operator">-</span> page      <span class="token operator">-</span> components    <span class="token operator">-</span> styles             <span class="token comment" spellcheck="true">//CSS脚本，按照page、components进行组织</span>      <span class="token operator">-</span> page      <span class="token operator">-</span> components    <span class="token operator">-</span> templates          <span class="token comment" spellcheck="true">//页面ejs</span>  <span class="token operator">-</span> <span class="token keyword">static</span>               <span class="token comment" spellcheck="true">//webpack编译打包输出目录的静态文件</span>  <span class="token operator">-</span> templates            <span class="token comment" spellcheck="true">//webpack编译输出的模板静态HTML文件</span>  <span class="token operator">-</span> server<span class="token punctuation">.</span>js            <span class="token comment" spellcheck="true">//用于启动dev模式</span>  <span class="token operator">-</span> webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js    <span class="token comment" spellcheck="true">//webpack配置文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 <code>webpack.config.js</code> 来完成各种类型文件的 loader ，让我们一起看看该文件内容：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    glob <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'glob'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    WebpackNotifierPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-notifier'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'extract-text-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> CommonsChunkPlugin <span class="token operator">=</span> webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin<span class="token punctuation">;</span><span class="token keyword">var</span> UglifyJsPlugin <span class="token operator">=</span> webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>UglifyJsPlugin<span class="token punctuation">;</span><span class="token keyword">const</span> debug <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token comment" spellcheck="true">//const contextPath = process.env.npm_package_config_contextPath;</span><span class="token keyword">var</span> entries <span class="token operator">=</span> <span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token string">'src/scripts/page/**/*.js'</span><span class="token punctuation">,</span> <span class="token string">'src/scripts/page/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> chunks <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> entries<span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'static'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    publicPath<span class="token punctuation">:</span> <span class="token string">'http://0.0.0.0:9001/static/'</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">'scripts/page/[name]-[hash].js'</span><span class="token punctuation">,</span>    chunkFilename<span class="token punctuation">:</span> <span class="token string">'scripts/[id].chunk.js?[hash]'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token string">'css!less'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.ejs$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'ejs-loader'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.html$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'html?-minimize'</span> <span class="token comment" spellcheck="true">// 避免压缩html,https://github.com/webpack/html-loader/issues/50</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(woff|woff2|ttf|eot|svg)(\?v=[0-9]\.[0-9]\.[0-9])?$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'file-loader?name=fonts/[name].[ext]'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpe?g|gif)$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'url-loader?limit=8192&amp;name=imgs/[name]-[hash].[ext]'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 加载jquery</span>      $<span class="token punctuation">:</span> <span class="token string">'jquery'</span><span class="token punctuation">,</span>      JQuery<span class="token punctuation">:</span> <span class="token string">'jquery'</span><span class="token punctuation">,</span>      _<span class="token punctuation">:</span> <span class="token string">'underscore'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'vendors'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 将公共模块提取，生成名为`vendors`的chunk</span>      chunks<span class="token punctuation">:</span> chunks<span class="token punctuation">,</span>      minChunks<span class="token punctuation">:</span> chunks<span class="token punctuation">.</span>length <span class="token comment" spellcheck="true">// 提取所有entry共同依赖的模块</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">WebpackNotifierPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>alwaysNotify<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">'styles/[name]-[chunkhash].css'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 单独使用link标签加载css并设置路径，相对于output配置中的publickPath</span>    debug <span class="token operator">?</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 压缩代码</span>      compress<span class="token punctuation">:</span> <span class="token punctuation">{</span>        warnings<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      except<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'$super'</span><span class="token punctuation">,</span> <span class="token string">'$'</span><span class="token punctuation">,</span> <span class="token string">'exports'</span><span class="token punctuation">,</span> <span class="token string">'require'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 排除关键字</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> pages <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token string">'src/templates/**/*.ejs'</span><span class="token punctuation">,</span> <span class="token string">'src/templates/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pages<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> conf <span class="token operator">=</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'../templates/'</span> <span class="token operator">+</span> pathname <span class="token operator">+</span> <span class="token string">'.html'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 生成的html存放路径，相对于path</span>    template<span class="token punctuation">:</span> <span class="token string">'src/templates/'</span> <span class="token operator">+</span> pathname <span class="token operator">+</span> <span class="token string">'.ejs'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// html模板路径</span>    cache<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//true | false if true (default) try to emit the file only if it was changed.</span>    inject<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// js插入的位置，true/'head'/'body'/false</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token keyword">in</span> config<span class="token punctuation">.</span>entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//conf.favicon = path.resolve(__dirname, 'src/imgs/favicon.ico');</span>    <span class="token comment" spellcheck="true">//conf.inject = 'body';</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">==</span> <span class="token string">'layout'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      conf<span class="token punctuation">.</span>chunks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'vendors'</span><span class="token punctuation">,</span> pathname<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      conf<span class="token punctuation">.</span>chunks <span class="token operator">=</span> <span class="token punctuation">[</span>pathname<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    conf<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  config<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token keyword">function</span> <span class="token function">getEntry</span><span class="token punctuation">(</span>globPath<span class="token punctuation">,</span> pathDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> files <span class="token operator">=</span> glob<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>globPath<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> entries <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> entry<span class="token punctuation">,</span> dirname<span class="token punctuation">,</span> basename<span class="token punctuation">,</span> pathname<span class="token punctuation">,</span> extname<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> files<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    entry <span class="token operator">=</span> files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    dirname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>    extname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>    basename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> extname<span class="token punctuation">)</span><span class="token punctuation">;</span>    pathname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dirname<span class="token punctuation">,</span> basename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pathDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span>pathDir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>pathDir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      pathname <span class="token operator">=</span> pathname<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pathDir<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    entries<span class="token punctuation">[</span>pathname<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'./'</span> <span class="token operator">+</span> entry<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> entries<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们开发的时候，只需要在 <code>src/scripts/page</code> 下编写 js 文件，<code>src/templates</code> 下编辑对于文件名的<code>.ejs</code> 文件。  </p><h5 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h5><ul><li>JS 开发案例 <code>index.js</code>   </li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../styles/page/index.css'</span><span class="token punctuation">)</span><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>HTML 案例 <code>index.ejs</code>  </li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE HTML></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">layout:</span>decorate</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>~{layout.html}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入css文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">for</span> <span class="token attr-name">(key</span> <span class="token attr-name">in</span> <span class="token attr-name">htmlWebpackPlugin.files.css)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> htmlWebpackPlugin.files.css[key] %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">layout:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Hello World.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 引入图片 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> require(<span class="token punctuation">'</span>../imgs/test.png<span class="token punctuation">'</span>) %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- content --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">th:</span>block</span> <span class="token attr-name"><span class="token namespace">layout:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scripts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入js文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">for</span> <span class="token attr-name">(key</span> <span class="token attr-name">in</span> <span class="token attr-name">htmlWebpackPlugin.files.chunks)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> htmlWebpackPlugin.files.chunks[key].entry %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">th:</span>block</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h5><ul><li><a href="http://webpack.github.io/docs/what-is-webpack.html" target="_blank" rel="noopener">What is the webpack</a></li><li><a href="https://github.com/vhtml/webpack-MultiplePage" target="_blank" rel="noopener">基于webpack的前端工程化方案（自动入口配置及后端模板）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Webpack是啥？官网的解释是“webpack takes modules with dependencies and generates static assets representing those modules.”&lt;/p&gt;
&lt;p&gt;说简单点就是一款前端的模块加载兼
      
    
    </summary>
    
      <category term="Frontend" scheme="http://saboloh.com/categories/Frontend/"/>
    
    
      <category term="webpack" scheme="http://saboloh.com/tags/webpack/"/>
    
      <category term="ejs" scheme="http://saboloh.com/tags/ejs/"/>
    
      <category term="html" scheme="http://saboloh.com/tags/html/"/>
    
      <category term="js" scheme="http://saboloh.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Java 运行 Linux 命令</title>
    <link href="http://saboloh.com/2017/06/23/java-run-linux-shell/"/>
    <id>http://saboloh.com/2017/06/23/java-run-linux-shell/</id>
    <published>2017-06-23T01:44:52.000Z</published>
    <updated>2018-03-29T07:14:11.458Z</updated>
    
    <content type="html"><![CDATA[<p>博主尝试过很多方式运行shell命令，以前使用过 apache common 里面的 command 来运行。<br>后面嫌麻烦，改用了 Java 自带的 Runtime.getRuntime().exec(command) 来运行命令，日志获取没问题，但是没法实现环境变量的设置。</p><p>于是使用 Java 自带的 ProcessBuilder 来实现。 实现方法如下：</p><pre class="line-numbers language-java"><code class="language-java">ProcessBuilder pb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">(</span><span class="token string">"hadoop"</span><span class="token punctuation">,</span> <span class="token string">"distcp"</span><span class="token punctuation">,</span>        <span class="token string">"-Dmapreduce.job.queuename=root.hadoop"</span><span class="token punctuation">,</span>        <span class="token string">"-pb"</span><span class="token punctuation">,</span> <span class="token string">"-overwrite"</span><span class="token punctuation">,</span> source<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>pb<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> env <span class="token operator">=</span> pb<span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置环境变量</span>env<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"HADOOP_PROXY_USER"</span><span class="token punctuation">,</span> <span class="token string">"hadoop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> String USR_HOME <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pb<span class="token punctuation">.</span><span class="token function">directory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>USR_HOME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    Process p <span class="token operator">=</span> pb<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//等待进程执行完毕</span>    <span class="token comment" spellcheck="true">//p.waitFor();</span>    <span class="token comment" spellcheck="true">//如果进程运行结果不为0,表示进程是错误退出的</span>    <span class="token comment" spellcheck="true">//获得进程实例的错误输出</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DisCPLog</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">"err"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DisCPLog</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">"std"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Exeception ::: "</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取日志代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by jianle on 17-6-22. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DisCPLog</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    Process p<span class="token punctuation">;</span>    String logType <span class="token operator">=</span> <span class="token string">"std"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DisCPLog</span><span class="token punctuation">(</span>Process p<span class="token punctuation">,</span> String logType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>p <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logType <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>logType <span class="token operator">=</span> logType<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        BufferedReader Inreader <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"err"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>logType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Inreader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getErrorStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Inreader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String line <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>Inreader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;博主尝试过很多方式运行shell命令，以前使用过 apache common 里面的 command 来运行。&lt;br&gt;后面嫌麻烦，改用了 Java 自带的 Runtime.getRuntime().exec(command) 来运行命令，日志获取没问题，但是没法实现环境变量
      
    
    </summary>
    
      <category term="Java" scheme="http://saboloh.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://saboloh.com/tags/java/"/>
    
      <category term="shell" scheme="http://saboloh.com/tags/shell/"/>
    
      <category term="linux" scheme="http://saboloh.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Java 捕获异常邮箱</title>
    <link href="http://saboloh.com/2016/12/17/java-sendmail-catch-invalidaddress/"/>
    <id>http://saboloh.com/2016/12/17/java-sendmail-catch-invalidaddress/</id>
    <published>2016-12-17T06:12:47.000Z</published>
    <updated>2018-03-29T07:14:11.458Z</updated>
    
    <content type="html"><![CDATA[<p>在使用<code>javax.mail</code> 群发邮件过程中，遇到邮箱失效导致邮件发送失败。<br>针对这个问题，一开始我们考虑从Exception里面获取到异常邮箱地址，然后剔除后再次发送， 但是当使用腾讯企业邮箱后，异常捕获不到具体的无效地址，针对这个问题，我们排查结果是：  </p><p>发送邮件异常其实是保存了invalid的address，但是因为经过很多次的try catch 后异常信息没有抛出到最外层</p><a id="more"></a><p>我们的解决方案：</p><p>A. 自定义<code>SMTPTransport</code>继承<code>Transport</code><br>B. 使用自定义<code>SMTPTransport</code>发送邮件或附件   </p><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>jdk7</li><li>commons-email-1.4/javax.mail-1.5.2</li></ul><h3 id="自定义Class"><a href="#自定义Class" class="headerlink" title="自定义Class"></a>自定义Class</h3><ul><li>SMTPMessage  </li></ul><p>之所以要定义<code>SMTPMessage</code>是因为<code>SMTPTransport</code>用到了其中的方法，而<code>SMTPMessage</code>使用了protect定义，所以必须在同一个包下面才能引用， <code>SMTPMessage</code>照抄javax.mail中同名类即可</p><ul><li>SMTPTransport  </li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//省略...</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SMTPTransport</span> <span class="token keyword">extends</span> <span class="token class-name">Transport</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...省略部分</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> Address<span class="token punctuation">[</span><span class="token punctuation">]</span> addresses<span class="token punctuation">)</span>           <span class="token keyword">throws</span> MessagingException<span class="token punctuation">,</span> SendFailedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 省略部分</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">mailFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rcptTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//...</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SendFailedException</span> se<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 抛出异常邮箱</span>            <span class="token keyword">throw</span> se<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MessagingException</span> mex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 省略部分</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 省略部分</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 省略部分</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendAccurate</span><span class="token punctuation">(</span>String subject<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> receivers<span class="token punctuation">,</span> String html<span class="token punctuation">,</span> String filename<span class="token punctuation">)</span>        <span class="token keyword">throws</span> SendFailedException<span class="token punctuation">,</span> Exception <span class="token punctuation">{</span>    String hostname <span class="token operator">=</span> commonProperties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"email.host"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Session session <span class="token operator">=</span> <span class="token function">createSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Message message <span class="token operator">=</span> <span class="token function">createMessage</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> subject<span class="token punctuation">,</span> receivers            <span class="token punctuation">,</span> html<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> hostname<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取发送对象，连接发送，断开连接设置  </span>    URLName smtpURL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLName</span><span class="token punctuation">(</span>hostname<span class="token punctuation">)</span><span class="token punctuation">;</span>    SMTPTransport sender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SMTPTransport</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> smtpURL<span class="token punctuation">)</span><span class="token punctuation">;</span>    sender<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>hostname            <span class="token punctuation">,</span> commonProperties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"email.username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            commonProperties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"email.password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        sender<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getRecipients</span><span class="token punctuation">(</span>RecipientType<span class="token punctuation">.</span>TO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SendFailedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sender<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> Session <span class="token function">createSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 必须要设置mail.smtp.auth为true这样SMTPTranport对象才会向SMTP服务器提交用户认证信息     */</span>    Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"mail.transport.protocol"</span><span class="token punctuation">,</span> <span class="token string">"smtp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"mail.smtp.auth"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Session session <span class="token operator">=</span> Session<span class="token punctuation">.</span><span class="token function">getDefaultInstance</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打印详细信息</span>    <span class="token comment" spellcheck="true">//session.setDebug(true);</span>    <span class="token keyword">return</span> session<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> Message <span class="token function">createMessage</span><span class="token punctuation">(</span>Session session<span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> receivers        <span class="token punctuation">,</span> String html<span class="token punctuation">,</span> String filename<span class="token punctuation">,</span> String hostName<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    StringBuffer tos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String to <span class="token operator">:</span> receivers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tos<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Message msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessage</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>    msg<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InternetAddress</span><span class="token punctuation">(</span>commonProperties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"email.username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Mini-Report"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    msg<span class="token punctuation">.</span><span class="token function">setRecipients</span><span class="token punctuation">(</span>RecipientType<span class="token punctuation">.</span>TO<span class="token punctuation">,</span> InternetAddress<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>tos<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>tos<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    msg<span class="token punctuation">.</span><span class="token function">setSentDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    msg<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建组合类型为related的MIME消息</span>    MimeMultipart multipart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMultipart</span><span class="token punctuation">(</span><span class="token string">"related"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MimeBodyPart contentPart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeBodyPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;html>&lt;head>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/head>&lt;body>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/body>&lt;/html>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    contentPart<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">"text/html; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 加入MimeMultipart对象</span>    multipart<span class="token punctuation">.</span><span class="token function">addBodyPart</span><span class="token punctuation">(</span>contentPart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>filename <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MimeBodyPart bodyPart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeBodyPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileDataSource fds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileDataSource</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        bodyPart<span class="token punctuation">.</span><span class="token function">setDataHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataHandler</span><span class="token punctuation">(</span>fds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bodyPart<span class="token punctuation">.</span><span class="token function">setFileName</span><span class="token punctuation">(</span>MimeUtility<span class="token punctuation">.</span><span class="token function">encodeText</span><span class="token punctuation">(</span>fds<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multipart<span class="token punctuation">.</span><span class="token function">addBodyPart</span><span class="token punctuation">(</span>bodyPart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回MimeBodyPart对象将作为MimeMessage对象的一部分</span>    msg<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>multipart<span class="token punctuation">)</span><span class="token punctuation">;</span>    msg<span class="token punctuation">.</span><span class="token function">saveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 容易忘记这句话，否则结果会出现问题</span>    <span class="token keyword">return</span> msg<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>腾讯邮箱就是坑，具体也没去多查到底为什么别的邮箱发邮件的时候能捕获到，而腾讯就不可以</p><p>备注： 如果javax.mail的版本不一致，自定义的<code>SMTPTransport</code> 需要有所改变</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用&lt;code&gt;javax.mail&lt;/code&gt; 群发邮件过程中，遇到邮箱失效导致邮件发送失败。&lt;br&gt;针对这个问题，一开始我们考虑从Exception里面获取到异常邮箱地址，然后剔除后再次发送， 但是当使用腾讯企业邮箱后，异常捕获不到具体的无效地址，针对这个问题，我们排查结果是：  &lt;/p&gt;
&lt;p&gt;发送邮件异常其实是保存了invalid的address，但是因为经过很多次的try catch 后异常信息没有抛出到最外层&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://saboloh.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://saboloh.com/tags/java/"/>
    
      <category term="mail" scheme="http://saboloh.com/tags/mail/"/>
    
  </entry>
  
  <entry>
    <title>Hive 开窗分析函数</title>
    <link href="http://saboloh.com/2016/11/09/hive-languagemanual-windowingandanalytics/"/>
    <id>http://saboloh.com/2016/11/09/hive-languagemanual-windowingandanalytics/</id>
    <published>2016-11-09T03:00:33.000Z</published>
    <updated>2018-03-29T07:14:11.458Z</updated>
    
    <content type="html"><![CDATA[<p>Windowing and Analytics Functions </p><a id="more"></a><ul><li>开窗分析函数  <ul><li>Hive QL 的增强功能</li><li>样例<ul><li>PARTITION BY 带一个分区列，没有ORDER BY或开窗规范</li><li>PARTITION BY 带两个分区列，没有ORDER BY或开窗规范</li><li>PARTITION BY 带一个分区列，一个ORDER BY列，无开窗规范</li><li>PARTITION BY 带两个分区列，两个ORDER BY列，无开窗规范</li><li>PARTITION BY 带分区列，ORDER BY，开窗规范</li><li>WINDOWS字句</li><li>LEAD使用默认的1行导联，而不指定默认值</li><li>LAG指定3行的滞后，默认值为0</li><li>DISTINCT为每个分区计数</li></ul></li></ul></li></ul><h3 id="HiveQL-的增强功能"><a href="#HiveQL-的增强功能" class="headerlink" title="HiveQL 的增强功能"></a>HiveQL 的增强功能</h3><pre><code>版本:介绍Hive版本0.11</code></pre><p>这个部分介绍Hive增强的开窗分析函数， 查看<a href="https://issues.apache.org/jira/secure/attachment/12575830/WindowingSpecification.pdf" target="_blank" rel="noopener">HQL的窗口规范</a>详情，<a href="https://issues.apache.org/jira/browse/HIVE-896" target="_blank" rel="noopener">HIVE-896</a> 有更详细的信息，包括最初意见中的文档链接。</p><p>所有的开窗分析函数功能都是按照SQL标准来使用</p><p>当前版本支持以下开窗分析函数：</p><ol><li>开窗函数<ul><li>LEAD  <ul><li>可以可选地指定要引导的行数。 如果未指定要引导的行数，则引导为一行  </li><li>当当前行的引线超出窗口末尾时返回null</li></ul></li><li>LAG  <ul><li>可以选择指定要延迟的行数。 如果未指定要延迟的行数，则延迟为一行</li><li>当当前行的延迟在窗口开始之前延伸时返回null</li></ul></li><li>FIRST_VALUE</li><li>LAST_VALUE</li></ul></li><li><p>OVER 字句</p><ul><li>OVER与标准的聚合<ul><li>COUNT</li><li>SUM</li><li>MIN</li><li>MAX</li><li>AVG</li></ul></li><li>OVER中的PARTITION BY子句使用一个或多个任何基本数据类型的分区列</li><li><p>OVER中的PARTITION BY和ORDER BY字句使用任何数据类型的一个或多个分区和/或排序列</p><ul><li><p>OVER有一定的窗口规范，窗口可以在WINDOW子句中单独定义。 窗口规范支持这些标准选项：   </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ROWS</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">CURRENT</span> <span class="token keyword">ROW</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token keyword">UNBOUNDED</span> <span class="token operator">|</span> <span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">PRECEDING</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token keyword">UNBOUNDED</span> <span class="token operator">|</span> <span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">FOLLOWING</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">OVER</span>子句支持以下功能，但它不支持带有它们的窗口（参见<span class="token punctuation">[</span>HIVE<span class="token number">-4797</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https:<span class="token comment" spellcheck="true">//issues.apache.org/jira/browse/HIVE-4797)）：</span>排名函数：Rank，NTile，DenseRank，CumeDist，PercentRank。LEAD和LAG 函数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ol><ol start="3"><li>分析函数<ul><li>RANK</li><li>ROW_NUMBER</li><li>DENSE_RANK</li><li>CUME_DIST</li><li>PERCENT_RANK</li><li>NTILE</li></ul></li><li><p>Hive 2.1.0 及更高版本支持DISTINCT (查看<a href="https://issues.apache.org/jira/browse/HIVE-9534" target="_blank" rel="noopener">HIVE-9534</a>)<br>DISTINCT支持<code>SUM</code>, <code>COUNT</code>和<code>AVG</code>等聚合函数，以及在每个分区内不同值上的聚合。<br>当前实现具有以下限制：由于性能原因，在分区子句中不能支持ORDER BY或窗口规范。 支持的语法如下：  </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> <span class="token number">a</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Hive 2.1.0 及更高版本支持聚合函数在OVER字句中使用<br>添加了对引用OVER子句中的聚合函数的支持。 例如，目前我们可以使用OVER子句中的SUM聚合函数，如下所示：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token number">a</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p>本节提供了如何在SELECT语句中使用Hive QL窗口化和分析函数的示例，更多的例子见<a href="https://issues.apache.org/jira/browse/HIVE-896" target="_blank" rel="noopener">HIVE-896</a></p><h4 id="PARTITION-BY-带一个分区列，没有ORDER-BY或开窗规范"><a href="#PARTITION-BY-带一个分区列，没有ORDER-BY或开窗规范" class="headerlink" title="PARTITION BY 带一个分区列，没有ORDER BY或开窗规范"></a>PARTITION BY 带一个分区列，没有ORDER BY或开窗规范</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="PARTITION-BY-带两个分区列，没有ORDER-BY或开窗规范"><a href="#PARTITION-BY-带两个分区列，没有ORDER-BY或开窗规范" class="headerlink" title="PARTITION BY 带两个分区列，没有ORDER BY或开窗规范"></a>PARTITION BY 带两个分区列，没有ORDER BY或开窗规范</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span><span class="token punctuation">,</span> <span class="token number">d</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="PARTITION-BY-带一个分区列，一个ORDER-BY列，无开窗规范"><a href="#PARTITION-BY-带一个分区列，一个ORDER-BY列，无开窗规范" class="headerlink" title="PARTITION BY 带一个分区列，一个ORDER BY列，无开窗规范"></a>PARTITION BY 带一个分区列，一个ORDER BY列，无开窗规范</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">d</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="PARTITION-BY-带两个分区列，两个ORDER-BY列，无开窗规范"><a href="#PARTITION-BY-带两个分区列，两个ORDER-BY列，无开窗规范" class="headerlink" title="PARTITION BY 带两个分区列，两个ORDER BY列，无开窗规范"></a>PARTITION BY 带两个分区列，两个ORDER BY列，无开窗规范</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span><span class="token punctuation">,</span> <span class="token number">d</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">e</span><span class="token punctuation">,</span> <span class="token number">f</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="PARTITION-BY-带分区列，ORDER-BY，开窗规范"><a href="#PARTITION-BY-带分区列，ORDER-BY，开窗规范" class="headerlink" title="PARTITION BY 带分区列，ORDER BY，开窗规范"></a>PARTITION BY 带分区列，ORDER BY，开窗规范</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">d</span> <span class="token keyword">ROWS</span> <span class="token operator">BETWEEN</span> <span class="token keyword">UNBOUNDED</span> <span class="token keyword">PRECEDING</span> <span class="token operator">AND</span> <span class="token keyword">CURRENT</span> <span class="token keyword">ROW</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">d</span> <span class="token keyword">ROWS</span> <span class="token operator">BETWEEN</span> <span class="token number">3</span> <span class="token keyword">PRECEDING</span> <span class="token operator">AND</span> <span class="token keyword">CURRENT</span> <span class="token keyword">ROW</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">d</span> <span class="token keyword">ROWS</span> <span class="token operator">BETWEEN</span> <span class="token number">3</span> <span class="token keyword">PRECEDING</span> <span class="token operator">AND</span> <span class="token number">3</span> <span class="token keyword">FOLLOWING</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">d</span> <span class="token keyword">ROWS</span> <span class="token operator">BETWEEN</span> <span class="token keyword">CURRENT</span> <span class="token keyword">ROW</span> <span class="token operator">AND</span> <span class="token keyword">UNBOUNDED</span> <span class="token keyword">FOLLOWING</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在单个查询中可以有多个OVER子句。 单个OVER子句仅适用于前一个函数调用。 在此示例中，第一个OVER子句适用于COUNT（b），第二个OVER子句适用于SUM（b）：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使用别名，带或不带关键字AS：  </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> b_count<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span><span class="token punctuation">)</span> b_sum<span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="WINDOWS字句"><a href="#WINDOWS字句" class="headerlink" title="WINDOWS字句"></a>WINDOWS字句</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> w<span class="token keyword">FROM</span> TWINDOW w <span class="token keyword">AS</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">d</span> <span class="token keyword">ROWS</span> <span class="token keyword">UNBOUNDED</span> <span class="token keyword">PRECEDING</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="LEAD使用默认的1行导联，而不指定默认值"><a href="#LEAD使用默认的1行导联，而不指定默认值" class="headerlink" title="LEAD使用默认的1行导联，而不指定默认值"></a>LEAD使用默认的1行导联，而不指定默认值</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> LEAD<span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">b</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> C <span class="token keyword">ROWS</span> <span class="token operator">BETWEEN</span> <span class="token keyword">CURRENT</span> <span class="token keyword">ROW</span> <span class="token operator">AND</span> <span class="token number">1</span> <span class="token keyword">FOLLOWING</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="LAG指定3行的滞后，默认值为0"><a href="#LAG指定3行的滞后，默认值为0" class="headerlink" title="LAG指定3行的滞后，默认值为0"></a>LAG指定3行的滞后，默认值为0</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> LAG<span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">b</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> C <span class="token keyword">ROWS</span> <span class="token number">3</span> <span class="token keyword">PRECEDING</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="DISTINCT为每个分区计数"><a href="#DISTINCT为每个分区计数" class="headerlink" title="DISTINCT为每个分区计数"></a>DISTINCT为每个分区计数</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token number">a</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">b</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>参考资料  <ul><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+WindowingAndAnalytics#LanguageManualWindowingAndAnalytics-PARTITIONBYwithonepartitioningcolumn,noORDERBYorwindowspecification" target="_blank" rel="noopener">LanguageManual WindowingAndAnalytics</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windowing and Analytics Functions &lt;/p&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://saboloh.com/categories/BigData/"/>
    
    
      <category term="hive" scheme="http://saboloh.com/tags/hive/"/>
    
      <category term="windowing" scheme="http://saboloh.com/tags/windowing/"/>
    
      <category term="analytics" scheme="http://saboloh.com/tags/analytics/"/>
    
      <category term="languageManual" scheme="http://saboloh.com/tags/languageManual/"/>
    
  </entry>
  
  <entry>
    <title>MySQL使用</title>
    <link href="http://saboloh.com/2016/08/26/mysql-options/"/>
    <id>http://saboloh.com/2016/08/26/mysql-options/</id>
    <published>2016-08-26T04:14:36.000Z</published>
    <updated>2018-03-29T07:14:11.462Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li><p>MySQL 企业版安装后，root密码自动生成在: <code>/root/.mysql_secret</code></p></li><li><p>mysqldump 导出表结构到指定库    </p><a id="more"></a><pre class="line-numbers language-bash"><code class="language-bash">$ mysqldump -hIP -uroot -ppassword --compact --skip-lock-tables --no-data database tableName <span class="token operator">></span> mysqldumpTmp.sql$ mysql -hIP -uroot -ppassword -Ddatabase <span class="token operator">&lt;</span> mysqldumpTemp.sql$ mysqldump -hIP -uroot -ppassword --compact --skip-lock-tables --no-data database tableName <span class="token operator">|</span> mysql -uroot -ppassword databases<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>MySQL 创建指定用户，并授权</p><pre class="line-numbers language-bash"><code class="language-bash">$ CREATE USER <span class="token string">'dw_tools'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'dw_tools'</span><span class="token punctuation">;</span>$ GRANT ALL ON *.* TO <span class="token string">'dw_tools'</span>@<span class="token string">'localhost'</span><span class="token punctuation">;</span>$ FLUSH PRIVILEGES<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>查看进程信息</p><pre><code>$ SELECT * FROM information_schema.processlist WHERE state = &#39;locked&#39;;</code></pre></li></ul><h3 id="切换MySQL-文件目录"><a href="#切换MySQL-文件目录" class="headerlink" title="切换MySQL 文件目录"></a>切换MySQL 文件目录</h3><ul><li><p>Stop MySQL using the following command:</p><pre><code>sudo /etc/init.d/mysql stop</code></pre></li><li><p>Copy the existing data directory (default located in /var/lib/mysql) using the following command:</p><pre><code>sudo cp -R -p /var/lib/mysql /newpath</code></pre></li><li><p>edit the MySQL configuration file with the following command:</p><pre><code>sudo gedit /etc/mysql/my.cnf</code></pre></li><li><p>Look for the entry for datadir, and change the path (which should be /var/lib/mysql) to the new data directory</p></li><li><p>In the terminal, enter the command:</p><pre><code>sudo gedit /etc/apparmor.d/usr.sbin.mysqld</code></pre></li><li><p>Look for lines beginning with <code>/var/lib/mysql</code>. Change <code>/var/lib/mysql</code> in the lines with the new path.</p></li><li><p>Save and close the file.</p></li><li><p>Restart the AppArmor profiles with the command:</p><pre><code>sudo /etc/init.d/apparmor reload</code></pre></li><li><p>Restart MySQL with the command:</p><pre><code>sudo /etc/init.d/mysql restart</code></pre></li><li><p>Now login to MySQL and you can access the same databases you had before.</p></li></ul><h3 id="修改字符集"><a href="#修改字符集" class="headerlink" title="修改字符集"></a>修改字符集</h3><ul><li>修改Column字符集   <pre><code>CREATE TABLE `COLUMNS_V2` (`CD_ID` bigint(20) NOT NULL,`COMMENT` varchar(256) CHARACTER SET latin1 COLLATE latin1_bin DEFAULT NULL,`COLUMN_NAME` varchar(128) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL,`TYPE_NAME` varchar(4000) DEFAULT NULL,`INTEGER_IDX` int(11) NOT NULL,PRIMARY KEY (`CD_ID`,`COLUMN_NAME`),KEY `COLUMNS_V2_N49` (`CD_ID`),CONSTRAINT `COLUMNS_V2_FK1` FOREIGN KEY (`CD_ID`) REFERENCES `CDS` (`CD_ID`)) ENGINE=InnoDB DEFAULT CHARSET=latin1</code></pre><pre><code>CREATE TABLE `PARTITION_KEYS` (`TBL_ID` bigint(20) NOT NULL,`PKEY_COMMENT` varchar(4000) CHARACTER SET latin1 COLLATE latin1_bin DEFAULT NULL,`PKEY_NAME` varchar(128) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL,`PKEY_TYPE` varchar(767) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL,`INTEGER_IDX` int(11) NOT NULL,PRIMARY KEY (`TBL_ID`,`PKEY_NAME`),KEY `PARTITION_KEYS_N49` (`TBL_ID`),CONSTRAINT `PARTITION_KEYS_FK1` FOREIGN KEY (`TBL_ID`) REFERENCES `TBLS` (`TBL_ID`)) ENGINE=InnoDB DEFAULT CHARSET=latin1</code></pre></li></ul><pre><code>ALTER TABLE COLUMNS_V2 MODIFY `COMMENT` varchar(256) CHARACTER SET utf8 collate utf8_bin;ALTER TABLE PARTITION_KEYS MODIFY `PKEY_COMMENT` varchar(4000) CHARACTER SET utf8 collate utf8_bin;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操作&quot; class=&quot;headerlink&quot; title=&quot;基本操作&quot;&gt;&lt;/a&gt;基本操作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MySQL 企业版安装后，root密码自动生成在: &lt;code&gt;/root/.mysql_secret&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mysqldump 导出表结构到指定库    &lt;/p&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://saboloh.com/categories/BigData/"/>
    
    
      <category term="mysql" scheme="http://saboloh.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop常用操作</title>
    <link href="http://saboloh.com/2016/08/19/hadoop-frequently-options/"/>
    <id>http://saboloh.com/2016/08/19/hadoop-frequently-options/</id>
    <published>2016-08-19T03:38:42.000Z</published>
    <updated>2016-09-05T14:47:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hadoop-Commands"><a href="#Hadoop-Commands" class="headerlink" title="Hadoop Commands"></a>Hadoop Commands</h2><p>工作中常用的hadoop操作</p><ul><li><p><a href="http://hortonworks.com/blog/simplifying-user-logs-management-and-access-in-yarn/" target="_blank" rel="external">Yarn logs</a></p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yarn logs -applicationId &lt;application ID&gt; -appOwner &lt;Application Owner&gt; -containerId &lt;Container ID&gt; -nodeAddress &lt;Node Address&gt;</div></pre></td></tr></table></figure></li><li><p>Yarn application  </p></li><li><p><a href="https://hadoop.apache.org/docs/r2.4.1/hadoop-hdfs-httpfs/index.html" target="_blank" rel="external">HttpFs</a>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http://localhost:14000/webhdfs/v1/user/<span class="built_in">history</span>/<span class="keyword">done</span>/2016/09/03/001509/job_1466675370769_1509892_conf.xml?op=open&amp;user.name=hadoop</div></pre></td></tr></table></figure></li><li><p><a href="https://hadoop.apache.org/docs/r2.4.1/hadoop-yarn/hadoop-yarn-site/ResourceManagerRest.html" target="_blank" rel="external">ResourceManager REST API’s</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hadoop-Commands&quot;&gt;&lt;a href=&quot;#Hadoop-Commands&quot; class=&quot;headerlink&quot; title=&quot;Hadoop Commands&quot;&gt;&lt;/a&gt;Hadoop Commands&lt;/h2&gt;&lt;p&gt;工作中常用的hadoop操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://hortonworks.com/blog/simplifying-user-logs-management-and-access-in-yarn/&quot;&gt;Yarn logs&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://saboloh.com/categories/BigData/"/>
    
    
      <category term="Hive" scheme="http://saboloh.com/tags/Hive/"/>
    
      <category term="hadoop" scheme="http://saboloh.com/tags/hadoop/"/>
    
      <category term="command" scheme="http://saboloh.com/tags/command/"/>
    
      <category term="hive" scheme="http://saboloh.com/tags/hive/"/>
    
  </entry>
  
  <entry>
    <title>Git学习指南（二）— MarkDown</title>
    <link href="http://saboloh.com/2016/08/14/git-tutorial-markdown/"/>
    <id>http://saboloh.com/2016/08/14/git-tutorial-markdown/</id>
    <published>2016-08-14T10:08:49.000Z</published>
    <updated>2016-09-04T12:32:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>MarkDown 的目标是易读易写。</p><p>Markdown 强调可读性高于一切。一份Markdown格式的文档应该能直接以纯文本方式发布，而不致一眼看过去满眼都是标签和格式化指令。Markdown的语法确实受了几种现有的text转HTML过滤器影响－－包括 <code>Setext</code> , <code>atx</code>,<code>Textile</code>, <code>reStructuredText</code>,<code>Grutatext</code>, 和<code>EtText</code> – 其中对Markdown语法影响最大的单一来源是纯文本的Email格式。</p><p>为实现这一目标，Markdown的语法几乎全部由标点符号构成，这些标点符号都是精心挑选而来，尽量做到能望文生义。如星号括着一个单词（Markdown中表示强调）看上去就像 <em> 强调 </em>。Markdown的列表看上去就像列表；Markdown的引文就象引文，和你使用email时的感觉一样。</p><a id="more"></a><h3 id="内嵌HTML"><a href="#内嵌HTML" class="headerlink" title="内嵌HTML"></a>内嵌HTML</h3><p>Markdown的语法为“方便地在网上写作”这一目标而生。</p><p>Markdown不是HTML替代品，也不是为了终接HTML。它的语法非常简单，只相当于HTML标签的一个非常非常小的子集。它并非是为了更容易输入HTML标签而创造一种新语法。在我看来，HTML标签已经够容易书写的了。Markdown的目标是让（在网上）让读文章、写文章、修改文章更容易。HTML是一种适合发表的格式；而Markdown是一种书写格式。正因如此，Markdown的格式化语法仅需解决用纯文本表达的问题。</p><p>对Markdown语法无法支持的格式，你可以直接用HTML。你不需要事先声明或者使用什么定界符来告诉Markdown要写HTML了，你直接写就是了。</p><p>唯一的限制是那些块级HTML元素 – 如<strong><code>&lt;div&gt;</code></strong>,<strong><code>&lt;table&gt;</code></strong>,<strong><code>&lt;pre&gt;</code></strong>,<strong><code>&lt;p&gt;</code></strong>等等 – 必须使用空行与相邻内容分开，并且块元素的开始和结束标签之前不要留有空格或TAB。Markdown足够聪明不会添加额外的(也是不必要的)<strong><code>&lt;p&gt;</code></strong>标签包住这些块元素标签。</p><p>下面这个例子，在一篇Markdown文章中添加了一个HTML表格：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">这是一个普通的段落。</div><div class="line"></div><div class="line">&lt;table&gt;  </div><div class="line"> &lt;tr&gt;</div><div class="line">   &lt;td&gt;Foo&lt;/td&gt;</div><div class="line"> &lt;/tr&gt;</div><div class="line">&lt;/table&gt;</div></pre></td></tr></table></figure><p> 注意一点，不要在块级HTML元素内使用Markdown格式化命令，Markdown不会处理它们。比如你不要在一个HTML块中使用 <code>*emphasis*</code>这样的Markdown格式化命令。</p><p> 行内HTML标签 – 如 <strong><code>&lt;span&gt;</code></strong>, <strong><code>&lt;cite&gt;</code></strong>, 或 <strong><code>&lt;del&gt;</code></strong> – 在一个Markdown段落里、列表中、或者标题中－－随便用。 如果需要，你甚至可以用HTML标签代替Markdown格式化命令。比方你可以直接用HTML标签 <strong><code>&lt;a&gt;</code></strong> 或 <strong><code>&lt;img&gt;</code></strong> 而不使用Markdown的链接和图片语法，随你的便。</p><p>不同于这些块级HTML元素，在HTML行内元素内的Markdown语法标记会被正确处理</p><h3 id="自动转换特殊字符"><a href="#自动转换特殊字符" class="headerlink" title="自动转换特殊字符"></a>自动转换特殊字符</h3><p>在HTML中，有两个字符需要特殊对待：<code>&lt;</code>和 <code>&amp;</code>。<code>&lt;</code>用于标签开始，<code>&amp;</code>用于标识HTML实体。如果打算把它们当成普通字符，你必须使用反引号转义它们，如<code>&lt;</code>和<code>&amp;</code>。</p><p>对一些互联网作家来说，&amp;符号特别使人烦恼。如果你打算写’AT&amp;T’，你就得写 ‘AT&amp;T’。甚至在URL中也得想着转义&amp;符号。比方你打算写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://images.google.com/images?num=30&amp;q=larry+bird</div></pre></td></tr></table></figure><p>你就得在A标签中把href属性中的URL编码成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://images.google.com/images?num=30&amp;amp;q=larry+bird</div></pre></td></tr></table></figure><p>不用说，这很容易忘。这往往是那些良构HTML站点中最容易出错的地方。</p><p>在Markdown中，你尽管自然的使用这些字符，只需要关心那些必要的转义。如果使用在HTML实体中使用&amp;符号，它会保持不变；而在其它场合，它会转换成<code>&amp;</code>。</p><p>所以，如果你打算在文章中书写版权符号，你可以这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&amp;copy;</div></pre></td></tr></table></figure><p>Markdown不会碰它。然而如果你书写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AT&amp;T</div></pre></td></tr></table></figure><p>Markdown就会把它翻译成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AT&amp;amp;T</div></pre></td></tr></table></figure><p>类似的，既然Markdown支持内嵌HTML，如果你使用<code>&lt;</code>作为HTML标签定界符，Markdown就会把它们当成HTML标签定界符。可是如果你书写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">4 &lt; 5</div></pre></td></tr></table></figure><p>Markdown就会把它翻译成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">4&amp;lt;5</div></pre></td></tr></table></figure><p>然而，在Mardown代码行内标记和块级标记之中，<code>&lt;</code>和<code>&amp;</code>始终会被自动编码。这使得在Markdown文件中书写HTML代码更容易.(相对于纯HTML。如果想在纯在纯HTML里贴一段HTML代码，那才是糟糕透顶，必须对代码中的每一个<code>&lt;</code>和<code>&amp;</code>都转义才成。)</p><hr><h2 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h2><h4 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h4><p>一个段落由一行或多个相关文本行构成。段落之间用一个或多个空行分隔。（一个空行就是一个看上去什么也没有的行－－如果一行什么也没有或者只有空格和TAB都会被视为空行）正常的段落不要以空白或TAB字符开始。</p><p>一行或多个相关文本行意味着Markdown支持“硬折行”。这一点与其它text转HTML的程序完全不同（包括Moveable Type的“Convert Line Breaks”选项），它们会将段落中的每一个换行符转换成<code>&lt;br /&gt;</code>标签。</p><p>如果你确实需要使用Markdown插入一个<code>&lt;br /&gt;</code>换行符，只需要在每一行的末尾以两个或更多个空格符号结束，然后再打回车键。</p><p>没错，在Markdown里生成一个<code>&lt;br /&gt;</code>稍稍有一点麻烦，但那种简单的“把每一个换行符都转换<code>&lt;br /&gt;</code>规则”并不适用于Markdown。Markdown Email风格的 blockquoting 和 multi-paragraph list items更好用 – 并且更美观 – 在你用换行符对其格式化时。</p><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>Markdown 支持两种风格的标题，<code>Setext</code> 和 <code>atx</code>.</p><p>Setext-风格的一级标题下面一行使用等号符号，二级标题下面使用连字符符号，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">这是一个一级标题</div><div class="line">=============</div><div class="line"></div><div class="line">这是一个二级标题</div><div class="line">-------------</div></pre></td></tr></table></figure><p>至少有一个<strong><code>=</code></strong> 和 <strong><code>-</code></strong>就能正常工作。</p><p>Atx-风格的标题在每行的开头使用1－6个井号字符，分别对应标题级别1－6。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 这是一级标题</div><div class="line"></div><div class="line">## 这是二级标题</div><div class="line"></div><div class="line">###### 这是六级标题</div></pre></td></tr></table></figure><p>如果愿意, 你也可以 “结束” atx-风格的标题。这纯粹是美观考虑–如果你觉得这样会看上更舒服些的话。结束用的井号个数随便，不必与起始井号数量相同 (起始井号的数量决定标题级别)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 这是一级标题 #</div><div class="line"></div><div class="line">## 这是二级标题 ##</div><div class="line"></div><div class="line">###### 这是六级标题 ######</div></pre></td></tr></table></figure><h4 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h4><p>Markdown使用Email风格的 <code>&gt;</code> 字符引用块。如果你熟悉Email中的引用块，你就知道在Markdown中如何使用引用块。如果每一行你都使用硬换行并在行首放一个<code>&gt;</code>符号，看上去会很美观：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</div><div class="line">&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</div><div class="line">&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</div><div class="line">&gt;</div><div class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</div><div class="line">&gt; id sem consectetuer libero luctus adipiscing.</div></pre></td></tr></table></figure><p>（如果觉得每行写一个<code>&gt;</code>太累，）Markdown允许你偷懒，你只需在硬换行段落的第一行之前放一个<code>&gt;</code>号:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</div><div class="line">consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</div><div class="line">Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</div><div class="line"></div><div class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</div><div class="line">id sem consectetuer libero luctus adipiscing.</div></pre></td></tr></table></figure><p>只需要多加一个<code>&gt;</code>，就得到嵌套的引用块(即引用块中的引用块):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; This is the first level of quoting.</div><div class="line">&gt;</div><div class="line">&gt; &gt; This is nested blockquote.</div><div class="line">&gt;</div><div class="line">&gt; Back to the first level.</div></pre></td></tr></table></figure><p>引用块中可包含其它Markdown元素，如标题、列表和代码块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; ## This is a header.</div><div class="line">&gt;</div><div class="line">&gt; 1.   This is the first list item.</div><div class="line">&gt; 2.   This is the second list item.</div><div class="line">&gt;</div><div class="line">&gt; Here&apos;s some example code:</div><div class="line">&gt;</div><div class="line">&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);</div></pre></td></tr></table></figure><p>是个象样的文本编辑器都能实现Email风格的引用。比如在BBEdit里，你就可以选中一些文字之后从Text菜单里选择引用级别。</p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>Markdown 支持有序列表和无序列表</p><p>无序列表可使用星号、加号和连字符（这几个符号是等价的，你喜欢哪个就用哪个）作为列表标记：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">* Red</div><div class="line">* Green</div><div class="line">* Blue</div></pre></td></tr></table></figure><p>等同于:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+ Red</div><div class="line">+ Green</div><div class="line">+ Blue</div></pre></td></tr></table></figure><p>也等同于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- Red</div><div class="line">- Green</div><div class="line">- Blue</div></pre></td></tr></table></figure><p>有序列表则使用数字加英文句点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.  Bird</div><div class="line">2.  McHale</div><div class="line">3.  Parish</div></pre></td></tr></table></figure><p>有一点需要注意，你在列表中输入的标记数字并不会反映到Markdown输出的HTML之中。上面这个列表Markdown会输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ol&gt;</div><div class="line">&lt;li&gt;Bird&lt;/li&gt;</div><div class="line">&lt;li&gt;McHale&lt;/li&gt;</div><div class="line">&lt;li&gt;Parish&lt;/li&gt;</div><div class="line">&lt;/ol&gt;</div></pre></td></tr></table></figure><p>即使你写成下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.  Bird</div><div class="line">1.  McHale</div><div class="line">1.  Parish</div></pre></td></tr></table></figure><p>甚至这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">3. Bird</div><div class="line">1. McHale</div><div class="line">8. Parish</div></pre></td></tr></table></figure><p>都会得到一模一样（但正确的）输出。要点在于，如果你愿意，就在你的Markdown有序列表里顺序使用数字（这样源代码里的顺序和生成的顺序会一致），如果你希望省点儿事，你就不用费心（去手工编号）。</p><p>如果你打算偷懒，记住列表的第一行使用数字 1。以后Markdown或许会支持有序列表从任意数字开始（译者注：这儿和前面的例子有点矛盾，原文如此）。</p><p>列表标记通常从左边界开始，至多可以有三个空格的缩进。列表标记之后至少要跟一个空格或TAB。</p><p>为了让列表看起来美观，你可以使用TAB缩进列表项内容，使其整齐:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</div><div class="line">    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</div><div class="line">    viverra nec, fringilla in, laoreet vitae, risus.</div><div class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</div><div class="line">    Suspendisse id sem consectetuer libero luctus adipiscing.</div></pre></td></tr></table></figure><p>不过如果你很懒，下面这样也行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</div><div class="line">Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</div><div class="line">viverra nec, fringilla in, laoreet vitae, risus.</div><div class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</div><div class="line">Suspendisse id sem consectetuer libero luctus adipiscing.</div></pre></td></tr></table></figure><p>如果列表项之间用空行分隔，Markdown就会在HTML输出中使用<code>&lt;p&gt;</code>标签包裹列表项。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*   Bird</div><div class="line">*   Magic</div></pre></td></tr></table></figure><p>生成的HTML如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">&lt;li&gt;Bird&lt;/li&gt;</div><div class="line">&lt;li&gt;Magic&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure><p>而这个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*   Bird</div><div class="line"></div><div class="line">*   Magic</div></pre></td></tr></table></figure><p>生成的HTML是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure><p>列表项有可能由多个段落组成，列表项的每个后续段落必须缩进至少4个空格或者一个TAB：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1.  This is a list item with two paragraphs. Lorem ipsum dolor</div><div class="line">    sit amet, consectetuer adipiscing elit. Aliquam hendrerit</div><div class="line">    mi posuere lectus.</div><div class="line"></div><div class="line">    Vestibulum enim wisi, viverra nec, fringilla in, laoreet</div><div class="line">    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum</div><div class="line">    sit amet velit.</div><div class="line"></div><div class="line">2.  Suspendisse id sem consectetuer libero luctus adipiscing.</div></pre></td></tr></table></figure><p>像上面这样缩进后续段落的每一行看起来很美观（但稍有些麻烦），如果你比较懒（和我一样），没问题，Markdown支持你：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">*   This is a list item with two paragraphs.</div><div class="line"></div><div class="line">    This is the second paragraph in the list item. You&apos;re only required to indent the  </div><div class="line">    first line. Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</div><div class="line"></div><div class="line">*   Another item in the same list.</div></pre></td></tr></table></figure><p>要在列表项中使用引用，引用定界符 <code>&gt;</code> 需要缩进：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">*   A list item with a blockquote:</div><div class="line"></div><div class="line">    &gt; This is a blockquote</div><div class="line">    &gt; inside a list item.</div></pre></td></tr></table></figure><p>要在列表项中使用代码块，代码块需要缩进两次 – 8个空格或者两个TAB：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*   A list item with a code block:</div><div class="line"></div><div class="line">        &lt;code goes here&gt;</div></pre></td></tr></table></figure><p>有时候不小心会触发一个有序列表，比方在写类似下面这样的东西时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1986. What a great season.</div></pre></td></tr></table></figure><p>换言之， 以数字＋句点＋空格 序列起始的行会触发有序列表。为避免此情况，要对句点符号进行转义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1986\. What a great season.</div></pre></td></tr></table></figure><h5 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h5><p>我们经常在写有关编程或标记语言源代码时用到预格式化的代码块。不像格式化普通段落，代码块中的行会按字面进行解释。Markdown对代码块同时使用<code>&lt;pre&gt;</code>和<code>&lt;code&gt;</code>标签包裹：</p><p>在Markdown中要生成一个代码块，只需要在代码块内容的每一行缩进至少四个空格或者一个TAB。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">This is a normal paragraph:</div><div class="line"></div><div class="line">    This is a code block.</div></pre></td></tr></table></figure><p>Markdown会生成:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;This is a normal paragraph:&lt;/p&gt;</div><div class="line">&lt;pre&gt;&lt;code&gt;This is a code block.</div><div class="line">&lt;/code&gt;&lt;/pre&gt;</div></pre></td></tr></table></figure><p>Markdown会从生成的代码块中删除一级缩进 – 4个空格或者1个TAB。看下面这个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Here is an example of AppleScript:</div><div class="line"></div><div class="line">    tell application &quot;Foo&quot;</div><div class="line">        beep</div><div class="line">    end tell</div></pre></td></tr></table></figure><p>会得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot;</div><div class="line">   beep</div><div class="line">end tell</div><div class="line">&lt;/code&gt;&lt;/pre&gt;</div></pre></td></tr></table></figure><p>代码块在遇到没有缩进的一行，或者文件末尾时自动结束。</p><p>在代码块中，<code>&amp;</code>符号和<code>&lt;</code>、<code>&gt;</code>会自动转换成HTML实体。因此在Markdown中包含HTML源代码只是小菜一碟－－粘贴进去，缩进一下。剩下的脏活累活Markdown自会处理。看下面这个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;sample_footer&quot;&gt;</div><div class="line">    &amp;copy; 2004 Foo Corporation</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>Markdown会生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">© 2004 Foo Corporation</div></pre></td></tr></table></figure><p>Markdown不会解析代码块中的Markdown标记。如代码块中的星号就是星号，失去了它原来的Markdown含义。这意味着你能够使用Markdown编写Markdown自己的语法教程。（就象这篇文章一样）。</p><h6 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h6><p>如果在一行里只放三个或更多个连字符，或星号或下划线，你就会得到一个水平线标记(<code>&lt;hr /&gt;</code>)。下面每一行都会得到一个水平线：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">* * *</div><div class="line"></div><div class="line">***</div><div class="line"></div><div class="line">*****</div><div class="line"></div><div class="line">- - -</div><div class="line"></div><div class="line">---------------------------------------</div></pre></td></tr></table></figure><hr><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>Markdown 支持两种风格的链接： 行内链接 和 引用链接.</p><p>两种风格的链接，链接文本都放在中括号之内[square brackets]。</p><p>要生成一个行内链接，在链接文本之后紧跟用一对小括号。小括号里放链接地址和可选的的链接title。如果提供链接title的话，链接title要用引号包起来。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">这是一个 [an example](http://example.com/ &quot;Title&quot;) 行内链接。</div><div class="line"></div><div class="line">[这个链接](http://example.net/) 没有title属性。</div></pre></td></tr></table></figure><p>Markdown会生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;</div><div class="line">an example&lt;/a&gt; inline link.&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no</div><div class="line">title attribute.&lt;/p&gt;</div></pre></td></tr></table></figure><p>如果你打算引用一个本地资源或者同一站点的资源，可以使用相对路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">如果想进一步了解我，请参阅我的 [关于我](/about/) 页。</div></pre></td></tr></table></figure><p>引用风格的链接，在链接文本之后紧跟又一对中括号。这对中括号里放的是该链接的标识符（可以理解为别名）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是一个引用型链接 [示例][id]。</div></pre></td></tr></table></figure><p>如果你嫌弃两对中括号过于亲密，Markdown允许你在两对中括号之间放一个空格：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是一个引用型链接 [示例] [id]。</div></pre></td></tr></table></figure><p>然后，我们可以在文档的任意位置，像下面这样定义链接标识与链接的对应关系（一行一个链接）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[id] : http://example.com/  &quot;Optional Title Here&quot;</div></pre></td></tr></table></figure><p>即：</p><ul><li>中括号内放链接标识符(行前可选缩进，至多不超过三个空格)；</li><li>之后紧跟一个冒号；</li><li>再后面是一个或多个空格（TAB也行）；</li><li>接下来是链接URL；</li><li>最后面是可选的用双引号或单引号或小括号括起来的链接title。</li></ul><p>下面三种链接定义方式是等价的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[foo] : http://example.com/  &quot;Optional Title Here&quot;</div><div class="line">[foo] : http://example.com/  &apos;Optional Title Here&apos;</div><div class="line">[foo] : http://example.com/  (Optional Title Here)</div></pre></td></tr></table></figure><p><strong>注意： Markdown.pl 1.0.1</strong> 版本有一个已知的bug，用单引号作为链接title的定界符会出问题。</p><p>至于链接URL，还支持使用一对可选的尖括号包裹起来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[id] : &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;</div></pre></td></tr></table></figure><p>你也可以将链接的title属性放在下一行并使用额外的空格或TAB填充，这样较长的URL会比较美观：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[id] : http://example.com/longish/path/to/resource/here</div><div class="line">    &quot;Optional Title Here&quot;</div></pre></td></tr></table></figure><p>链妆定义仅供Markdown解析器使用。最终输出的HTML当中不会包含链接定义。</p><p>链接标识符可以由字母、数字、空格和标点符号组成－－不区分大小写。下面这两个链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[link text][a]</div><div class="line">[link text][A]</div></pre></td></tr></table></figure><p>是等价的。</p><p>隐式链接标识 允许我们省略链接标识，这时链接文本本身就是链接标识。在链接文本之后加一对空的中括号－－例如，使用”Google”文本链接到google.com站点，可以这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[Google][]</div></pre></td></tr></table></figure><p>然后这样定义它的链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[Google] : http://google.com/</div></pre></td></tr></table></figure><p>链接名字有可能包含空格，不过没问题，这种情况照样正常工作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Visit [Daring Fireball][] for more information.</div></pre></td></tr></table></figure><p>然后这样定义这个链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[Daring Fireball] : http://daringfireball.net/</div></pre></td></tr></table></figure><p>链接定义可放于Markdown文档的任意位置。我建议把它们就近放到最先使用它的段落之后。不过如果你更喜欢放到文档末尾，当成某种形式的尾注，随你的便。</p><p>下面是一些引用链接的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">I get 10 times more traffic from [Google] [11] than from</div><div class="line">[Yahoo] [12] or [MSN] [13].</div><div class="line"></div><div class="line">  [1] : http://google.com/        &quot;Google&quot;</div><div class="line">  [2] : http://search.yahoo.com/  &quot;Yahoo Search&quot;</div><div class="line">  [3] : http://search.msn.com/    &quot;MSN Search&quot;</div></pre></td></tr></table></figure><p>换成隐式链接标识，也可以这么写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">I get 10 times more traffic from [Google][] than from</div><div class="line">[Yahoo][] or [MSN][].</div><div class="line"></div><div class="line">  [google] : http://google.com/        &quot;Google&quot;</div><div class="line">  [yahoo] :  http://search.yahoo.com/  &quot;Yahoo Search&quot;</div><div class="line">  [msn] :    http://search.msn.com/    &quot;MSN Search&quot;</div></pre></td></tr></table></figure><p>上面两种写法最终得到HTML输出是一样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/  </div><div class="line">   title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from</div><div class="line">&lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt;</div><div class="line">or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN  Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;</div></pre></td></tr></table></figure><p>作为比较，下面这个段落使用Markdown的行内链接风格编写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)</div><div class="line">than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or</div><div class="line">[MSN](http://search.msn.com/ &quot;MSN Search&quot;).</div></pre></td></tr></table></figure><p>引用型链接的亮点并不在于它更容易书写，而在于引用型链接让你的文档可读性更好。看看上面的例子：使用引用型链接，段落本身仅81个字符；而使用行内链接的例子，是176个字符。最终输出的HTML则有234个字符。纯HTML中标记字符甚至超过了文本本身。</p><p>使用Markdown的引用型链接，源文档更接近于最终的浏览器输出效果。再加上Markdown允许将标记有关的元数据移到段落之外，你尽管添加链接，而不必担心打断文件的故事情节。</p><h4 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h4><p>Markdown使用星号(<code>*</code>)和下划线(<code>_</code>)作为表示强调。用一个 <code>*</code>或 <code>_</code> 包裹的文本会使用 HTML &lt;<code>em</code>&gt; 标签包裹; 用两个 <code>*</code> 或 <code>_</code>包裹的文本会使用HTML<code>&lt;strong&gt;</code> 标签包裹。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">*single asterisks*</div><div class="line"></div><div class="line">_single underscores_</div><div class="line"></div><div class="line">**double asterisks**</div><div class="line"></div><div class="line">__double underscores__</div></pre></td></tr></table></figure><p>将会输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;em&gt;single asterisks&lt;/em&gt;</div><div class="line"></div><div class="line">&lt;em&gt;single underscores&lt;/em&gt;</div><div class="line"></div><div class="line">&lt;strong&gt;double asterisks&lt;/strong&gt;</div><div class="line"></div><div class="line">&lt;strong&gt;double underscores&lt;/strong&gt;</div></pre></td></tr></table></figure><p>你喜欢哪一种风格就用哪一种，唯一的限制就是起始字符与关闭字符必须一致。</p><p>强调符号可用于一个单词的一部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">un*frigging*believable</div></pre></td></tr></table></figure><p>不过如果你用空格包裹单独的 <code>*</code> 或 <code>_</code>，它们就失去了强调的含义，而成为字面上的星号或下划线。</p><p>如果不想让Markdown解释这两个元字符，就转义它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\*this text is surrounded by literal asterisks\*</div></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>要在行内表示部分代码，用反引号( ` )包住它。与预格式代码块不同和，行内代码用于段落之内。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Use the `printf()` function.</div></pre></td></tr></table></figure><p>会生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;</div></pre></td></tr></table></figure><p>要在一个行内代码中使用反引号（`）本身，用多个反引号作为定界符包住它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">``There is a literal backtick (`) here.``</div></pre></td></tr></table></figure><p>这样就会得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;</div></pre></td></tr></table></figure><p>包住行内代码的反引号定界符可以包括空格－－即在起始反引号之后，结束反引号之前可以有一个空格。这使得我们能够在行内代码的开始或结束处使用反引号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">A single backtick in a code span: `` ` ``</div><div class="line"></div><div class="line">A backtick-delimited string in a code span: `` `foo` ``</div></pre></td></tr></table></figure><p>会生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;p&gt;A backtick-delimited string in a code span:  </div><div class="line">&lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;</div></pre></td></tr></table></figure><p>在行内代码中，&amp;和&lt;和&gt;会自动编码为HTML实体，以方便包含HTML标签。Markdown会把下面这行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Please don&apos;t use any `&lt;blink&gt;` tags.</div></pre></td></tr></table></figure><p>转换为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;Please don&apos;t use any &lt;code&gt;&lt;blink&gt;&lt;/code&gt; tags.&lt;/p&gt;</div></pre></td></tr></table></figure><p>你也可以这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.</div></pre></td></tr></table></figure><p>会得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;&lt;code&gt;&amp;#8212;&lt;/code&gt; is the decimal-encoded  </div><div class="line">equivalent of &lt;code&gt;&amp;mdash;&lt;/code&gt;.&lt;/p&gt;</div></pre></td></tr></table></figure><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>必须承认，要以“自然的”语法把一个图片放到一个纯文本文档之中，确实是一个挑战。</p><p>Markdown使用了类似链接语法来表示图片，同样有两种风格：行内图片和引用图片。</p><p>行内图片语法示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">![Alt text](/path/to/img.jpg)</div><div class="line"></div><div class="line">![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</div></pre></td></tr></table></figure><p>即：</p><ul><li>一个感叹号<code>!</code>开头；</li><li>其后紧跟一对中括号，中括号内存放图片的<code>alt</code>属性；</li><li>其后紧跟一对小括号，小括号内存放图片的URL或路径，及可选的用双引号或单引号或小括号括起来的图片<code>title</code></li></ul><p>引用图片语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![Alt text][id]</div></pre></td></tr></table></figure><p>这里 “id” 是图片引用标识。图片引用定义的语法与链接定义完全相同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[id] : url/to/image  &quot;Optional title attribute&quot;</div></pre></td></tr></table></figure><p>在写这篇文章时，Markdown还没有语法指定图片的大小，如果这一点对你特别重要，你可以直接使用<code>&lt;img&gt;</code>标签。</p><h3 id="杂七杂八"><a href="#杂七杂八" class="headerlink" title="杂七杂八"></a>杂七杂八</h3><h4 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h4><p>Markdown提供了一种快捷方式”自动地”定义链接和Email地址：直接用一对尖括号把URL或Email地址包住。这表示链接文本就是URL本身，Email文本就是Email本身。这样你就得到了一个可点击的链接，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;http://example.com/&gt;</div></pre></td></tr></table></figure><p>Markdown会将它转换为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;</div></pre></td></tr></table></figure><p>自动Email地址工作方式相似，只有一点不同。Markdown自动的用一些十进制和十六进制数字表示你的Email，以防止遭遇垃圾邮件袭击。 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;address@example.com&gt;</div></pre></td></tr></table></figure><p>会被转换为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;</div><div class="line">&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;</div><div class="line">&amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;</div><div class="line">&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;</div></pre></td></tr></table></figure><p>浏览器会将它渲染为一个可点击的链接，并正确显示”address@example.com”。</p><p>(这种实体编码的小方法可以骗过一些收集邮件地址的机器人，不过它确实无法骗过所有的机器人。有总比没有强，聊胜于无。能阻止一点就阻止一点好了。)</p><h4 id="反斜线转义"><a href="#反斜线转义" class="headerlink" title="反斜线转义"></a>反斜线转义</h4><p>Markdown允许你使用反斜线转义那些Markdown元字符，让它们失去原有的“魔力”。举个例子，如果你确实想用星号包住一个词组（而不是想得到<code>&lt;em&gt;</code>标签），就可以在星号之前使用反斜线将其转义。即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\*literal asterisks\*</div></pre></td></tr></table></figure><p>Markdown中，以下字符支持使用反斜线转义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">\   反斜线</div><div class="line">`   反引号</div><div class="line">*   星号</div><div class="line">_   下划线</div><div class="line">&#123;&#125;  大括号</div><div class="line">[]  中括号</div><div class="line">()  小括号</div><div class="line">#   井号</div><div class="line">+   加号</div><div class="line">-   减号（连字符）</div><div class="line">.   句点</div><div class="line">!   感叹号</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MarkDown 的目标是易读易写。&lt;/p&gt;
&lt;p&gt;Markdown 强调可读性高于一切。一份Markdown格式的文档应该能直接以纯文本方式发布，而不致一眼看过去满眼都是标签和格式化指令。Markdown的语法确实受了几种现有的text转HTML过滤器影响－－包括 &lt;code&gt;Setext&lt;/code&gt; , &lt;code&gt;atx&lt;/code&gt;,&lt;code&gt;Textile&lt;/code&gt;, &lt;code&gt;reStructuredText&lt;/code&gt;,&lt;code&gt;Grutatext&lt;/code&gt;, 和&lt;code&gt;EtText&lt;/code&gt; – 其中对Markdown语法影响最大的单一来源是纯文本的Email格式。&lt;/p&gt;
&lt;p&gt;为实现这一目标，Markdown的语法几乎全部由标点符号构成，这些标点符号都是精心挑选而来，尽量做到能望文生义。如星号括着一个单词（Markdown中表示强调）看上去就像 &lt;em&gt; 强调 &lt;/em&gt;。Markdown的列表看上去就像列表；Markdown的引文就象引文，和你使用email时的感觉一样。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://saboloh.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://saboloh.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Custom hive input format</title>
    <link href="http://saboloh.com/2016/07/02/custom-hive-input-format/"/>
    <id>http://saboloh.com/2016/07/02/custom-hive-input-format/</id>
    <published>2016-07-02T09:53:48.000Z</published>
    <updated>2016-09-04T12:32:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>针对一定规则的HDFS文件，为了更好地和Hive表结合，定制HiveInputFormat</p><p><a href="https://github.com/jianle/UDHiveInputFormat" target="_blank" rel="external">查看GitHub项目</a>, 需要实现包含如下：</p><ul><li>FileInputFormat</li><li>RecordReader</li><li>SerDe</li><li>HiveStorageHandler</li></ul><a id="more"></a><h3 id="FileInputFormat"><a href="#FileInputFormat" class="headerlink" title="FileInputFormat"></a>FileInputFormat</h3><p>定义MyFileInputFormat 继承 FileInputFormat（旧接口 org.apache.hadoop.mapred）该类没有做任何其它操作，仅仅只是重写了<code>getRecordReader</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHiveInputFormat</span> <span class="keyword">extends</span> <span class="title">FileInputFormat</span>&lt;<span class="title">Text</span>, <span class="title">BytesWritable</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RecordReader&lt;Text, BytesWritable&gt; <span class="title">getRecordReader</span><span class="params">(InputSplit split, JobConf job, Reporter reporter)</span></span></div><div class="line">            <span class="keyword">throws</span> IOException &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyHiveRecordReader(split, job);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="RecordReader-—-MapReduce-重要组件"><a href="#RecordReader-—-MapReduce-重要组件" class="headerlink" title="RecordReader — MapReduce 重要组件"></a>RecordReader — MapReduce 重要组件</h3><ul><li>以怎样的方式从分片中读取一条记录，每读取一条记录都会调用RecordReader类</li><li>默认的RecordReader是LineRecordReader，如TextInputFormat</li><li>LineRecordReader是用每行的偏移量作为map的key，每行的内容作为map的value</li><li>读入数据主要处理逻辑在<code>next</code>方法中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHiveRecordReader</span> <span class="keyword">implements</span> <span class="title">RecordReader</span>&lt;<span class="title">Text</span>, <span class="title">BytesWritable</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log LOG = LogFactory.getLog(MyHiveRecordReader.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> start;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> pos;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> end;</div><div class="line">    <span class="keyword">private</span> InputStream in;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyHiveRecordReader</span><span class="params">(InputSplit genericSplit, Configuration conf)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">        FileSplit split = (FileSplit) genericSplit;</div><div class="line">        start = split.getStart();</div><div class="line">        end = start + split.getLength();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> Path file = split.getPath();</div><div class="line">        FileSystem fs = file.getFileSystem(conf);</div><div class="line">        FSDataInputStream fileIn = fs.open(file);</div><div class="line"></div><div class="line">        CompressionCodecFactory compressionCodecFactory = <span class="keyword">new</span> CompressionCodecFactory(conf);</div><div class="line">        <span class="keyword">final</span> CompressionCodec codec = compressionCodecFactory.getCodec(file);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (codec != <span class="keyword">null</span>) &#123;</div><div class="line">            LOG.debug(<span class="string">"use conf compressioncodec."</span>);</div><div class="line">            in = codec.createInputStream(fileIn);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            in = <span class="keyword">new</span> SnappyInputStream(fileIn);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        pos = start;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">next</span><span class="params">(Text key, BytesWritable value)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">byte</span>[] header = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</div><div class="line">        <span class="keyword">while</span> (in.read(header, <span class="number">0</span>, <span class="number">4</span>) != -<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">int</span> bodyLength = bytesToInt(header);</div><div class="line">            <span class="keyword">byte</span>[] body = <span class="keyword">new</span> <span class="keyword">byte</span>[bodyLength];</div><div class="line">            in.read(body, <span class="number">0</span>, bodyLength);</div><div class="line">            key.set(<span class="keyword">new</span> Text());</div><div class="line">            value.set(body, <span class="number">0</span>, bodyLength);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Text <span class="title">createKey</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Text();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> BytesWritable <span class="title">createValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BytesWritable();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getPos</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.pos;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getProgress</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (start == end) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0.0f</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> Math.min(<span class="number">1.0f</span>, (pos - start) / (<span class="keyword">float</span>) (end - start));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</div><div class="line">            in.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// bytes 高位存储转int</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">bytesToInt</span><span class="params">(<span class="keyword">byte</span>[] bits)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> val;</div><div class="line">        val = (<span class="keyword">int</span>) ((bits[<span class="number">3</span>] &amp; <span class="number">0xFF</span>)</div><div class="line">                | ((bits[<span class="number">2</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span>)</div><div class="line">                | ((bits[<span class="number">1</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span>)</div><div class="line">                | ((bits[<span class="number">0</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span>));</div><div class="line">        <span class="keyword">return</span> val;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="SerDe"><a href="#SerDe" class="headerlink" title="SerDe"></a>SerDe</h3><p>Hive的反序列化是对key/value反序列化成hive table的每个列的值。SerDe是Serialize/Deserilize的简称，目的是用于序列化和反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHiveSerDe</span> <span class="keyword">implements</span> <span class="title">SerDe</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> StructObjectInspector objectInspector;</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; columnNames;</div><div class="line">    <span class="keyword">private</span> List&lt;Object&gt; row;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> numColumns;</div><div class="line">    <span class="keyword">private</span> List&lt;PrimitiveCategory&gt; columnTypes;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(MyHiveSerDe.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Configuration conf, Properties tbl)</span> <span class="keyword">throws</span> SerDeException </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">        LOG.debug(<span class="string">"Initializing WTableHiveSerDe"</span>);</div><div class="line">        <span class="comment">// Get column names and types</span></div><div class="line">        String columnNameProperty = tbl.getProperty(serdeConstants.LIST_COLUMNS);</div><div class="line">        String columnTypeProperty = tbl.getProperty(serdeConstants.LIST_COLUMN_TYPES);</div><div class="line"></div><div class="line">        <span class="comment">// all table column names</span></div><div class="line">        <span class="keyword">if</span> (columnNameProperty.length() == <span class="number">0</span>) &#123;</div><div class="line">          columnNames = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          columnNames = Arrays.asList(columnNameProperty.split(<span class="string">","</span>));</div><div class="line">        &#125;</div><div class="line">        numColumns = columnNames.size();</div><div class="line">        String[] hiveColumnTypes = columnTypeProperty.split(<span class="string">":"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// all column types</span></div><div class="line">        List&lt;ObjectInspector&gt; fieldInspectors = <span class="keyword">new</span> ArrayList&lt;ObjectInspector&gt;(numColumns);</div><div class="line">        columnTypes = <span class="keyword">new</span> ArrayList&lt;PrimitiveCategory&gt;(numColumns);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numColumns; i++) &#123;</div><div class="line">            String typeName = hiveColumnTypes[i];</div><div class="line">            PrimitiveCategory type = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                type = PrimitiveObjectInspectorUtils.getTypeEntryFromTypeName(typeName).primitiveCategory;</div><div class="line">                columnTypes.add(type);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SerDeException(typeName + <span class="string">" is not supported!"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            fieldInspectors.add(PrimitiveObjectInspectorFactory.getPrimitiveJavaObjectInspector(type));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        LOG.debug(<span class="string">"columns: &#123;&#125;, &#123;&#125;"</span>, columnNameProperty, columnNames);</div><div class="line">        LOG.debug(<span class="string">"types: &#123;&#125;, &#123;&#125; "</span>, columnTypeProperty, columnTypes);</div><div class="line"></div><div class="line">        <span class="keyword">assert</span> (columnNames.size() == columnTypes.size());</div><div class="line"></div><div class="line">        row = <span class="keyword">new</span> ArrayList&lt;Object&gt;(numColumns);</div><div class="line">        objectInspector = ObjectInspectorFactory.getStandardStructObjectInspector(columnNames, fieldInspectors);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deserialize</span><span class="params">(Writable blob)</span> <span class="keyword">throws</span> SerDeException </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        BytesWritable writable = (BytesWritable) blob;</div><div class="line">        CommonDump commonDump = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            commonDump = CommonDump.parseFrom(writable.copyBytes());</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Map&lt;FieldDescriptor, Object&gt; _fields = commonDump.getAllFields();</div><div class="line">        Map&lt;String, Object&gt; fields = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(_fields.size());</div><div class="line">        row.clear();</div><div class="line"></div><div class="line">        Iterator&lt;FieldDescriptor&gt; fieldKeys = _fields.keySet().iterator();</div><div class="line">        <span class="keyword">while</span> (fieldKeys.hasNext()) &#123;</div><div class="line"></div><div class="line">            FieldDescriptor fieldKey = fieldKeys.next();</div><div class="line">            fields.put(fieldKey.getName().toLowerCase(), _fields.get(fieldKey));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numColumns; i++) &#123;</div><div class="line"></div><div class="line">            String colName = columnNames.get(i).toLowerCase();</div><div class="line">            row.add(optVal(columnTypes.get(i), fields.get(colName)));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> row;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ObjectInspector <span class="title">getObjectInspector</span><span class="params">()</span> <span class="keyword">throws</span> SerDeException </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">return</span> objectInspector;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> SerDeStats <span class="title">getSerDeStats</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SerDeStats();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Class&lt;? extends Writable&gt; getSerializedClass() &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">return</span> MyWritable.class;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Writable <span class="title">serialize</span><span class="params">(Object obj, ObjectInspector objInspector)</span> <span class="keyword">throws</span> SerDeException </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SerDeException(<span class="string">"Serialize to db does not supported. Pull-request is appreciated."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object <span class="title">optVal</span><span class="params">(PrimitiveCategory pcat, Object val)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (pcat) &#123;</div><div class="line">        <span class="keyword">case</span> INT:</div><div class="line">            <span class="keyword">return</span> Integer.valueOf(String.valueOf(val));</div><div class="line">        <span class="keyword">case</span> LONG:</div><div class="line">            <span class="keyword">return</span> Long.valueOf(String.valueOf(val));</div><div class="line">        <span class="keyword">case</span> BINARY:</div><div class="line">            <span class="keyword">return</span> ((ByteString) val).toByteArray();</div><div class="line">        <span class="keyword">case</span> STRING:</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(((ByteString) val).toByteArray());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="HiveStorageHandler"><a href="#HiveStorageHandler" class="headerlink" title="HiveStorageHandler"></a>HiveStorageHandler</h3><p>使用HiveStorageHandler 整合InputFormat、OutputFormat、SerDe</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStorageHandler</span> <span class="keyword">implements</span> <span class="title">HiveStorageHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Configuration conf;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConf</span><span class="params">(Configuration conf)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.conf = conf;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Configuration <span class="title">getConf</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.conf;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</div><div class="line">    <span class="keyword">public</span> Class&lt;? extends InputFormat&gt; getInputFormatClass() &#123;</div><div class="line">        <span class="keyword">return</span> MyHiveInputFormat.class;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</div><div class="line">    <span class="keyword">public</span> Class&lt;? extends OutputFormat&gt; getOutputFormatClass() &#123;</div><div class="line">        <span class="keyword">return</span> HiveIgnoreKeyTextOutputFormat.class;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Class&lt;? extends SerDe&gt; getSerDeClass() &#123;</div><div class="line">        <span class="keyword">return</span> MyHiveSerDe.class;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> HiveMetaHook <span class="title">getMetaHook</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> HiveAuthorizationProvider <span class="title">getAuthorizationProvider</span><span class="params">()</span> <span class="keyword">throws</span> HiveException </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureInputJobProperties</span><span class="params">(TableDesc tableDesc, Map&lt;String, String&gt; jobProperties)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureOutputJobProperties</span><span class="params">(TableDesc tableDesc, Map&lt;String, String&gt; jobProperties)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureTableJobProperties</span><span class="params">(TableDesc tableDesc, Map&lt;String, String&gt; jobProperties)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureJobConf</span><span class="params">(TableDesc tableDesc, JobConf jobConf)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>定制HiveInputFormat可灵活让Hive与HDFS文件结合， 重点掌握<code>FileInputFormat</code>，如果考虑到小文件，可使用<code>CombineFileInputFormat</code>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;针对一定规则的HDFS文件，为了更好地和Hive表结合，定制HiveInputFormat&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jianle/UDHiveInputFormat&quot;&gt;查看GitHub项目&lt;/a&gt;, 需要实现包含如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FileInputFormat&lt;/li&gt;
&lt;li&gt;RecordReader&lt;/li&gt;
&lt;li&gt;SerDe&lt;/li&gt;
&lt;li&gt;HiveStorageHandler&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://saboloh.com/categories/BigData/"/>
    
    
      <category term="java" scheme="http://saboloh.com/tags/java/"/>
    
      <category term="hive" scheme="http://saboloh.com/tags/hive/"/>
    
  </entry>
  
  <entry>
    <title>初试 Protocol Buffers</title>
    <link href="http://saboloh.com/2016/06/29/use-protocol-buffers/"/>
    <id>http://saboloh.com/2016/06/29/use-protocol-buffers/</id>
    <published>2016-06-29T14:35:36.000Z</published>
    <updated>2016-09-04T12:32:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Protocol-Buffers"><a href="#Protocol-Buffers" class="headerlink" title="Protocol Buffers"></a><a href="https://developers.google.com/protocol-buffers/docs/javatutorial" target="_blank" rel="external">Protocol Buffers</a></h2><p>现有个<a href="http://google.github.io/snappy/" target="_blank" rel="external">snappy</a>压缩文件，解压后文件存储格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[4 byte size][protobuf][4 byte size][protobuf]...</div></pre></td></tr></table></figure><p>4个字节（高位存储）存储的是后面<code>protobuf</code>序列化的长度，需对文件进行解析</p><a id="more"></a><ul><li>install protoc</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/google/protobuf/releases/download/v2.6.1/protobuf-2.6.1.tar.gz</div><div class="line">$ tar -zxvf protobuf-2.6.1.tar.gz</div><div class="line">$ <span class="built_in">cd</span> protobuf-2.6.1</div><div class="line">$ ./configure</div><div class="line">$ make &amp; make install</div></pre></td></tr></table></figure><p><code>.protoc</code>文件内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">syntax = <span class="string">"proto2"</span>;</div><div class="line"></div><div class="line"><span class="keyword">package</span> tutorial;</div><div class="line"></div><div class="line">option java_package = <span class="string">"com.example.tutorial"</span>;</div><div class="line">option java_outer_classname = <span class="string">"CommonDumpOuter"</span>;</div><div class="line"></div><div class="line">message CommonDump &#123;</div><div class="line">  optional uint32 tableId = <span class="number">1</span>;</div><div class="line">  optional uint32 colSpace = <span class="number">2</span>;</div><div class="line">  optional bytes rowKey = <span class="number">3</span>;</div><div class="line">  optional bytes colKey = <span class="number">4</span>;</div><div class="line">  optional bytes value = <span class="number">5</span>;</div><div class="line">  optional int64 score = <span class="number">6</span>;</div><div class="line">  optional uint32 ttl = <span class="number">7</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>通过protoc编译成<code>.java</code>文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ protoc --java_out=. commonDump.proto</div></pre></td></tr></table></figure><ul><li>通过java解析文件</li></ul><p>a. 首先要知道如何将高位的4字节长度转换为int</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bytesToInt</span><span class="params">(<span class="keyword">byte</span>[] src)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> value;</div><div class="line">    value = (<span class="keyword">int</span>) ((src[<span class="number">3</span>] &amp; <span class="number">0xFF</span>)</div><div class="line">            | ((src[<span class="number">2</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span>)</div><div class="line">            | ((src[<span class="number">1</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span>)</div><div class="line">            | ((src[<span class="number">0</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span>));</div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>b. 然后使用SnappyInputStream读入file</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">InputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"/tmp/path/dump_file.dat.sp"</span>);</div><div class="line"></div><div class="line">in = <span class="keyword">new</span> SnappyInputStream(in);</div><div class="line"></div><div class="line"><span class="keyword">byte</span>[] header = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>]; <span class="comment">//用于读入长度</span></div><div class="line">CommonDump commonDump = <span class="keyword">null</span>; <span class="comment">// protpbuf</span></div><div class="line"><span class="keyword">long</span> length = <span class="number">0</span>; <span class="comment">//记录数</span></div><div class="line"><span class="keyword">while</span> (in.read(header, <span class="number">0</span>, <span class="number">4</span>) != -<span class="number">1</span>) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> bodylength = bytesToInt(header);</div><div class="line">    <span class="keyword">byte</span>[] body = <span class="keyword">new</span> <span class="keyword">byte</span>[bodylength];</div><div class="line">    in.read(body, <span class="number">0</span>, bodylength);</div><div class="line">    length++;</div><div class="line"></div><div class="line">    commonDump = CommonDump.parseFrom(body);</div><div class="line">    <span class="comment">// 接下来可以打印数据看看</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ol><li>主要需要理解文件的存储格式，才能正确的将<code>protobuf</code>序列化文件反序列化。其次是4字节的高位存储，如何将高位存储的byte转换成int</li><li>在文件读入的时候，使用snappy输入流</li><li>解析是一部分，后续如何结合hive，定义表格式化读取文件展示才是大的挑战</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Protocol-Buffers&quot;&gt;&lt;a href=&quot;#Protocol-Buffers&quot; class=&quot;headerlink&quot; title=&quot;Protocol Buffers&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/javatutorial&quot;&gt;Protocol Buffers&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;现有个&lt;a href=&quot;http://google.github.io/snappy/&quot;&gt;snappy&lt;/a&gt;压缩文件，解压后文件存储格式为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[4 byte size][protobuf][4 byte size][protobuf]...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4个字节（高位存储）存储的是后面&lt;code&gt;protobuf&lt;/code&gt;序列化的长度，需对文件进行解析&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://saboloh.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://saboloh.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hive常用函数</title>
    <link href="http://saboloh.com/2016/06/17/hive-frequently-udf/"/>
    <id>http://saboloh.com/2016/06/17/hive-frequently-udf/</id>
    <published>2016-06-17T02:24:18.000Z</published>
    <updated>2016-09-10T14:37:50.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF#LanguageManualUDF-get_json_object" target="_blank" rel="external">get_json_object</a></li><li>rank  </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> a.*, <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">key</span> <span class="keyword">order</span> <span class="keyword">by</span> created <span class="keyword">desc</span>) <span class="keyword">as</span> rk</div><div class="line"><span class="keyword">FROM</span>   table_name a</div></pre></td></tr></table></figure><a id="more"></a><ul><li>regexp_extract(string subject, string pattern, int index)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> regexp_extract(<span class="string">'https://cwiki.apache.org/confluence/display'</span>, <span class="string">'org/([a-z]+)/'</span>, <span class="number">1</span>)</div></pre></td></tr></table></figure><ul><li>regexp_replace(string INITIAL_STRING, string PATTERN, string REPLACEMENT)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> regexp_replace(<span class="string">'hive site:xxxx'</span>, <span class="string">'^[a-z]+'</span>, <span class="string">''</span>)</div></pre></td></tr></table></figure><ul><li>current_date</li><li>date_add(string startdate, int days)</li><li>date_sub(string startdate, int days)</li><li>datediff(string enddate, string startdate)</li><li>to_date(string timestamp)</li><li>from_unixtime(string date[, string format]) </li><li>unix_timestamp(string date)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> from_unixtime(<span class="keyword">unix_timestamp</span>(<span class="string">'2016-09-07 07:07:13.02'</span>), <span class="string">'HH'</span>);//02</div></pre></td></tr></table></figure><ul><li>regexp_extract(string str, string regexp, int idx)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> regexp_extract(<span class="string">'2016-09-07 02:07:13.02'</span>, <span class="string">' ([0-9]+):'</span>, <span class="number">1</span>); //02</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF#LanguageManualUDF-get_json_object&quot;&gt;get_json_object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;rank  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; a.*, &lt;span class=&quot;keyword&quot;&gt;rank&lt;/span&gt;() &lt;span class=&quot;keyword&quot;&gt;over&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; created &lt;span class=&quot;keyword&quot;&gt;desc&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; rk&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt;   table_name a&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://saboloh.com/categories/BigData/"/>
    
    
      <category term="hive" scheme="http://saboloh.com/tags/hive/"/>
    
  </entry>
  
  <entry>
    <title>Git学习指南（一）— 入门</title>
    <link href="http://saboloh.com/2016/06/15/git-tutorial-getting-start/"/>
    <id>http://saboloh.com/2016/06/15/git-tutorial-getting-start/</id>
    <published>2016-06-15T05:37:22.000Z</published>
    <updated>2016-09-04T12:32:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在Windows下安装和配置Git"><a href="#在Windows下安装和配置Git" class="headerlink" title="在Windows下安装和配置Git"></a>在Windows下安装和配置Git</h2><ul><li><p>前往<a href="http://git-scm.com/" target="_blank" rel="external">Git官网</a>，下载安装包并安装（建议安装至D:\Git目录），从开始菜单打开Git Bash：</p><a id="more"></a><p><img src="/img/git/git-bash.png" alt="Git Bash"></p></li><li><p>增加中文支持。向/etc/git-completion.bash文件追加以下内容：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alias ls=&apos;ls --show-control-chars --color=auto&apos;</div><div class="line">alias gl=&apos;git log --graph --pretty=format:&apos;\&apos;&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos;\&apos;&apos; --abbrev-commit --date=relative&apos;</div></pre></td></tr></table></figure><p>并向/etc/gitconfig文件追加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[gui]</div><div class="line">encoding = utf-8</div></pre></td></tr></table></figure><p>重新启动Git Bash程序。</p><ul><li>配置Git用户名和邮箱，会在提交信息中显示。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"张三"</span></div><div class="line">$ git config --global user.email <span class="string">"sanzhang@xx.com"</span></div></pre></td></tr></table></figure><ul><li>生成SSH公私钥对，使用默认目录，建议不要设置密码：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa</div><div class="line">$ chmod 700 ~/.ssh</div><div class="line">$ chmod 400 ~/.ssh/id_rsa</div></pre></td></tr></table></figure><p><img src="/img/git/sshkey.png" alt="ssh-keygen"></p><p>复制~/.ssh/id_rsa.pub公钥文件的内容（可以用资源管理器到C:\Documents and Settings\用户名.ssh\中查看），使用域账号登录<a href="https://github.com/" target="_blank" rel="external">GitHub</a>，进入<a href="https://github.com/settings/keys" target="_blank" rel="external">Settings</a>，新增公钥并粘贴刚才复制的内容。</p><p><img src="/img/git/configkey.png" alt=""></p><h2 id="在Linux-ubuntu-下安装和配置Git"><a href="#在Linux-ubuntu-下安装和配置Git" class="headerlink" title="在Linux(ubuntu)下安装和配置Git"></a>在Linux(ubuntu)下安装和配置Git</h2><ul><li>使用<code>sudo apt-get install git</code>安装git</li><li>配置环境变量 <code>vim .bashrc</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alias gl=&apos;git log --graph --pretty=format:&apos;\&apos;&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos;\&apos;&apos; --abbrev-commit --date=relative&apos;</div></pre></td></tr></table></figure><ul><li>其余配置同上</li></ul><h3 id="安装TortoiseGit（可选）"><a href="#安装TortoiseGit（可选）" class="headerlink" title="安装TortoiseGit（可选）"></a>安装TortoiseGit（可选）</h3><ul><li>前往<a href="https://code.google.com/p/tortoisegit/wiki/Download" target="_blank" rel="external">官网</a>下载安装包并安装（建议安装至D:\TortoiseGit目录）；</li><li>右键进入TortoiseGit - Settings界面，点击Network，设置SSH client为D:\Git\bin\ssh.exe</li><li>使用邮件菜单的Clone就能将远程仓库下载到本地了，并能使用Pull来更新：</li></ul><h3 id="安装EGit"><a href="#安装EGit" class="headerlink" title="安装EGit"></a>安装EGit</h3><p><strong>注：最新版的Eclipse已经包含了EGit插件，下面内容仅针对老版本Helios</strong></p><ul><li>打开Eclipse，点击Help - Install New Software</li><li>在地址栏中输入 <a href="http://download.eclipse.org/egit/updates-2.1" target="_blank" rel="external">http://download.eclipse.org/egit/updates-2.1</a> ，回车</li><li>勾选Eclipse Git Team Provider - Eclipse EGit一项即可，安装后会重启Eclipse</li><li>导入仓库中的项目，右击选择Team - Share Project，使用Git</li><li>然后就能直接在Eclipse中进行各种Git操作了</li></ul><h2 id="新建Git仓库"><a href="#新建Git仓库" class="headerlink" title="新建Git仓库"></a>新建Git仓库</h2><h3 id="新建本地仓库"><a href="#新建本地仓库" class="headerlink" title="新建本地仓库"></a>新建本地仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /path/to/your-new-repo</div><div class="line">$ git init</div><div class="line">$ git add -A</div><div class="line">$ git commit -m <span class="string">'init'</span></div></pre></td></tr></table></figure><h3 id="在github上新建远程仓库"><a href="#在github上新建远程仓库" class="headerlink" title="在github上新建远程仓库"></a>在github上新建远程仓库</h3><p><a href="https://github.com/" target="_blank" rel="external">github</a>中每个用户都可以在自己名下建立任意多个仓库。登录网站后，点击右上角的“+”号，选择“New repository”，输入仓库名称即可。</p><h3 id="推送至远程仓库"><a href="#推送至远程仓库" class="headerlink" title="推送至远程仓库"></a>推送至远程仓库</h3><h4 id="1-对于新建的仓库"><a href="#1-对于新建的仓库" class="headerlink" title="1. 对于新建的仓库"></a>1. 对于新建的仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin git@github.com:yourname/your-new-repo.git</div><div class="line">$ git push origin master</div><div class="line">$ git branch --set-upstream master origin/master</div></pre></td></tr></table></figure><p>这三条语句的作用分别是：</p><ol><li>在本地仓库的配置文件中新增一个远程仓库地址，名称为origin。</li><li>将本地仓库的master分支推送到线上。</li><li>将本地仓库的master分支和远程仓库的master分支关联起来，这样就能直接运行git pull来拉取远程的改动。</li></ol><h4 id="2-对于从其他仓库克隆过来的项目"><a href="#2-对于从其他仓库克隆过来的项目" class="headerlink" title="2. 对于从其他仓库克隆过来的项目"></a>2. 对于从其他仓库克隆过来的项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git remote remove origin</div><div class="line">$ git remote add origin ... 同上</div></pre></td></tr></table></figure><p>当然，你也可以使用新的远程仓库名称，这样可以让你的本地仓库和多个远程仓库相关联：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git remote add newname git@github.com:yourname/your-new-repo.git</div><div class="line">$ git push newname master</div><div class="line">$ git branch --set-upstream master newname/master</div></pre></td></tr></table></figure><h4 id="3-直接克隆新建的远程仓库"><a href="#3-直接克隆新建的远程仓库" class="headerlink" title="3. 直接克隆新建的远程仓库"></a>3. 直接克隆新建的远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git@github.com:yourname/your-new-repo.git</div><div class="line">$ <span class="built_in">cd</span> your-new-repo</div></pre></td></tr></table></figure><p>如果你没有先在本地建立仓库，可以直接克隆新建好的远程仓库，这时origin地址、master分支的关联都会自动配置。这种情况用的比较少。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在Windows下安装和配置Git&quot;&gt;&lt;a href=&quot;#在Windows下安装和配置Git&quot; class=&quot;headerlink&quot; title=&quot;在Windows下安装和配置Git&quot;&gt;&lt;/a&gt;在Windows下安装和配置Git&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前往&lt;a href=&quot;http://git-scm.com/&quot;&gt;Git官网&lt;/a&gt;，下载安装包并安装（建议安装至D:\Git目录），从开始菜单打开Git Bash：&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://saboloh.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://saboloh.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hive使用遇到的一些问题</title>
    <link href="http://saboloh.com/2016/04/28/hive-issue/"/>
    <id>http://saboloh.com/2016/04/28/hive-issue/</id>
    <published>2016-04-28T07:28:33.000Z</published>
    <updated>2016-09-04T12:32:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="记录使用ORC所遇到的一些问题"><a href="#记录使用ORC所遇到的一些问题" class="headerlink" title="记录使用ORC所遇到的一些问题"></a>记录使用<code>ORC</code>所遇到的一些问题</h2><h3 id="查询报错"><a href="#查询报错" class="headerlink" title="查询报错"></a>查询报错</h3><p>由于hiveserver2中默认设置了“矢量化执行器” enable为true， 这导致使用orc存储的表使用上了这个参数，走了“矢量化执行器”导致错误，其中遇到的错误有：</p><a id="more"></a><ul><li>数组越界  </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> a.serv_dt, a.broker_id, a.log_time, b.log_time</div><div class="line">       ,<span class="keyword">unix_timestamp</span>(b.log_time)-<span class="keyword">unix_timestamp</span>(a.log_time) <span class="keyword">as</span> time_diff</div><div class="line"><span class="keyword">from</span>   (<span class="keyword">select</span> *</div><div class="line">        <span class="keyword">from</span>   dw_db_temp.GL_20160422_noqiang_page_broker_action_rank</div><div class="line">        <span class="keyword">where</span>  page_id=<span class="string">'1-150000'</span></div><div class="line">       ) a</div><div class="line"><span class="keyword">join</span>   dw_db_temp.GL_20160422_noqiang_page_broker_action_rank b</div><div class="line">  <span class="keyword">on</span>   a.con=b.con <span class="keyword">and</span> b.rk=a.rk+<span class="number">1</span>;</div></pre></td></tr></table></figure><ul><li>空指向  </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> dw_db_temp.gh_esf_tmp1;</div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> dw_db_temp.gh_esf_tmp1</div><div class="line"><span class="keyword">as</span></div><div class="line"><span class="keyword">select</span> cal_dt</div><div class="line">       ,city_id</div><div class="line">       ,region_name</div><div class="line">       ,subregion_id, subregion_name</div><div class="line">       ,<span class="keyword">count</span>(<span class="keyword">distinct</span> comm_id) <span class="keyword">as</span> pm_comm</div><div class="line">       ,<span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> is_comm_repeat=<span class="number">1</span> <span class="keyword">then</span> comm_id <span class="keyword">end</span>) <span class="keyword">as</span> pm_comm_repeat</div><div class="line"><span class="keyword">from</span>   dw_db_temp.gh_esf_pm_broker_last</div><div class="line"><span class="keyword">where</span>  subregion_name <span class="keyword">in</span> (<span class="string">'长阳'</span>,<span class="string">'良乡'</span>,<span class="string">'窦店'</span>,<span class="string">'梨园'</span>,<span class="string">'通州北苑'</span>,<span class="string">'武夷花园'</span>,<span class="string">'中央别墅区'</span>,<span class="string">'通州北苑'</span>,<span class="string">'华南'</span>,<span class="string">'泉水'</span>,<span class="string">'泡崖'</span>,<span class="string">'机场新区'</span>,<span class="string">'西山水库'</span>,<span class="string">'马坡'</span>)</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> cal_dt,city_id,region_name,subregion_id,subregion_name</div><div class="line">;</div></pre></td></tr></table></figure><p>解决办法，将<code>矢量化执行器</code>关闭即可：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">set</span> hive.vectorized.execution.enabled = <span class="literal">false</span>;</div><div class="line"><span class="keyword">set</span> hive.vectorized.execution.reduce.enabled = <span class="literal">false</span>;</div></pre></td></tr></table></figure><h3 id="查询无结果"><a href="#查询无结果" class="headerlink" title="查询无结果"></a>查询无结果</h3><p>hive表存成<code>ORC</code>格式，自关联出现无结果现象并且无任何错误，异常SQL如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> a.*</div><div class="line">       ,b.call_7</div><div class="line"><span class="keyword">FROM</span>   (<span class="keyword">SELECT</span> comm_id</div><div class="line">               ,call_30</div><div class="line">               ,call_success_30</div><div class="line">               ,call_nonunique_30</div><div class="line">        <span class="keyword">FROM</span>   dw_db_temp.carrie_mr_call_jt_160428_3</div><div class="line">        <span class="keyword">WHERE</span>  <span class="keyword">type</span>=<span class="number">3</span></div><div class="line">       ) a</div><div class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span></div><div class="line">       (<span class="keyword">SELECT</span> comm_id</div><div class="line">               ,call_30</div><div class="line">               ,call_success_30</div><div class="line">               ,call_nonunique_30</div><div class="line">        <span class="keyword">FROM</span>   dw_db_temp.carrie_mr_call_jt_160428_3</div><div class="line">        <span class="keyword">WHERE</span>  <span class="keyword">type</span>=<span class="number">2</span></div><div class="line">       ) b</div><div class="line">   <span class="keyword">ON</span>  a.comm_id=b.comm_id</div><div class="line"><span class="keyword">LIMIT</span> <span class="number">100</span></div><div class="line">;</div></pre></td></tr></table></figure><p>其导致原因是因为再hiveserver2上默认开启了参数<code>hive.optimize.index.filter</code>为true，解决办法：</p><ul><li>将表格式存成textfile</li><li>关闭hive.optimize.index.filter</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">set</span> hive.optimize.index.filter=<span class="literal">false</span>;</div></pre></td></tr></table></figure><h3 id="写表报错"><a href="#写表报错" class="headerlink" title="写表报错"></a><a href="https://issues.cloudera.org/browse/DISTRO-756" target="_blank" rel="external">写表报错</a></h3><p>当默认使用orc写表时，where子句中出现 where col is null 将报  java.lang.IllegalArgumentException: Bad primitive category VOID 异常</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> dw_db_temp.carrie_call_comm_160428_01;</div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> dw_db_temp.carrie_call_comm_160428_01</div><div class="line"><span class="keyword">as</span></div><div class="line"><span class="keyword">select</span> a.*,b.pcall_id</div><div class="line"><span class="keyword">from</span>   (<span class="keyword">select</span> * <span class="keyword">from</span> dw_db.dw_phone_call_logs</div><div class="line">        <span class="keyword">where</span> created_dt&gt;=<span class="keyword">date_sub</span>($&#123;dealDate&#125;,<span class="number">7</span>)</div><div class="line">       ) a</div><div class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span></div><div class="line">       (<span class="keyword">select</span> date_index,phonenum,loupan_id,pcall_id</div><div class="line">        <span class="keyword">from</span>   dw_db.dw_nh_adm_transfer_log</div><div class="line">        <span class="keyword">where</span>  date_index&gt;=<span class="keyword">date_sub</span>($&#123;dealDate&#125;,<span class="number">7</span>)</div><div class="line">          <span class="keyword">and</span>  flag=<span class="number">2</span></div><div class="line">          <span class="keyword">and</span>  <span class="keyword">type</span>&gt;<span class="number">1</span></div><div class="line">       )b</div><div class="line">   <span class="keyword">on</span>  a.created_dt=b.date_index <span class="keyword">and</span> a.id=b.pcall_id</div><div class="line"><span class="keyword">where</span>  b.pcall_id <span class="keyword">is</span> <span class="literal">null</span></div><div class="line">;</div></pre></td></tr></table></figure><p>解决办法： 将hive表建成textfile即可   </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> table_name <span class="keyword">stored</span> <span class="keyword">as</span> textfile</div><div class="line"><span class="keyword">as</span></div><div class="line"><span class="keyword">select</span> ......</div></pre></td></tr></table></figure><h2 id="MapJoin-字段类型不一致"><a href="#MapJoin-字段类型不一致" class="headerlink" title="MapJoin 字段类型不一致"></a>MapJoin 字段类型不一致</h2><p>主要是 string 和 int 的列做 join</p><p>日志里面看 job 长期 hang 在以下位置</p><p>查看你 map 的时候，map 的状态为 FAILED， 查看 map 的日志，最后有以下类似的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2015-12-11 04:26:06,119 INFO [main] org.apache.hadoop.hive.ql.exec.MapJoinOperator: Load back 1 hashtable file from tmp file uri:file:/hadoop3/yarn/nm/usercache/hadoop/appcache/application_1449142557781_73597/container_e11_1449142557781_73597_01_000002/Stage-9.tar.gz/MapJoin-mapfile11--.hashtable</div></pre></td></tr></table></figure><p><em>解决方法</em> 保证用于 join 的列一致，cast 或者直接修改表的结构</p><p>如果还不能解决，先手动禁用掉 MapJoin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set hive.auto.convert.join=false;</div></pre></td></tr></table></figure><h2 id="hive-使用的新的序列化方法后偶尔出现的问题"><a href="#hive-使用的新的序列化方法后偶尔出现的问题" class="headerlink" title="hive 使用的新的序列化方法后偶尔出现的问题"></a>hive 使用的新的序列化方法后偶尔出现的问题</h2><p>这种问题一般是代码里面设置了 <code>set hive.exec.parallel=true;</code> 运行的时候，偶尔会报以下错误，重跑有可能成功：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">aliasToWork (org.apache.hadoop.hive.ql.plan.MapWork)</div><div class="line">    at org.apache.hive.com.esotericsoftware.kryo.util.DefaultClassResolver.readClass(DefaultClassResolver.java:<span class="number">119</span>)</div><div class="line">    at org.apache.hive.com.esotericsoftware.kryo.Kryo.readClass(Kryo.java:<span class="number">656</span>)</div><div class="line">    at org.apache.hive.com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:<span class="number">99</span>)</div><div class="line">    at org.apache.hive.com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:<span class="number">507</span>)</div><div class="line">    at org.apache.hive.com.esotericsoftware.kryo.Kryo.readClassAndObject(Kryo.java:<span class="number">776</span>)</div></pre></td></tr></table></figure><p>如果有这种情况，解决的方法是先更换序列化的方法，即加入：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">set</span> hive.plan.serialization.format=javaXML;</div></pre></td></tr></table></figure></p><h2 id="WHERE-条件int限制值超过Integer-MAX-VALUE值导致出错"><a href="#WHERE-条件int限制值超过Integer-MAX-VALUE值导致出错" class="headerlink" title="WHERE 条件int限制值超过Integer.MAX_VALUE值导致出错"></a>WHERE 条件int限制值超过Integer.MAX_VALUE值导致出错</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *</div><div class="line"><span class="keyword">from</span>   dual</div><div class="line"><span class="keyword">where</span>  <span class="keyword">id</span>=<span class="number">2183402559</span></div></pre></td></tr></table></figure><p>id为int类型，where里面id=’2183402559’ 限制值超过 Integer.MAX_VALUE=2147483647 导致下面报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.apache.hive.service.cli.HiveSQLException: Error <span class="keyword">while</span> compiling statement: FAILED: SemanticException [Error <span class="number">10041</span>]: No partition predicate found <span class="keyword">for</span> Alias “a” Table &gt; “dw_ganji_house_source_officetrade”</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;记录使用ORC所遇到的一些问题&quot;&gt;&lt;a href=&quot;#记录使用ORC所遇到的一些问题&quot; class=&quot;headerlink&quot; title=&quot;记录使用ORC所遇到的一些问题&quot;&gt;&lt;/a&gt;记录使用&lt;code&gt;ORC&lt;/code&gt;所遇到的一些问题&lt;/h2&gt;&lt;h3 id=&quot;查询报错&quot;&gt;&lt;a href=&quot;#查询报错&quot; class=&quot;headerlink&quot; title=&quot;查询报错&quot;&gt;&lt;/a&gt;查询报错&lt;/h3&gt;&lt;p&gt;由于hiveserver2中默认设置了“矢量化执行器” enable为true， 这导致使用orc存储的表使用上了这个参数，走了“矢量化执行器”导致错误，其中遇到的错误有：&lt;/p&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://saboloh.com/categories/BigData/"/>
    
    
      <category term="Hive" scheme="http://saboloh.com/tags/Hive/"/>
    
      <category term="hive" scheme="http://saboloh.com/tags/hive/"/>
    
      <category term="ORC" scheme="http://saboloh.com/tags/ORC/"/>
    
      <category term="issue" scheme="http://saboloh.com/tags/issue/"/>
    
  </entry>
  
  <entry>
    <title>如何使用hexo+github搭建博客</title>
    <link href="http://saboloh.com/2016/04/26/how-to-use-hexo-setup-blog/"/>
    <id>http://saboloh.com/2016/04/26/how-to-use-hexo-setup-blog/</id>
    <published>2016-04-26T12:34:16.000Z</published>
    <updated>2016-09-04T12:32:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文详细描述如何在Linux（本人ubuntu开发环境）下使用hexo在github上搭建属于自己的博客</p><p>搭建分为两步：</p><ul><li>使用Hexo 搭建本地blog</li><li>在github建立x.github.com 项目，并将本地hexo推送到github上</li></ul><a id="more"></a><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><ul><li>安装git</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install git</div></pre></td></tr></table></figure><ul><li>下载<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a><ul><li>解压</li><li>配置环境</li><li>查看node是否安装成功</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ tar -zxvf node-v5.1.0-linux-x64.tar.gz</div><div class="line">$ vim .bashrc</div><div class="line"><span class="comment"># node</span></div><div class="line"><span class="built_in">export</span> NODE_HOME=/home/saboloh/developer/node-v5.1.0-linux-x64</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$NODE_HOME</span>/bin:<span class="variable">$PATH</span></div><div class="line">$ <span class="built_in">source</span> .bashrc</div><div class="line">$ npm config <span class="built_in">set</span> unsafe-perm <span class="literal">true</span></div><div class="line">$ node -v|npm -v  查看一下版本即可</div></pre></td></tr></table></figure><ul><li>安装<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">hexo</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div><div class="line">$ npm install hexo-server -g</div></pre></td></tr></table></figure><h2 id="开始blog之旅"><a href="#开始blog之旅" class="headerlink" title="开始blog之旅"></a>开始blog之旅</h2><ul><li>初始化</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mkdir blog</div><div class="line">$ <span class="built_in">cd</span> blog</div><div class="line">$ hexo init</div></pre></td></tr></table></figure><ul><li>安装依赖包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure><ul><li>启动本地服务查看</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s -g</div></pre></td></tr></table></figure><p>访问<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 如果看到如下，那么恭喜你第一步已经完成</p><p><img src="/img/hexo_init.png" alt=""></p><ul><li>选择<a href="https://hexo.io/themes/" target="_blank" rel="external">主题</a></li></ul><p>以主题<a href="http://blog.zhangruipeng.me/hexo-theme-minos/" target="_blank" rel="external">Minos</a>为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> blog</div><div class="line">$ git <span class="built_in">clone</span> https://github.com/ppoffice/hexo-theme-minos.git themes/minos</div></pre></td></tr></table></figure><p>修改<code>_config.yml</code>，指定主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: minos</div></pre></td></tr></table></figure><p>启动<code>hexo s -g</code>并访问效果如下：</p><p><img src="/img/minos_demo.png" alt=""></p><p>接下来需要配置blog的一些信息以及页面，其中包括home/Archives/Categories/Tags/About</p><p>修改或添加相关信息至_config.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Site</span></div><div class="line">title: Loh<span class="string">'s Blog</span></div><div class="line">subtitle: Loh's B<span class="built_in">log</span></div><div class="line">description: Loh<span class="string">'s Blog</span></div><div class="line">author: Loh</div><div class="line">language: zh-CN</div><div class="line">timezone: Asia/Shanghai</div><div class="line"></div><div class="line"># Header</div><div class="line">menu:</div><div class="line">  Home: /</div><div class="line">  Archives: archives</div><div class="line">  Categories: categories</div><div class="line">  Tags: tags</div><div class="line">  About: about</div></pre></td></tr></table></figure><p>Header效果如下:<br><img src="/img/minos_header.png" alt=""></p><p>页面的部分地方可以自己修改主题里面的代码，调整至自己想要的</p><p>接下来需要开始写博文和创建页面了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo n <span class="string">"我的第一篇博文"</span></div><div class="line">$ hexo n page <span class="string">"About"</span>    //创建页面</div></pre></td></tr></table></figure><ul><li><p>在<a href="https://github.com/" target="_blank" rel="external">github</a>上创建一个项目格式为“username.github.com”</p></li><li><p>配置本地<a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="external">hexo-blog 部署</a></p></li></ul><p>执行<code>hexo g</code> + <code>hexo d</code> 就完成了部署, 这样在浏览器中访问username.github.com即可看到你的博客了，简单轻松完成！如果舍得花钱，可以买个域名，本人在万维网上买的，域名便宜。</p><ul><li>配置域名</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> blog</div><div class="line">$ vim <span class="built_in">source</span>/CNAME</div><div class="line">saboloh.com</div></pre></td></tr></table></figure><p>也许你还会发现少了点什么 —— 评论！！！<br>我使用的是<a href="https://disqus.com/" target="_blank" rel="external">disqus</a> 在disqus上创建账户，将shortname配置到_config.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#disqus</span></div><div class="line">disqus_shortname: saboloh</div></pre></td></tr></table></figure><p>基本搭建完成，如果需要额外的功能，可以在<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">hexo</a> 上研究研究</p><p>如果在搭建过程中遇到问题，可以评论留言或email给我，大家可以一起探讨</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文详细描述如何在Linux（本人ubuntu开发环境）下使用hexo在github上搭建属于自己的博客&lt;/p&gt;
&lt;p&gt;搭建分为两步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Hexo 搭建本地blog&lt;/li&gt;
&lt;li&gt;在github建立x.github.com 项目，并将本地hexo推送到github上&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://saboloh.com/categories/Linux/"/>
    
    
      <category term="blog" scheme="http://saboloh.com/tags/blog/"/>
    
      <category term="github" scheme="http://saboloh.com/tags/github/"/>
    
      <category term="hexo" scheme="http://saboloh.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse远程调试Java应用</title>
    <link href="http://saboloh.com/2016/04/21/Debug-Java-applications-remotely-with-Eclipse/"/>
    <id>http://saboloh.com/2016/04/21/Debug-Java-applications-remotely-with-Eclipse/</id>
    <published>2016-04-21T07:08:13.000Z</published>
    <updated>2016-09-04T12:32:17.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>原文地址 <a href="http://www.ibm.com/developerworks/library/os-eclipse-javadebug/" target="_blank" rel="external">Debug Java applications remotely with Eclipse</a></li></ul><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>如果你还没准备好， 下载Eclipse V3.4 (Ganymede)，在Ganymede中socket监听连接器已被添加到远程Java应用程序启动配置类型中。Eclipse新的socket监听连接器允许你启动Java调试模式，它监听特定的socket连接，可以使用命令行选项来启动程序连接调试模式开始程序调试。在Ganymede之前的发行版本中，只有提供了socket-attaching连接器，当前调试程序需作为调试主机被调试器连接。这对于移动设备由于内存电源不足是不切实际的。</p><p>要使用远程调试，Java虚拟机必须是5.0或更高的版本，如IBM® J9或者Sun Microsystems公司的Java SE开发工具包（JDK），在这篇文章中，我们重点关注远程调试，而不是Eclipse调试功能的每一个细节。请查阅相关<a href="http://www.ibm.com/developerworks/library/os-eclipse-javadebug/#resources" target="_blank" rel="external">资料</a> 有关于Eclipse调试及上述信息。</p><a id="more"></a><h2 id="JPDA介绍"><a href="#JPDA介绍" class="headerlink" title="JPDA介绍"></a>JPDA介绍</h2><ul><li>常用缩写<ul><li>JDI— Java Debug Interface</li><li>JDT— Java Development Tools</li><li>JDWP— Java Debug Wire Protocol</li><li>JPDA— Java Platform Debugger Architecture</li><li>JVM— Java Virtual Machine</li><li>JVMDI— JVM Debug Interface</li><li>JVMTI— JVM Tool Interface</li><li>VM— Virtual Machine</li></ul></li></ul><p>Sun Microsystems的Java平台调试器架构（JPDA）技术是一个多层次的体系结构，允许你在任何情况下轻松调试Java应用程序。JPDA由两个接口组成（一个是JVM工具和JDI），另一个是协议（Java Debug Wire Protocol），这两个软件一起组成（前台和后台），它的设计是为了在任何环境下使用调试器。JPAD也不仅仅是桌面系统，同时也适用于嵌入式系统。<br>JVM工具接口（JVMTI）定义了一个虚拟机必须提供的调试（编者注：从java V5开始，JVMTI取代JVMDI，用于java V1.4），</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;原文地址 &lt;a href=&quot;http://www.ibm.com/developerworks/library/os-eclipse-javadebug/&quot;&gt;Debug Java applications remotely with Eclipse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h2&gt;&lt;p&gt;如果你还没准备好， 下载Eclipse V3.4 (Ganymede)，在Ganymede中socket监听连接器已被添加到远程Java应用程序启动配置类型中。Eclipse新的socket监听连接器允许你启动Java调试模式，它监听特定的socket连接，可以使用命令行选项来启动程序连接调试模式开始程序调试。在Ganymede之前的发行版本中，只有提供了socket-attaching连接器，当前调试程序需作为调试主机被调试器连接。这对于移动设备由于内存电源不足是不切实际的。&lt;/p&gt;
&lt;p&gt;要使用远程调试，Java虚拟机必须是5.0或更高的版本，如IBM® J9或者Sun Microsystems公司的Java SE开发工具包（JDK），在这篇文章中，我们重点关注远程调试，而不是Eclipse调试功能的每一个细节。请查阅相关&lt;a href=&quot;http://www.ibm.com/developerworks/library/os-eclipse-javadebug/#resources&quot;&gt;资料&lt;/a&gt; 有关于Eclipse调试及上述信息。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://saboloh.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://saboloh.com/tags/java/"/>
    
      <category term="debug" scheme="http://saboloh.com/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>hadoop 机房迁移相关问题</title>
    <link href="http://saboloh.com/2016/04/19/hadoop-relocation-issue/"/>
    <id>http://saboloh.com/2016/04/19/hadoop-relocation-issue/</id>
    <published>2016-04-19T11:08:34.000Z</published>
    <updated>2016-09-05T14:47:56.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="更改机器的-ip-参考"><a href="#更改机器的-ip-参考" class="headerlink" title="更改机器的 ip 参考"></a>更改机器的 ip 参考</h4><ul><li>CDH 4 的时候需要修改数据库</li></ul><p><code>/etc/cloudera-scm-server/db.properties</code>这个文件记录 cm 用的 DB 的信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># psql  -h localhost -U scm -p 7432</span></div><div class="line">scm=&gt; \dt <span class="comment"># show tables in pg</span></div><div class="line">scm=&gt; \list</div><div class="line">scm=&gt; select * from hosts; <span class="comment"># show hostinfo in hosts</span></div></pre></td></tr></table></figure></p><a id="more"></a><p><code>/etc/cloudera-scm-agent/config.ini</code> 每个 agent 里面有记录 cm 的地址, 修改:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">server_host=10.xx.xx.xx</div></pre></td></tr></table></figure></p><ul><li><p>CDH 5 的时候使用 uuid 来标识每台机器，看起来只需要修改一下 <code>/etc/cloudera-scm-agent/config.ini</code> 里面对应的 server_host 即可</p></li><li><p>相关参考：</p><ul><li><a href="https://groups.google.com/a/cloudera.org/forum/#!mydiscussions/scm-users/gM-DtmxvkJ8" target="_blank" rel="external">https://groups.google.com/a/cloudera.org/forum/#!mydiscussions/scm-users/gM-DtmxvkJ8</a></li><li><a href="http://shulhi.com/change-ip-address-for-existing-nodes-in-cdh-5-3/" target="_blank" rel="external">http://shulhi.com/change-ip-address-for-existing-nodes-in-cdh-5-3/</a></li></ul></li></ul><p>除了上面写的，还需要保证:</p><ul><li>dns 解析正确，或者 <code>/etc/hosts</code> 里面配置正确，否则 <code>cloudera-scm-server</code> 会hang住，导致 7182 这个服务无法连接。<code>cloudera-scm-agent</code> 连不上</li><li>需要deploy client config</li><li>namenode ha 启动会有问题，原因是之前 zk 里面保存的 hostname 发生改变，停掉 failover controller 去 initiale zookeeper 都不会失败</li></ul><p>需要手动去设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HADOOP_USER_NAME=hdfs </div><div class="line">hdfs --config /var/run/cloudera-scm-agent/process/150-failover-controller-initialize-znode zkfc -formatZK</div></pre></td></tr></table></figure><p>提示我们 stop all hdfs service，输入 Y 确认格式掉 zookeeper 相关数据（注意，不是格式化 namenode）<br>后面重启就好了</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;更改机器的-ip-参考&quot;&gt;&lt;a href=&quot;#更改机器的-ip-参考&quot; class=&quot;headerlink&quot; title=&quot;更改机器的 ip 参考&quot;&gt;&lt;/a&gt;更改机器的 ip 参考&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;CDH 4 的时候需要修改数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;/etc/cloudera-scm-server/db.properties&lt;/code&gt;这个文件记录 cm 用的 DB 的信息&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# psql  -h localhost -U scm -p 7432&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;scm=&amp;gt; \dt &lt;span class=&quot;comment&quot;&gt;# show tables in pg&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;scm=&amp;gt; \list&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;scm=&amp;gt; select * from hosts; &lt;span class=&quot;comment&quot;&gt;# show hostinfo in hosts&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://saboloh.com/categories/BigData/"/>
    
    
      <category term="hadoop" scheme="http://saboloh.com/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>安装CDH指定版本5.4.7</title>
    <link href="http://saboloh.com/2016/04/19/install-cdh-5.4.7/"/>
    <id>http://saboloh.com/2016/04/19/install-cdh-5.4.7/</id>
    <published>2016-04-19T08:34:42.000Z</published>
    <updated>2016-09-05T14:47:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>离线安装CDH5.4.7</p><ul><li><p><a href="http://www.cloudera.com/documentation/enterprise/latest/topics/cm_ig_install_path_a.html#cmig_topic_6_5_unique_2" target="_blank" rel="external">官方文档</a></p></li><li><p>删除已有<a href="http://www.cloudera.com/documentation/enterprise/5-5-x/topics/cm_ig_uninstall_cm.html" target="_blank" rel="external">cloudera manager</a></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ /usr/share/cmf/uninstall-cloudera-manager.sh</div><div class="line"></div><div class="line">$ apt-get purge <span class="string">'cloudera-manager-*'</span></div><div class="line"></div><div class="line">$ umount cm_processes</div><div class="line">$ rm -Rf /usr/share/cmf /var/lib/cloudera* /var/cache/yum/cloudera* /var/<span class="built_in">log</span>/cloudera* /var/run/cloudera*</div><div class="line"></div><div class="line">$ rm -Rf /var/lib/flume-ng /var/lib/hadoop* /var/lib/hue /var/lib/navigator /var/lib/oozie /var/lib/solr /var/lib/sqoop* /var/lib/zookeeper</div></pre></td></tr></table></figure><a id="more"></a><ul><li>查看系统版本 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ lsb_release <span class="_">-a</span></div><div class="line">No LSB modules are available.</div><div class="line">Distributor ID: Ubuntu</div><div class="line">Description:    Ubuntu 12.04.4 LTS</div><div class="line">Release:    12.04</div><div class="line">Codename:   precise</div></pre></td></tr></table></figure><ul><li>下载对应包并且配置本地源(避免使用cloudera-manager-installer.bin直接安装总是获取最新版CDH) </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">下载好tarball</div><div class="line"></div><div class="line">$ wget http://archive.cloudera.com/cm5/repo-as-tarball/5.4.7/cm5.4.7-ubuntu12-04.tar.gz</div><div class="line">$ tar -zxvf cm5.4.7-ubuntu12-04.tar.gz</div><div class="line">$ cp -r cm /var/spool/apt-mirror/mirror/archive.cloudera.com/</div><div class="line"></div><div class="line"><span class="comment"># 使用nginx配置</span></div><div class="line">$ apt-get install nginx </div><div class="line">$ vim /etc/nginx/nginx.conf</div><div class="line"><span class="comment"># 访问本地目录列表</span></div><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  dev-001;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        root   /var/spool/apt-mirror/mirror/archive.cloudera.com/;</div><div class="line">        index  index.html index.htm;</div><div class="line">        autoindex on;</div><div class="line">        autoindex_exact_size off;</div><div class="line">        autoindex_localtime on;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    error_page   500 502 503 504  /50x.html;</div><div class="line">    location = /50x.html &#123;</div><div class="line">        root   html;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>浏览确认是否能访问 </li></ul><p><img src="/img/filelist.png" alt=""></p><ul><li>配置apt source</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/apt/source.list.d/my-private-cloudera-repo.list</div><div class="line"># Packages for Clouderas Distribution for Hadoop, Version 4, on Ubuntu 12.04 x86_64</div><div class="line">deb [arch=amd64] http://dev-001/cm precise-cm5 contrib</div><div class="line">deb-src http://dev-001/cm precise-cm5.4.7 contrib</div></pre></td></tr></table></figure><ul><li>下载对应<a href="http://archive.cloudera.com/cdh5/parcels/" target="_blank" rel="external">parcel</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">找到对应自己系统的parcels</div><div class="line">$ wget http://archive.cloudera.com/cdh5/parcels/5.4.7/CDH-5.4.7-1.cdh5.4.7.p0.3-precise.parcel</div><div class="line">$ wget wget http://archive.cloudera.com/cdh5/parcels/5.4.7/CDH-5.4.7-1.cdh5.4.7.p0.3-precise.parcel.sha1</div><div class="line">$ wget http://archive.cloudera.com/cdh5/parcels/5.4.7/manifest.json</div><div class="line"></div><div class="line">sha1需修改成sha</div><div class="line">$ mv CDH-5.4.7-1.cdh5.4.7.p0.3-precise.parcel.sha1 CDH-5.4.7-1.cdh5.4.7.p0.3-precise.parcel.sha</div></pre></td></tr></table></figure><ul><li>下载安装<a href="https://archive.cloudera.com/cm5/installer/" target="_blank" rel="external">Cloudera Manager</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget https://archive.cloudera.com/cm5/installer/5.4.7/cloudera-manager-installer.bin</div></pre></td></tr></table></figure><ul><li>安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ chmod +x cloudera-manager-installer.bin</div><div class="line">$ ./cloudera-manager-installer.bin --skip_repo_package=1</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;离线安装CDH5.4.7&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.cloudera.com/documentation/enterprise/latest/topics/cm_ig_install_path_a.html#cmig_topic_6_5_unique_2&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除已有&lt;a href=&quot;http://www.cloudera.com/documentation/enterprise/5-5-x/topics/cm_ig_uninstall_cm.html&quot;&gt;cloudera manager&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ /usr/share/cmf/uninstall-cloudera-manager.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ apt-get purge &lt;span class=&quot;string&quot;&gt;&#39;cloudera-manager-*&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ umount cm_processes&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ rm -Rf /usr/share/cmf /var/lib/cloudera* /var/cache/yum/cloudera* /var/&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;/cloudera* /var/run/cloudera*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ rm -Rf /var/lib/flume-ng /var/lib/hadoop* /var/lib/hue /var/lib/navigator /var/lib/oozie /var/lib/solr /var/lib/sqoop* /var/lib/zookeeper&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://saboloh.com/categories/BigData/"/>
    
    
      <category term="hadoop" scheme="http://saboloh.com/tags/hadoop/"/>
    
      <category term="chd" scheme="http://saboloh.com/tags/chd/"/>
    
      <category term="cloudera" scheme="http://saboloh.com/tags/cloudera/"/>
    
  </entry>
  
  <entry>
    <title>使用supervisor守护进程</title>
    <link href="http://saboloh.com/2016/04/19/use-supervisor/"/>
    <id>http://saboloh.com/2016/04/19/use-supervisor/</id>
    <published>2016-04-19T02:04:27.000Z</published>
    <updated>2016-09-05T14:47:56.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Install </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install supervisor</div></pre></td></tr></table></figure><ul><li>配置 </li></ul><ol><li>使用默认路径下配置(/etc/supervisord.conf)</li><li>指定目录<code>supervisord.conf</code>配置 </li></ol><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">; supervisor config file</div><div class="line"></div><div class="line">[unix_http_server]</div><div class="line">file=/home/hadoop/supervisor/supervisor.sock   ; (the path to the socket file)</div><div class="line">chmod=0700                       ; sockef file mode (default 0700)</div><div class="line"></div><div class="line">[supervisord]</div><div class="line">logfile=/home/hadoop/supervisor/supervisord.log ; (main <span class="built_in">log</span> file;default <span class="variable">$CWD</span>/supervisord.log)</div><div class="line">pidfile=/home/hadoop/supervisor/supervisord.pid ; (supervisord pidfile;default supervisord.pid)</div><div class="line">childlogdir=/home/hadoop/supervisor             ; (<span class="string">'AUTO'</span> child <span class="built_in">log</span> dir, default <span class="variable">$TEMP</span>)</div><div class="line"></div><div class="line">; the below section must remain <span class="keyword">in</span> the config file <span class="keyword">for</span> RPC</div><div class="line">; (supervisorctl/web interface) to work, additional interfaces may be</div><div class="line">; added by defining them <span class="keyword">in</span> separate rpcinterface: sections</div><div class="line">[rpcinterface:supervisor]</div><div class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</div><div class="line"></div><div class="line">[supervisorctl]</div><div class="line">serverurl=unix:///home/hadoop/supervisor/supervisor.sock ; use a unix:// URL  <span class="keyword">for</span> a unix socket</div><div class="line"></div><div class="line">; The [include] section can just contain the <span class="string">"files"</span> setting.  This</div><div class="line">; setting can list multiple files (separated by whitespace or</div><div class="line">; newlines).  It can also contain wildcards.  The filenames are</div><div class="line">; interpreted as relative to this file.  Included files *cannot*</div><div class="line">; include files themselves.</div><div class="line"></div><div class="line">[include]</div><div class="line">files = /home/hadoop/supervisor/conf.d/*.conf</div></pre></td></tr></table></figure><p>启动：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /home/hadoop/supervisor/</div><div class="line">$ supervisord -c supervisord.conf</div></pre></td></tr></table></figure></p><ul><li>守护进程<code>/home/hadoop/supervisor/conf.d/*.conf</code> 下创建<code>app.conf</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[program:app]</div><div class="line">command=/home/hadoop/spark-1.5.2-bin-hadoop2.6/bin/spark-submit</div><div class="line">  --executor-cores 1</div><div class="line">  --num-executors 2</div><div class="line">  --queue root.spark</div><div class="line">  --master yarn-cluster</div><div class="line">  --files /home/hadoop/spark-mining/log4j-spark.properties</div><div class="line">  --class com.app.dw.MainClassCount</div><div class="line">  --conf &quot;spark.driver.extraJavaOptions=-Xms512M -Xmn256M -XX:+UseConcMarkSweepGC -Dlog4j.configuration=log4j-spark.properties -Ddm.logging.level=DEBUG&quot;</div><div class="line">  --conf &quot;spark.executor.extraJavaOptions=-XX:+UseConcMarkSweepGC -Dlog4j.configuration=log4j-spark.properties -Ddm.logging.level=DEBUG&quot;</div><div class="line">  /home/hadoop/realtime/app.jar reset</div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line">environment=JAVA_HOME=&quot;/usr/local/java/jdk1.8.0_60&quot;</div><div class="line">stdout_logfile=/home/hadoop/realtime/logs/app.log</div><div class="line">redirect_stderr=true</div><div class="line">user=hadoop</div></pre></td></tr></table></figure><ul><li>命令行操作</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ supervisorctl update|status|stop|start|restart   // 更新配置|查看状态|停止指定进程|启动进程|重启进程</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Install &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-get install supervisor&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;配置 &lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;使用默认路径下配置(/etc/supervisord.conf)&lt;/li&gt;
&lt;li&gt;指定目录&lt;code&gt;supervisord.conf&lt;/code&gt;配置 &lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://saboloh.com/categories/Linux/"/>
    
    
      <category term="supervisor" scheme="http://saboloh.com/tags/supervisor/"/>
    
  </entry>
  
  <entry>
    <title>如何搭建VPS</title>
    <link href="http://saboloh.com/2016/04/18/how-to-setup-vps/"/>
    <id>http://saboloh.com/2016/04/18/how-to-setup-vps/</id>
    <published>2016-04-18T00:07:33.000Z</published>
    <updated>2016-09-05T14:47:56.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>购买<a href="https://www.budgetvm.com/" target="_blank" rel="external">vps</a>  </li></ul><p>本人在朋友推荐下购买了<code>budgetvm</code> 系统安装选择的是<code>ubuntu14.04</code></p><p>购买完成之后初始化大概10分钟，之后便可自己通过ssh+pwd的方式登录vps（先确保能ping通，如果存在网络等任何问题，直接邮件development，解决速度还是可以的。密码在网上可以看到）</p><a id="more"></a><p><img src="/img/budgetvm.png" alt=""></p><ul><li>vps config</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ dpkg-reconfigure tzdata //时区</div><div class="line">$ apt-get install locales // 字符编码</div></pre></td></tr></table></figure><ul><li>prepare</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ apt-get install vim</div><div class="line"></div><div class="line">$ grep -v ^PasswordAuthentication /etc/ssh/sshd_config | grep -v Port  &gt; /tmp/sshd_config</div><div class="line">$ <span class="built_in">echo</span> <span class="string">"Port 50070"</span> &gt;&gt; /tmp/sshd_config</div><div class="line">$ <span class="built_in">echo</span> <span class="string">"PasswordAuthentication no"</span> &gt;&gt; /tmp/sshd_config</div><div class="line">$ service ssh restart</div><div class="line"></div><div class="line">$ apt-get install python-pip</div><div class="line">$ pip install shadowsocks</div><div class="line">$ apt-get install supervisor</div></pre></td></tr></table></figure><ul><li>config server</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/supervisor/conf.d/ss.conf</div><div class="line"></div><div class="line">[program:ss]</div><div class="line"><span class="built_in">command</span>=/usr/<span class="built_in">local</span>/bin/ssserver -c /root/ss.conf -vv --user nobody</div><div class="line">stdout_logfile=/var/<span class="built_in">log</span>/ss.log</div><div class="line">stderr_logfile=/var/<span class="built_in">log</span>/ss.err</div><div class="line">stdout_logfile_maxbytes=50MB</div><div class="line">stderr_logfile_maxbytes=50MB</div><div class="line">autorestart=<span class="literal">true</span></div><div class="line">autostart=<span class="literal">true</span></div><div class="line"></div><div class="line">$ vim /root/ss.conf</div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="string">"server_port"</span>:8080,</div><div class="line">    <span class="string">"password"</span>:<span class="string">"&#123;<span class="variable">$yourpassword</span>&#125;"</span>,</div><div class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>config local</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install shadowscoks</div><div class="line">$ sslocal  -c ss.conf -b 0.0.0.0 -d start --pid-file /tmp/ss.pid --log-file /tmp/ss.log</div><div class="line"></div><div class="line">$ cat ss.conf</div><div class="line">&#123;</div><div class="line">    &quot;server&quot;:&quot;$&#123;serverip&#125;&quot;,</div><div class="line">    &quot;server_port&quot;:8080,</div><div class="line">    &quot;local_port&quot;:1080,</div><div class="line">    &quot;password&quot;:&quot;$&#123;yourpassword&#125;&quot;,</div><div class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>备注： budgetvm主机服务在洛杉矶，所以国内登录过去会有点慢-_-|| 岛国的vps似乎很快，推荐一款<a href="https://www.vultr.com/" target="_blank" rel="external">Vultr</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;购买&lt;a href=&quot;https://www.budgetvm.com/&quot;&gt;vps&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本人在朋友推荐下购买了&lt;code&gt;budgetvm&lt;/code&gt; 系统安装选择的是&lt;code&gt;ubuntu14.04&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;购买完成之后初始化大概10分钟，之后便可自己通过ssh+pwd的方式登录vps（先确保能ping通，如果存在网络等任何问题，直接邮件development，解决速度还是可以的。密码在网上可以看到）&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://saboloh.com/categories/Linux/"/>
    
    
      <category term="vps" scheme="http://saboloh.com/tags/vps/"/>
    
  </entry>
  
  <entry>
    <title>Camus 落地kafka Topic</title>
    <link href="http://saboloh.com/2016/04/17/camus-kafka-to-hdfs/"/>
    <id>http://saboloh.com/2016/04/17/camus-kafka-to-hdfs/</id>
    <published>2016-04-17T03:21:58.000Z</published>
    <updated>2016-09-05T14:58:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>应用场景，fluentd实时采集日志写入kafka 解析后数据写入另一topic. 为了实时获取分析数据，将topic落地hdfs然后load到hive表供分析使用</p><ul><li>clone <a href="https://github.com/linkedin/camus" target="_blank" rel="external">代码</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/linkedin/camus.git</div><div class="line">$ cd camus</div></pre></td></tr></table></figure><a id="more"></a><ul><li>新增 StringMessageDecoder 类(接收数据不规范，自定义接收处理逻辑)  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.linkedin.camus.etl.kafka.coders;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.linkedin.camus.coders.CamusWrapper;</div><div class="line"><span class="keyword">import</span> com.linkedin.camus.coders.Message;</div><div class="line"><span class="keyword">import</span> com.linkedin.camus.coders.MessageDecoder;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</div><div class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * MessageDecoder class that will convert the payload into a String object,</div><div class="line"> * System.currentTimeMillis() will be used to set CamusWrapper's timestamp</div><div class="line"> * property</div><div class="line"> * </div><div class="line"> * This MessageDecoder returns a CamusWrapper that works with Strings payloads,</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringMessageDecoder</span> <span class="keyword">extends</span> <span class="title">MessageDecoder</span>&lt;<span class="title">Message</span>, <span class="title">String</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = Logger.getLogger(StringMessageDecoder.class);</div><div class="line">     </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Properties props, String topicName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.props = props;</div><div class="line">        <span class="keyword">this</span>.topicName = topicName;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> CamusWrapper&lt;String&gt; <span class="title">decode</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">long</span> timestamp = <span class="number">0</span>;</div><div class="line">        String payloadString;</div><div class="line">         </div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            payloadString = <span class="keyword">new</span> String(message.getPayload(), <span class="string">"UTF-8"</span>);</div><div class="line">          &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">            log.error(<span class="string">"Unable to load UTF-8 encoding, falling back to system default"</span>, e);</div><div class="line">            payloadString = <span class="keyword">new</span> String(message.getPayload());</div><div class="line">          &#125;</div><div class="line">         </div><div class="line">        timestamp = System.currentTimeMillis();</div><div class="line">         </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CamusWrapper&lt;String&gt;(payloadString, timestamp);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>修改 camus下pom.xml hadoop版本  </p></li><li><p>配置camus.properties</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">camus.job.name=soj_dtl_transfer</div><div class="line"></div><div class="line">fs.default.name=hdfs://nameservice1</div><div class="line">etl.destination.path=/tmp/saboloh/topics</div><div class="line">etl.execution.base.path=/tmp/saboloh/exec</div><div class="line">etl.execution.history.path=/tmp/saboloh/camus/exec/history</div><div class="line"></div><div class="line">camus.message.decoder.class=com.linkedin.camus.etl.kafka.coders.JsonStringMessageDecoder</div><div class="line">etl.record.writer.provider.class=com.linkedin.camus.etl.kafka.common.StringRecordWriterProvider</div><div class="line"></div><div class="line">camus.message.timestamp.field=log_time</div><div class="line">camus.message.timestamp.format=yyyy-MM-dd HH:mm:ss.SSS</div><div class="line">etl.partitioner.class=com.linkedin.camus.etl.kafka.partitioner.HourlyPartitioner</div><div class="line"></div><div class="line">kafka.max.historical.days=1</div><div class="line">kafka.blacklist.topics=</div><div class="line">kafka.whitelist.topics=soj_topic_rt</div><div class="line">kafka.brokers=localhost:9092,localhost:9093</div><div class="line">kafka.client.name=soj_dtl_transfer_client</div><div class="line"></div><div class="line"></div><div class="line">etl.hourly=hourly</div><div class="line"></div><div class="line">log4j.configuration=true</div><div class="line">mapred.output.compress=true</div><div class="line">etl.output.codec=deflate</div><div class="line">etl.deflate.level=6</div><div class="line"></div><div class="line">etl.default.timezone=Asia/Shanghai</div><div class="line">etl.output.file.time.partition.mins=60</div><div class="line">etl.keep.count.files=false</div></pre></td></tr></table></figure><ul><li>编译打包 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mvn clean [compile] package [-DskipTests]</div></pre></td></tr></table></figure><ul><li>运行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cd camus-example</div><div class="line">$ cp target/camus-example-0.1.0-SNAPSHOT-shaded.jar .</div><div class="line">$ hadoop jar camus-example-0.1.0-SNAPSHOT-shaded.jar com.linkedin.camus.etl.kafka.CamusJob -P ../camus.properties</div></pre></td></tr></table></figure><ul><li>错误异常处理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Exception in thread &quot;main&quot; java.io.IOException: Mkdirs failed to create /var/folders/hb/s74xd1353n92ht1h8pr8mngh0000gn/T/hadoop-unjar7038503362115517488/META-INF/license</div><div class="line">    at org.apache.hadoop.util.RunJar.ensureDirectory(RunJar.java:128)</div><div class="line">    at org.apache.hadoop.util.RunJar.unJar(RunJar.java:104)</div><div class="line">    at org.apache.hadoop.util.RunJar.unJar(RunJar.java:81)</div><div class="line">    at org.apache.hadoop.util.RunJar.run(RunJar.java:209)</div><div class="line">    at org.apache.hadoop.util.RunJar.main(RunJar.java:136)</div><div class="line">     </div><div class="line">上述错误信息由于Mac 上的特殊原因导致的貌似。</div><div class="line">http://stackoverflow.com/questions/10522835/hadoop-java-io-ioexception-mkdirs-failed-to-create-some-path</div><div class="line">修改jar</div><div class="line">$ zip -d camus-example-0.1.0-SNAPSHOT-shaded.jar META-INF/LICENSE  </div><div class="line">$ zip -d camus-example-0.1.0-SNAPSHOT-shaded.jar LICENSE</div><div class="line">上述命令删除jar包种指定信息</div><div class="line">$ jar -tvf camus-example-0.1.0-SNAPSHOT-shaded.jar |grep META-INF/LICENSE</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;应用场景，fluentd实时采集日志写入kafka 解析后数据写入另一topic. 为了实时获取分析数据，将topic落地hdfs然后load到hive表供分析使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clone &lt;a href=&quot;https://github.com/linkedin/camus&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git clone https://github.com/linkedin/camus.git&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ cd camus&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://saboloh.com/categories/BigData/"/>
    
    
      <category term="kafka" scheme="http://saboloh.com/tags/kafka/"/>
    
      <category term="日志" scheme="http://saboloh.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Fluentd数据采集写入Kafka</title>
    <link href="http://saboloh.com/2016/04/16/fluentd-to-kafka/"/>
    <id>http://saboloh.com/2016/04/16/fluentd-to-kafka/</id>
    <published>2016-04-16T10:48:56.000Z</published>
    <updated>2016-09-05T14:59:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="日志实时采集"><a href="#日志实时采集" class="headerlink" title="日志实时采集"></a>日志实时采集</h3><ul><li>安装<a href="http://www.fluentd.org/" target="_blank" rel="external">fluent</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install td-agent</div></pre></td></tr></table></figure><a id="more"></a><ul><li>修改ruby 的gem源 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">安装好Ruby</div><div class="line">$ gem <span class="built_in">source</span>  <span class="comment"># 查看源</span></div><div class="line"></div><div class="line">删除默认源：</div><div class="line">$ gem <span class="built_in">source</span> -r &lt;url&gt;</div><div class="line">添加新指向：</div><div class="line">$ gem <span class="built_in">source</span> <span class="_">-a</span> https://ruby.taobao.org/</div></pre></td></tr></table></figure><ul><li><p>安装<a href="https://github.com/htgc/fluent-plugin-kafka/" target="_blank" rel="external">fluent-plugin-kafka</a> (github上有详细介绍) </p></li><li><p>fluentd –setup /path/xxx  </p></li><li><p>配置/path/xxx下的fluent.conf</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  @<span class="built_in">type</span> forward</div><div class="line">  @id forward_input</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"> </div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  @<span class="built_in">type</span> http</div><div class="line">  @id http_input</div><div class="line">  port 8888</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"> </div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  @<span class="built_in">type</span>    tail  <span class="comment">#### tail方式采集日志</span></div><div class="line">  <span class="comment">#format   none</span></div><div class="line">  format   /^(?&lt;all&gt;.*)$/</div><div class="line">  path     /tmp/app_log.txt</div><div class="line">  pos_file /data/logs/td-agent/httpd-access.log.pos</div><div class="line">  tag      app_log.tag</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"> </div><div class="line">&lt;match app_log.**&gt;</div><div class="line">  @<span class="built_in">type</span>               kafka</div><div class="line">  <span class="comment">#brokers            localhost:9002,localhost:9003</span></div><div class="line">  zookeeper           localhost:2181</div><div class="line">  default_topic       app_log_raw  </div><div class="line">  <span class="comment">#刷新间隔</span></div><div class="line">  flush_interval      30</div><div class="line">  buffer_type         file</div><div class="line">  ack_timeout_ms      2000</div><div class="line">  output_data_type    attr:all</div><div class="line">  compression_codec   none</div><div class="line">&lt;/match&gt;</div><div class="line"> </div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  @<span class="built_in">type</span> monitor_agent</div><div class="line">  @id monitor_agent_input</div><div class="line">  port 24220</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"> </div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  @<span class="built_in">type</span> debug_agent</div><div class="line">  @id debug_agent_input</div><div class="line">  <span class="built_in">bind</span> 127.0.0.1</div><div class="line">  port 24230</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"> </div><div class="line">&lt;match debug.**&gt;</div><div class="line">  @<span class="built_in">type</span> stdout</div><div class="line">  @id stdout_output</div><div class="line">&lt;/match&gt;</div><div class="line"> </div><div class="line">&lt;match system.**&gt;</div><div class="line">  @<span class="built_in">type</span> forward</div><div class="line">  @id forward_output</div><div class="line"> </div><div class="line">  &lt;server&gt;</div><div class="line">    host 192.168.0.11</div><div class="line">  &lt;/server&gt;</div><div class="line">  &lt;secondary&gt;</div><div class="line">    &lt;server&gt;</div><div class="line">      host 192.168.0.12</div><div class="line">    &lt;/server&gt;</div><div class="line">  &lt;/secondary&gt;</div><div class="line">&lt;/match&gt;</div></pre></td></tr></table></figure><ul><li><p>确保<a href="http://kafka.apache.org/documentation.html#quickstart" target="_blank" rel="external">kafka</a>已经启动完成</p></li><li><p>启动fluentd</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ fluentd -c fluent.conf</div></pre></td></tr></table></figure><ul><li>查看kafka中数据是否进入 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic app_log_raw</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;日志实时采集&quot;&gt;&lt;a href=&quot;#日志实时采集&quot; class=&quot;headerlink&quot; title=&quot;日志实时采集&quot;&gt;&lt;/a&gt;日志实时采集&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;安装&lt;a href=&quot;http://www.fluentd.org/&quot;&gt;fluent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-get install td-agent&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://saboloh.com/categories/BigData/"/>
    
    
      <category term="kafka" scheme="http://saboloh.com/tags/kafka/"/>
    
      <category term="日志" scheme="http://saboloh.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
</feed>
