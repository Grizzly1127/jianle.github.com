<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Loh&#39;s Blog</title>
  
  <subtitle>Loh&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://saboloh.com/"/>
  <updated>2018-07-10T08:48:21.493Z</updated>
  <id>http://saboloh.com/</id>
  
  <author>
    <name>saboloh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文件切片上传</title>
    <link href="http://saboloh.com/2018/07/10/file-slice-upload-with-scalatra/"/>
    <id>http://saboloh.com/2018/07/10/file-slice-upload-with-scalatra/</id>
    <published>2018-07-10T03:03:38.000Z</published>
    <updated>2018-07-10T08:48:21.493Z</updated>
    
    <content type="html"><![CDATA[<p>一般而言，企业服务里面的 nginx 全局设置的 timeout 时长都不会超过 15s，假设要上传一个 100M 的文件到服务端，平均上传速度 1M/s，那也得 100s 远远超过了 15s 的时长。<br>所以必须采用切片上传/断点续传的方式来实现前端小文件上传，后端合并成大文件。</p><h3 id="前端切片"><a href="#前端切片" class="headerlink" title="前端切片"></a>前端切片</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//slice upload</span><span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> fileSize <span class="token operator">=</span> file<span class="token punctuation">.</span>size<span class="token punctuation">;</span><span class="token keyword">var</span> chunkSize <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// buffer bytes</span><span class="token keyword">var</span> offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> filename <span class="token operator">=</span> file<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;</span> fileSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> size <span class="token operator">=</span> chunkSize <span class="token operator">+</span> offset<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">></span> fileSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    size <span class="token operator">=</span> fileSize<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//切片</span>  <span class="token keyword">var</span> loaded <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> size<span class="token punctuation">,</span> file<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>  offset <span class="token operator">=</span> size<span class="token punctuation">;</span>  <span class="token keyword">var</span> xmlRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  xmlRequest<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>contextPath <span class="token operator">+</span> <span class="token string">'/upload/api/file-slice'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'filename'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>  data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> loaded<span class="token punctuation">)</span><span class="token punctuation">;</span>  xmlRequest<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>切片上传中 <code>file.slice(offset, size, file.type)</code> 的 file.type 是保留切片之后的文件类型，可了解<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noopener">MIME 类型</a></p><h3 id="后端接收"><a href="#后端接收" class="headerlink" title="后端接收"></a>后端接收</h3><p>后端接收因每个服务框架不同而采用不同的处理，下面例子是 scalatra 框架的代码片段:</p><pre class="line-numbers language-scala"><code class="language-scala">post<span class="token punctuation">(</span><span class="token string">"/api/file-slice"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  contentType <span class="token operator">=</span> formats<span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> fileName <span class="token operator">=</span> params<span class="token punctuation">.</span>getOrElse<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> out <span class="token operator">=</span> <span class="token keyword">new</span> FileOutputStream<span class="token punctuation">(</span>outputFileTmp<span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  fileParams<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> <span class="token keyword">match</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> Some<span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token keyword">=></span> IOUtils<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>file<span class="token punctuation">.</span>getInputStream<span class="token punctuation">,</span> out<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  out<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  Map<span class="token punctuation">(</span>    <span class="token string">"status"</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"ok"</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我这边没有用 md5 的验证，而直接使用文件名来续写，这个按照每个人的不同需求做不同的处理，标准做法都应该给 md5 的验证，仅供参考。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一般而言，企业服务里面的 nginx 全局设置的 timeout 时长都不会超过 15s，假设要上传一个 100M 的文件到服务端，平均上传速度 1M/s，那也得 100s 远远超过了 15s 的时长。&lt;br&gt;所以必须采用切片上传/断点续传的方式来实现前端小文件上传，后端合
      
    
    </summary>
    
      <category term="Java" scheme="http://saboloh.com/categories/Java/"/>
    
    
      <category term="js" scheme="http://saboloh.com/tags/js/"/>
    
      <category term="scalatra" scheme="http://saboloh.com/tags/scalatra/"/>
    
  </entry>
  
  <entry>
    <title>Java 排查内存溢出错误</title>
    <link href="http://saboloh.com/2018/07/05/java-detecting-out-of-memory-errors/"/>
    <id>http://saboloh.com/2018/07/05/java-detecting-out-of-memory-errors/</id>
    <published>2018-07-05T03:35:47.000Z</published>
    <updated>2018-07-05T06:16:48.121Z</updated>
    
    <content type="html"><![CDATA[<p>Java OOM 毫无疑问是开发人员常见并且及其痛恨的问题，但是任何服务的开发都没法避免 OOM。 因此，OOM 的排查及定位是每个 Java 工程师都必备的技能。</p><h4 id="所遇到的问题"><a href="#所遇到的问题" class="headerlink" title="所遇到的问题"></a>所遇到的问题</h4><p>在使用 scala 开发的一个 web 服务，在用户使用中，经常出现这个错误： <code>java.lang.OutOfMemoryError: Java heap space</code> 于是乎就想办法定位到底是什么原因导致。</p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>服务使用 jetty 发布的，先来看一下我这个服务的启动参数：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">/</span>opt<span class="token operator">/</span>soft<span class="token operator">/</span>jdk<span class="token operator">/</span>jdk1<span class="token number">.7</span><span class="token punctuation">.</span>0_40<span class="token operator">/</span>bin<span class="token operator">/</span>java \  <span class="token operator">-</span>server <span class="token operator">-</span>Xmx4G <span class="token operator">-</span>XX<span class="token operator">:</span>MaxPermSize<span class="token operator">=</span>1024M <span class="token operator">-</span>XX<span class="token operator">:</span>PermSize<span class="token operator">=</span>256M \  <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UseParNewGC <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UseConcMarkSweepGC <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">-</span>CMSConcurrentMTEnabled <span class="token operator">-</span>XX<span class="token operator">:</span>CMSInitiatingOccupancyFraction<span class="token operator">=</span><span class="token number">65</span> <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>CMSParallelRemarkEnabled \  <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>HeapDumpOnOutOfMemoryError \  <span class="token operator">-</span>XX<span class="token operator">:</span>HeapDumpPath<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>soft<span class="token operator">/</span>heapdump<span class="token operator">/</span> \  <span class="token operator">-</span>Dscala<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>context<span class="token punctuation">.</span>numThreads<span class="token operator">=</span><span class="token number">500</span> \  <span class="token operator">-</span>Dscala<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>context<span class="token punctuation">.</span>maxThreads<span class="token operator">=</span><span class="token number">500</span> \  <span class="token operator">-</span>Dfile<span class="token punctuation">.</span>encoding<span class="token operator">=</span>UTF<span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span>jar start<span class="token punctuation">.</span>jar <span class="token operator">>></span> log <span class="token number">2</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h4><p>通过增加了参数 <code>-XX:+HeapDumpOnOutOfMemoryError</code> 和 <code>-XX:HeapDumpPath</code> 当在 OOM 的时候，服务会生成一个 <code>java_pid$pid.hprof</code> 二进制文件。   </p><p>下面就是使用工具分析这个 <code>.hprof</code> 文件来定位问题了。使用 <a href="https://www.eclipse.org/mat/" target="_blank" rel="noopener">Memory Analyzer (MAT)</a> 来分析该文件，效果如下：<br><img src="/img/overview_mat.png" alt=""></p><p>效果很吓人，什么鬼，什么东西，吃了 3.8G 的内存，我#%$#@#@#&amp;^&amp;^&amp;#$….<br>打开 Leak Suspects» Leaks» Problem Suspect 1 看到如下详情：<br><img src="/img/mat_find_problem.png" alt=""></p><p>一开始可能没那么快找到问题，但是这个图已经很明显说明了问题，是 <code>ArrayList</code> 的内容太大，沾满了内存。但是你可能还不清楚具体那块代码导致，这个时候你可以点击那个 <code>ArrayList</code> 在左侧栏看 <code>Attribute</code>。<br>然后一直鼠标右键 <code>into</code> 进去看里面的详情，最终是可以看内容的。   </p><h4 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h4><p>问题排查到最后，看到的是 <code>ArrayList</code> 里面存的全是 <code>ResponseBodyPart</code>， 然后就想到了项目使用到 <a href="https://dispatchhttp.org/Dispatch.html" target="_blank" rel="noopener">Dispatch</a> 请求下载结果文件，<br>于是乎去找到问题代码，错误代码如下：   </p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> outputReq <span class="token operator">=</span> dispatch<span class="token punctuation">.</span>url<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token string">"task"</span> <span class="token operator">/</span> <span class="token string">"output"</span> <span class="token operator">/</span> id<span class="token keyword">val</span> outputFuture <span class="token operator">=</span> Http<span class="token punctuation">(</span>outputReq <span class="token operator">></span> <span class="token punctuation">{</span> res <span class="token keyword">=></span>  <span class="token keyword">val</span> out <span class="token operator">=</span> <span class="token keyword">new</span> FileOutputStream<span class="token punctuation">(</span>outputFile<span class="token punctuation">(</span>taskId<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  IOUtils<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>res<span class="token punctuation">.</span>getResponseBodyAsStream<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span>  out<span class="token punctuation">.</span>close<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看不出问题，感觉一切正常。反源码会发现，<code>res.getResponseBodyAsStream()</code> 之前，已经将所有内容都存入一个 <code>ArrayList</code> 当中了。哎，没用对啊。   </p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>问题已经定位到，于是取了解了一下这个项目，该如何使用 stream 的方式来读取并写入文件流。然后发现，人家有一个 <a href="https://github.com/dispatch/reboot/blob/master/core/src/main/scala/stream/strings.scala" target="_blank" rel="noopener">read line by line</a> 的实现。但是切割上其实是有问题的，因为拿到一批 bytes 之后，直接转成了 string 并用分隔符分割，<br>奈何内容里面有中文，出现乱码了。</p><p>最终，参考项目本身的 <code>as.stream.Lines</code> 写了一个 <code>as.stream.Bytes</code> 来通过 bytes 边读边写，如下：  </p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> BufferedOutputStream<span class="token punctuation">(</span><span class="token keyword">new</span> FileOutputStream<span class="token punctuation">(</span><span class="token string">"/tmp/file.txt"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">val</span> outputFuture <span class="token operator">=</span> Http<span class="token punctuation">(</span>outputReq <span class="token operator">></span> as<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Bytes<span class="token punctuation">(</span>bytes <span class="token keyword">=></span> <span class="token punctuation">{</span>  bos<span class="token punctuation">.</span>write<span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>主要描述了分析问题的思路和方向，问题都大同小异，OOM 总会有原因的，有原因肯定可以找到并解决。MAT 这个分析工具很实用，内容很详细。以前遇到 OOM 问题都是重启服务，治标不治本，还是要多分析问题并解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java OOM 毫无疑问是开发人员常见并且及其痛恨的问题，但是任何服务的开发都没法避免 OOM。 因此，OOM 的排查及定位是每个 Java 工程师都必备的技能。&lt;/p&gt;
&lt;h4 id=&quot;所遇到的问题&quot;&gt;&lt;a href=&quot;#所遇到的问题&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="Java" scheme="http://saboloh.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://saboloh.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Gulp 构建前端</title>
    <link href="http://saboloh.com/2018/03/30/gulp-to-compress-and-add-version/"/>
    <id>http://saboloh.com/2018/03/30/gulp-to-compress-and-add-version/</id>
    <published>2018-03-30T06:41:54.000Z</published>
    <updated>2018-07-05T05:24:03.012Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://gulpjs.com/" target="_blank" rel="noopener">gulp</a> is a toolkit that helps you automate painful or time-consuming tasks in your development workflow.</p><p>本文以 <a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/" target="_blank" rel="noopener">spring-boot</a> 项目为例，首先来看一下项目的目录结构  </p><pre class="line-numbers language-bash"><code class="language-bash">/project<span class="token operator">|</span>-- src/main/java/<span class="token punctuation">{</span>.java<span class="token punctuation">}</span><span class="token operator">|</span>-- src/main/resources/<span class="token operator">|</span>           <span class="token operator">|</span>-------- application.properties <span class="token punctuation">{</span>配置文件<span class="token punctuation">}</span><span class="token operator">|</span>           <span class="token operator">|</span>-------- src/ <span class="token punctuation">{</span>静态文件 js/css 原始文件<span class="token punctuation">}</span><span class="token operator">|</span>                     <span class="token operator">|</span>-- components/<span class="token operator">|</span>                     <span class="token operator">|</span>-- css/<span class="token operator">|</span>                     <span class="token operator">|</span>-- js/<span class="token operator">|</span>                     <span class="token operator">|</span>-- templates/<span class="token operator">|</span>           <span class="token operator">|</span>-------- gulpfile.js<span class="token operator">|</span>           <span class="token operator">|</span>-------- bower.json <span class="token punctuation">{</span>前端依赖管理<span class="token punctuation">}</span><span class="token operator">|</span>           <span class="token operator">|</span>-------- static <span class="token punctuation">{</span>静态文件 js/css 编译后的文件<span class="token punctuation">}</span><span class="token operator">|</span>           <span class="token operator">|</span>-------- templates <span class="token punctuation">{</span>html 编译后文件<span class="token punctuation">}</span><span class="token operator">|</span>-- pom.xml<span class="token operator">|</span>-- README.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>spring-boot</code> 项目所有前端文件都放置在 <code>resource</code> 目录， 当我们操作使用 gulp 的过程中，都先 cd 到 resources 作为工作环境。  </p><p>首先，使用 npm 初始化 package.json 文件（<code>npm init</code>），并添加以下依赖并安装</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"gulp watch"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"gulp --production"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"del"</span><span class="token operator">:</span> <span class="token string">"^3.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"gulp"</span><span class="token operator">:</span> <span class="token string">"^3.9.1"</span><span class="token punctuation">,</span>    <span class="token property">"gulp-babel"</span><span class="token operator">:</span> <span class="token string">"^7.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"gulp-clean-css"</span><span class="token operator">:</span> <span class="token string">"^3.9.0"</span><span class="token punctuation">,</span>    <span class="token property">"gulp-imagemin"</span><span class="token operator">:</span> <span class="token string">"^3.4.0"</span><span class="token punctuation">,</span>    <span class="token property">"gulp-jshint"</span><span class="token operator">:</span> <span class="token string">"^2.0.4"</span><span class="token punctuation">,</span>    <span class="token property">"gulp-notify"</span><span class="token operator">:</span> <span class="token string">"^3.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"gulp-rename"</span><span class="token operator">:</span> <span class="token string">"^1.2.2"</span><span class="token punctuation">,</span>    <span class="token property">"gulp-rev"</span><span class="token operator">:</span> <span class="token string">"^8.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"gulp-rev-replace"</span><span class="token operator">:</span> <span class="token string">"^0.4.3"</span><span class="token punctuation">,</span>    <span class="token property">"gulp-uglify"</span><span class="token operator">:</span> <span class="token string">"^3.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"gulp-util"</span><span class="token operator">:</span> <span class="token string">"^3.0.8"</span><span class="token punctuation">,</span>    <span class="token property">"jshint"</span><span class="token operator">:</span> <span class="token string">"^2.9.5"</span><span class="token punctuation">,</span>    <span class="token property">"run-sequence"</span><span class="token operator">:</span> <span class="token string">"^2.2.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"babel-core"</span><span class="token operator">:</span> <span class="token string">"^6.26.0"</span><span class="token punctuation">,</span>    <span class="token property">"babel-preset-es2015"</span><span class="token operator">:</span> <span class="token string">"^6.24.1"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>gulp 运行默认依赖 <code>gulpfile.js</code> 文件，下面我们直接拿该文件来描述  </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> uglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-uglify'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> del <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'del'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> rename <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-rename'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> jshint <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-jshint'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> rev <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-rev'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> revreplace <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-rev-replace'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> runSequence <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'run-sequence'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> cleanCSS <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-clean-css'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> imagemin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-imagemin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> notify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-notify'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-util'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> babel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-babel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>    production<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token operator">!</span>util<span class="token punctuation">.</span>env<span class="token punctuation">.</span>production<span class="token punctuation">}</span><span class="token punctuation">;</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'clean'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">runSequence</span><span class="token punctuation">(</span><span class="token string">'commons'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'scripts'</span><span class="token punctuation">,</span> <span class="token string">'styles'</span><span class="token punctuation">,</span> <span class="token string">'images'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'replace'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'commons'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    gulp<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">'copy_common'</span><span class="token punctuation">,</span> <span class="token string">'copy_common_wx'</span><span class="token punctuation">,</span> <span class="token string">'copy_common_ico'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'copy_common'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/components/**/*'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'static/components/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'copy_common_wx'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/*.txt'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'static/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'copy_common_ico'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/*.ico'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'static/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'scripts'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/js/**/*.js'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 这个目录对应你未压缩之前的目录</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'es2015'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>jshint<span class="token punctuation">.</span><span class="token function">reporter</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token punctuation">{</span>suffix<span class="token punctuation">:</span> <span class="token string">'.min'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>production <span class="token operator">?</span> <span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>mangle<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> util<span class="token punctuation">.</span><span class="token function">noop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">rev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'static/js/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 这个是你压缩完代码输出目录</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>rev<span class="token punctuation">.</span><span class="token function">manifest</span><span class="token punctuation">(</span><span class="token string">'rev-manifest-js.json'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'JS 处理完毕'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'styles'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/css/**/*.css'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> style<span class="token punctuation">:</span> <span class="token string">'expanded'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 这个目录对应你未压缩之前的目录</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>jshint<span class="token punctuation">.</span><span class="token function">reporter</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token punctuation">{</span>suffix<span class="token punctuation">:</span> <span class="token string">'.min'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">cleanCSS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>compatibility<span class="token punctuation">:</span> <span class="token string">'ie8'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">rev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'static/css/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 这个是你压缩完代码输出目录</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>rev<span class="token punctuation">.</span><span class="token function">manifest</span><span class="token punctuation">(</span><span class="token string">'rev-manifest-css.json'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'CSS 处理完毕'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'images'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/img/**/*'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">imagemin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> optimizationLevel<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> progressive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> interlaced<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'static/img/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">rev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'static/img/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>rev<span class="token punctuation">.</span><span class="token function">manifest</span><span class="token punctuation">(</span><span class="token string">'rev-manifest-img.json'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'IMG 处理完毕'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'replace'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'src/templates/**/*'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">revreplace</span><span class="token punctuation">(</span><span class="token punctuation">{</span>replaceInExtensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.html'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> manifest<span class="token punctuation">:</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'rev-manifest-*.json'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'templates/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'HTML 处理完毕'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'clean'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'static/**/*'</span><span class="token punctuation">,</span> <span class="token string">'rev-manifest-*.json'</span><span class="token punctuation">,</span> <span class="token string">'templates/**/*'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'clean-scripts'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token string">'static/js/**/*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'clean-styles'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token string">'static/css/**/*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'clean-templates'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token string">'templates/**/*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'watch'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'src/components/**/*'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'copy_common'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'src/css/**/*.css'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">runSequence</span><span class="token punctuation">(</span><span class="token string">'clean-styles'</span><span class="token punctuation">,</span> <span class="token string">'clean-templates'</span><span class="token punctuation">,</span> <span class="token string">'styles'</span><span class="token punctuation">,</span> <span class="token string">'replace'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'src/js/**/*.js'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">runSequence</span><span class="token punctuation">(</span><span class="token string">'clean-scripts'</span><span class="token punctuation">,</span><span class="token string">'clean-templates'</span><span class="token punctuation">,</span><span class="token string">'scripts'</span><span class="token punctuation">,</span> <span class="token string">'replace'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'src/img/**/*'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">runSequence</span><span class="token punctuation">(</span><span class="token string">'clean-templates'</span><span class="token punctuation">,</span><span class="token string">'images'</span><span class="token punctuation">,</span> <span class="token string">'replace'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">'src/templates/**/*'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'replace'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面，我们可以通过 npm run 来运行 <code>package.json</code> 里面我们预先定义好的 script. npm run dev 或者 npm run build. 这里面的区别在于，本地环境我们为了测试方便，是不需要压缩的，项目上线，可使用 build 压缩打包。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://gulpjs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gulp&lt;/a&gt; is a toolkit that helps you automate painful or time-consuming task
      
    
    </summary>
    
      <category term="Frontend" scheme="http://saboloh.com/categories/Frontend/"/>
    
    
      <category term="gulp" scheme="http://saboloh.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>使用 Webpack 管理前端 JS</title>
    <link href="http://saboloh.com/2017/06/29/use-webpack-build-script/"/>
    <id>http://saboloh.com/2017/06/29/use-webpack-build-script/</id>
    <published>2017-06-29T06:01:46.000Z</published>
    <updated>2018-03-29T07:14:11.462Z</updated>
    
    <content type="html"><![CDATA[<p>Webpack是啥？官网的解释是“webpack takes modules with dependencies and generates static assets representing those modules.”</p><p>说简单点就是一款前端的模块加载兼打包工具。  </p><p>首先看看项目的目录结构：  </p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">-</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>resources  <span class="token operator">-</span> src    <span class="token operator">-</span> imgs               <span class="token comment" spellcheck="true">//图片</span>    <span class="token operator">-</span> scripts            <span class="token comment" spellcheck="true">//JS脚本，按照page、components进行组织</span>      <span class="token operator">-</span> page      <span class="token operator">-</span> components    <span class="token operator">-</span> styles             <span class="token comment" spellcheck="true">//CSS脚本，按照page、components进行组织</span>      <span class="token operator">-</span> page      <span class="token operator">-</span> components    <span class="token operator">-</span> templates          <span class="token comment" spellcheck="true">//页面ejs</span>  <span class="token operator">-</span> <span class="token keyword">static</span>               <span class="token comment" spellcheck="true">//webpack编译打包输出目录的静态文件</span>  <span class="token operator">-</span> templates            <span class="token comment" spellcheck="true">//webpack编译输出的模板静态HTML文件</span>  <span class="token operator">-</span> server<span class="token punctuation">.</span>js            <span class="token comment" spellcheck="true">//用于启动dev模式</span>  <span class="token operator">-</span> webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js    <span class="token comment" spellcheck="true">//webpack配置文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 <code>webpack.config.js</code> 来完成各种类型文件的 loader ，让我们一起看看该文件内容：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    glob <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'glob'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    WebpackNotifierPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-notifier'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'extract-text-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> CommonsChunkPlugin <span class="token operator">=</span> webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin<span class="token punctuation">;</span><span class="token keyword">var</span> UglifyJsPlugin <span class="token operator">=</span> webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>UglifyJsPlugin<span class="token punctuation">;</span><span class="token keyword">const</span> debug <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token comment" spellcheck="true">//const contextPath = process.env.npm_package_config_contextPath;</span><span class="token keyword">var</span> entries <span class="token operator">=</span> <span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token string">'src/scripts/page/**/*.js'</span><span class="token punctuation">,</span> <span class="token string">'src/scripts/page/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> chunks <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> entries<span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'static'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    publicPath<span class="token punctuation">:</span> <span class="token string">'http://0.0.0.0:9001/static/'</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">'scripts/page/[name]-[hash].js'</span><span class="token punctuation">,</span>    chunkFilename<span class="token punctuation">:</span> <span class="token string">'scripts/[id].chunk.js?[hash]'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token string">'css!less'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.ejs$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'ejs-loader'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.html$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'html?-minimize'</span> <span class="token comment" spellcheck="true">// 避免压缩html,https://github.com/webpack/html-loader/issues/50</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(woff|woff2|ttf|eot|svg)(\?v=[0-9]\.[0-9]\.[0-9])?$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'file-loader?name=fonts/[name].[ext]'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpe?g|gif)$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'url-loader?limit=8192&amp;name=imgs/[name]-[hash].[ext]'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 加载jquery</span>      $<span class="token punctuation">:</span> <span class="token string">'jquery'</span><span class="token punctuation">,</span>      JQuery<span class="token punctuation">:</span> <span class="token string">'jquery'</span><span class="token punctuation">,</span>      _<span class="token punctuation">:</span> <span class="token string">'underscore'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'vendors'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 将公共模块提取，生成名为`vendors`的chunk</span>      chunks<span class="token punctuation">:</span> chunks<span class="token punctuation">,</span>      minChunks<span class="token punctuation">:</span> chunks<span class="token punctuation">.</span>length <span class="token comment" spellcheck="true">// 提取所有entry共同依赖的模块</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">WebpackNotifierPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>alwaysNotify<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">'styles/[name]-[chunkhash].css'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 单独使用link标签加载css并设置路径，相对于output配置中的publickPath</span>    debug <span class="token operator">?</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 压缩代码</span>      compress<span class="token punctuation">:</span> <span class="token punctuation">{</span>        warnings<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      except<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'$super'</span><span class="token punctuation">,</span> <span class="token string">'$'</span><span class="token punctuation">,</span> <span class="token string">'exports'</span><span class="token punctuation">,</span> <span class="token string">'require'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 排除关键字</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> pages <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token string">'src/templates/**/*.ejs'</span><span class="token punctuation">,</span> <span class="token string">'src/templates/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pages<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> conf <span class="token operator">=</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'../templates/'</span> <span class="token operator">+</span> pathname <span class="token operator">+</span> <span class="token string">'.html'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 生成的html存放路径，相对于path</span>    template<span class="token punctuation">:</span> <span class="token string">'src/templates/'</span> <span class="token operator">+</span> pathname <span class="token operator">+</span> <span class="token string">'.ejs'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// html模板路径</span>    cache<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//true | false if true (default) try to emit the file only if it was changed.</span>    inject<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// js插入的位置，true/'head'/'body'/false</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token keyword">in</span> config<span class="token punctuation">.</span>entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//conf.favicon = path.resolve(__dirname, 'src/imgs/favicon.ico');</span>    <span class="token comment" spellcheck="true">//conf.inject = 'body';</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">==</span> <span class="token string">'layout'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      conf<span class="token punctuation">.</span>chunks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'vendors'</span><span class="token punctuation">,</span> pathname<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      conf<span class="token punctuation">.</span>chunks <span class="token operator">=</span> <span class="token punctuation">[</span>pathname<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    conf<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  config<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token keyword">function</span> <span class="token function">getEntry</span><span class="token punctuation">(</span>globPath<span class="token punctuation">,</span> pathDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> files <span class="token operator">=</span> glob<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>globPath<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> entries <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> entry<span class="token punctuation">,</span> dirname<span class="token punctuation">,</span> basename<span class="token punctuation">,</span> pathname<span class="token punctuation">,</span> extname<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> files<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    entry <span class="token operator">=</span> files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    dirname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>    extname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>    basename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> extname<span class="token punctuation">)</span><span class="token punctuation">;</span>    pathname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dirname<span class="token punctuation">,</span> basename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pathDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span>pathDir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>pathDir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      pathname <span class="token operator">=</span> pathname<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pathDir<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    entries<span class="token punctuation">[</span>pathname<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'./'</span> <span class="token operator">+</span> entry<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> entries<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们开发的时候，只需要在 <code>src/scripts/page</code> 下编写 js 文件，<code>src/templates</code> 下编辑对于文件名的<code>.ejs</code> 文件。  </p><h5 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h5><ul><li>JS 开发案例 <code>index.js</code>   </li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../styles/page/index.css'</span><span class="token punctuation">)</span><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>HTML 案例 <code>index.ejs</code>  </li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE HTML></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">layout:</span>decorate</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>~{layout.html}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入css文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">for</span> <span class="token attr-name">(key</span> <span class="token attr-name">in</span> <span class="token attr-name">htmlWebpackPlugin.files.css)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> htmlWebpackPlugin.files.css[key] %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">layout:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Hello World.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 引入图片 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> require(<span class="token punctuation">'</span>../imgs/test.png<span class="token punctuation">'</span>) %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- content --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">th:</span>block</span> <span class="token attr-name"><span class="token namespace">layout:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scripts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入js文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">for</span> <span class="token attr-name">(key</span> <span class="token attr-name">in</span> <span class="token attr-name">htmlWebpackPlugin.files.chunks)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> htmlWebpackPlugin.files.chunks[key].entry %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">th:</span>block</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h5><ul><li><a href="http://webpack.github.io/docs/what-is-webpack.html" target="_blank" rel="noopener">What is the webpack</a></li><li><a href="https://github.com/vhtml/webpack-MultiplePage" target="_blank" rel="noopener">基于webpack的前端工程化方案（自动入口配置及后端模板）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Webpack是啥？官网的解释是“webpack takes modules with dependencies and generates static assets representing those modules.”&lt;/p&gt;
&lt;p&gt;说简单点就是一款前端的模块加载兼
      
    
    </summary>
    
      <category term="Frontend" scheme="http://saboloh.com/categories/Frontend/"/>
    
    
      <category term="js" scheme="http://saboloh.com/tags/js/"/>
    
      <category term="webpack" scheme="http://saboloh.com/tags/webpack/"/>
    
      <category term="ejs" scheme="http://saboloh.com/tags/ejs/"/>
    
      <category term="html" scheme="http://saboloh.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Java 运行 Linux 命令</title>
    <link href="http://saboloh.com/2017/06/23/java-run-linux-shell/"/>
    <id>http://saboloh.com/2017/06/23/java-run-linux-shell/</id>
    <published>2017-06-23T01:44:52.000Z</published>
    <updated>2018-03-29T07:14:11.458Z</updated>
    
    <content type="html"><![CDATA[<p>博主尝试过很多方式运行shell命令，以前使用过 apache common 里面的 command 来运行。<br>后面嫌麻烦，改用了 Java 自带的 Runtime.getRuntime().exec(command) 来运行命令，日志获取没问题，但是没法实现环境变量的设置。</p><p>于是使用 Java 自带的 ProcessBuilder 来实现。 实现方法如下：</p><pre class="line-numbers language-java"><code class="language-java">ProcessBuilder pb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">(</span><span class="token string">"hadoop"</span><span class="token punctuation">,</span> <span class="token string">"distcp"</span><span class="token punctuation">,</span>        <span class="token string">"-Dmapreduce.job.queuename=root.hadoop"</span><span class="token punctuation">,</span>        <span class="token string">"-pb"</span><span class="token punctuation">,</span> <span class="token string">"-overwrite"</span><span class="token punctuation">,</span> source<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>pb<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> env <span class="token operator">=</span> pb<span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置环境变量</span>env<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"HADOOP_PROXY_USER"</span><span class="token punctuation">,</span> <span class="token string">"hadoop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> String USR_HOME <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pb<span class="token punctuation">.</span><span class="token function">directory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>USR_HOME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    Process p <span class="token operator">=</span> pb<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//等待进程执行完毕</span>    <span class="token comment" spellcheck="true">//p.waitFor();</span>    <span class="token comment" spellcheck="true">//如果进程运行结果不为0,表示进程是错误退出的</span>    <span class="token comment" spellcheck="true">//获得进程实例的错误输出</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DisCPLog</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">"err"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DisCPLog</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">"std"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Exeception ::: "</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取日志代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by jianle on 17-6-22. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DisCPLog</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    Process p<span class="token punctuation">;</span>    String logType <span class="token operator">=</span> <span class="token string">"std"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DisCPLog</span><span class="token punctuation">(</span>Process p<span class="token punctuation">,</span> String logType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>p <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logType <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>logType <span class="token operator">=</span> logType<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        BufferedReader Inreader <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"err"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>logType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Inreader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getErrorStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Inreader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String line <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>Inreader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;博主尝试过很多方式运行shell命令，以前使用过 apache common 里面的 command 来运行。&lt;br&gt;后面嫌麻烦，改用了 Java 自带的 Runtime.getRuntime().exec(command) 来运行命令，日志获取没问题，但是没法实现环境变量
      
    
    </summary>
    
      <category term="Java" scheme="http://saboloh.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://saboloh.com/tags/java/"/>
    
      <category term="linux" scheme="http://saboloh.com/tags/linux/"/>
    
      <category term="shell" scheme="http://saboloh.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Java 捕获异常邮箱</title>
    <link href="http://saboloh.com/2016/12/17/java-sendmail-catch-invalidaddress/"/>
    <id>http://saboloh.com/2016/12/17/java-sendmail-catch-invalidaddress/</id>
    <published>2016-12-17T06:12:47.000Z</published>
    <updated>2018-03-29T07:14:11.458Z</updated>
    
    <content type="html"><![CDATA[<p>在使用<code>javax.mail</code> 群发邮件过程中，遇到邮箱失效导致邮件发送失败。<br>针对这个问题，一开始我们考虑从Exception里面获取到异常邮箱地址，然后剔除后再次发送， 但是当使用腾讯企业邮箱后，异常捕获不到具体的无效地址，针对这个问题，我们排查结果是：  </p><p>发送邮件异常其实是保存了invalid的address，但是因为经过很多次的try catch 后异常信息没有抛出到最外层</p><a id="more"></a><p>我们的解决方案：</p><p>A. 自定义<code>SMTPTransport</code>继承<code>Transport</code><br>B. 使用自定义<code>SMTPTransport</code>发送邮件或附件   </p><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>jdk7</li><li>commons-email-1.4/javax.mail-1.5.2</li></ul><h3 id="自定义Class"><a href="#自定义Class" class="headerlink" title="自定义Class"></a>自定义Class</h3><ul><li>SMTPMessage  </li></ul><p>之所以要定义<code>SMTPMessage</code>是因为<code>SMTPTransport</code>用到了其中的方法，而<code>SMTPMessage</code>使用了protect定义，所以必须在同一个包下面才能引用， <code>SMTPMessage</code>照抄javax.mail中同名类即可</p><ul><li>SMTPTransport  </li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//省略...</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SMTPTransport</span> <span class="token keyword">extends</span> <span class="token class-name">Transport</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...省略部分</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> Address<span class="token punctuation">[</span><span class="token punctuation">]</span> addresses<span class="token punctuation">)</span>           <span class="token keyword">throws</span> MessagingException<span class="token punctuation">,</span> SendFailedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 省略部分</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">mailFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rcptTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//...</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SendFailedException</span> se<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 抛出异常邮箱</span>            <span class="token keyword">throw</span> se<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MessagingException</span> mex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 省略部分</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 省略部分</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 省略部分</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendAccurate</span><span class="token punctuation">(</span>String subject<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> receivers<span class="token punctuation">,</span> String html<span class="token punctuation">,</span> String filename<span class="token punctuation">)</span>        <span class="token keyword">throws</span> SendFailedException<span class="token punctuation">,</span> Exception <span class="token punctuation">{</span>    String hostname <span class="token operator">=</span> commonProperties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"email.host"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Session session <span class="token operator">=</span> <span class="token function">createSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Message message <span class="token operator">=</span> <span class="token function">createMessage</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> subject<span class="token punctuation">,</span> receivers            <span class="token punctuation">,</span> html<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> hostname<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取发送对象，连接发送，断开连接设置  </span>    URLName smtpURL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLName</span><span class="token punctuation">(</span>hostname<span class="token punctuation">)</span><span class="token punctuation">;</span>    SMTPTransport sender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SMTPTransport</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> smtpURL<span class="token punctuation">)</span><span class="token punctuation">;</span>    sender<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>hostname            <span class="token punctuation">,</span> commonProperties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"email.username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            commonProperties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"email.password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        sender<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getRecipients</span><span class="token punctuation">(</span>RecipientType<span class="token punctuation">.</span>TO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SendFailedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sender<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> Session <span class="token function">createSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 必须要设置mail.smtp.auth为true这样SMTPTranport对象才会向SMTP服务器提交用户认证信息     */</span>    Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"mail.transport.protocol"</span><span class="token punctuation">,</span> <span class="token string">"smtp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    props<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"mail.smtp.auth"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Session session <span class="token operator">=</span> Session<span class="token punctuation">.</span><span class="token function">getDefaultInstance</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打印详细信息</span>    <span class="token comment" spellcheck="true">//session.setDebug(true);</span>    <span class="token keyword">return</span> session<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> Message <span class="token function">createMessage</span><span class="token punctuation">(</span>Session session<span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> receivers        <span class="token punctuation">,</span> String html<span class="token punctuation">,</span> String filename<span class="token punctuation">,</span> String hostName<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    StringBuffer tos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String to <span class="token operator">:</span> receivers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tos<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Message msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessage</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>    msg<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InternetAddress</span><span class="token punctuation">(</span>commonProperties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"email.username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Mini-Report"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    msg<span class="token punctuation">.</span><span class="token function">setRecipients</span><span class="token punctuation">(</span>RecipientType<span class="token punctuation">.</span>TO<span class="token punctuation">,</span> InternetAddress<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>tos<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>tos<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    msg<span class="token punctuation">.</span><span class="token function">setSentDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    msg<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建组合类型为related的MIME消息</span>    MimeMultipart multipart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMultipart</span><span class="token punctuation">(</span><span class="token string">"related"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MimeBodyPart contentPart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeBodyPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;html>&lt;head>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/head>&lt;body>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/body>&lt;/html>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    contentPart<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">"text/html; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 加入MimeMultipart对象</span>    multipart<span class="token punctuation">.</span><span class="token function">addBodyPart</span><span class="token punctuation">(</span>contentPart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>filename <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MimeBodyPart bodyPart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeBodyPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileDataSource fds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileDataSource</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        bodyPart<span class="token punctuation">.</span><span class="token function">setDataHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataHandler</span><span class="token punctuation">(</span>fds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bodyPart<span class="token punctuation">.</span><span class="token function">setFileName</span><span class="token punctuation">(</span>MimeUtility<span class="token punctuation">.</span><span class="token function">encodeText</span><span class="token punctuation">(</span>fds<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multipart<span class="token punctuation">.</span><span class="token function">addBodyPart</span><span class="token punctuation">(</span>bodyPart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回MimeBodyPart对象将作为MimeMessage对象的一部分</span>    msg<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>multipart<span class="token punctuation">)</span><span class="token punctuation">;</span>    msg<span class="token punctuation">.</span><span class="token function">saveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 容易忘记这句话，否则结果会出现问题</span>    <span class="token keyword">return</span> msg<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>腾讯邮箱就是坑，具体也没去多查到底为什么别的邮箱发邮件的时候能捕获到，而腾讯就不可以</p><p>备注： 如果javax.mail的版本不一致，自定义的<code>SMTPTransport</code> 需要有所改变</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用&lt;code&gt;javax.mail&lt;/code&gt; 群发邮件过程中，遇到邮箱失效导致邮件发送失败。&lt;br&gt;针对这个问题，一开始我们考虑从Exception里面获取到异常邮箱地址，然后剔除后再次发送， 但是当使用腾讯企业邮箱后，异常捕获不到具体的无效地址，针对这个问题，我们排查结果是：  &lt;/p&gt;
&lt;p&gt;发送邮件异常其实是保存了invalid的address，但是因为经过很多次的try catch 后异常信息没有抛出到最外层&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://saboloh.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://saboloh.com/tags/java/"/>
    
      <category term="mail" scheme="http://saboloh.com/tags/mail/"/>
    
  </entry>
  
  <entry>
    <title>Hive 开窗分析函数</title>
    <link href="http://saboloh.com/2016/11/09/hive-languagemanual-windowingandanalytics/"/>
    <id>http://saboloh.com/2016/11/09/hive-languagemanual-windowingandanalytics/</id>
    <published>2016-11-09T03:00:33.000Z</published>
    <updated>2018-03-29T07:14:11.458Z</updated>
    
    <content type="html"><![CDATA[<p>Windowing and Analytics Functions </p><a id="more"></a><ul><li>开窗分析函数  <ul><li>Hive QL 的增强功能</li><li>样例<ul><li>PARTITION BY 带一个分区列，没有ORDER BY或开窗规范</li><li>PARTITION BY 带两个分区列，没有ORDER BY或开窗规范</li><li>PARTITION BY 带一个分区列，一个ORDER BY列，无开窗规范</li><li>PARTITION BY 带两个分区列，两个ORDER BY列，无开窗规范</li><li>PARTITION BY 带分区列，ORDER BY，开窗规范</li><li>WINDOWS字句</li><li>LEAD使用默认的1行导联，而不指定默认值</li><li>LAG指定3行的滞后，默认值为0</li><li>DISTINCT为每个分区计数</li></ul></li></ul></li></ul><h3 id="HiveQL-的增强功能"><a href="#HiveQL-的增强功能" class="headerlink" title="HiveQL 的增强功能"></a>HiveQL 的增强功能</h3><pre><code>版本:介绍Hive版本0.11</code></pre><p>这个部分介绍Hive增强的开窗分析函数， 查看<a href="https://issues.apache.org/jira/secure/attachment/12575830/WindowingSpecification.pdf" target="_blank" rel="noopener">HQL的窗口规范</a>详情，<a href="https://issues.apache.org/jira/browse/HIVE-896" target="_blank" rel="noopener">HIVE-896</a> 有更详细的信息，包括最初意见中的文档链接。</p><p>所有的开窗分析函数功能都是按照SQL标准来使用</p><p>当前版本支持以下开窗分析函数：</p><ol><li>开窗函数<ul><li>LEAD  <ul><li>可以可选地指定要引导的行数。 如果未指定要引导的行数，则引导为一行  </li><li>当当前行的引线超出窗口末尾时返回null</li></ul></li><li>LAG  <ul><li>可以选择指定要延迟的行数。 如果未指定要延迟的行数，则延迟为一行</li><li>当当前行的延迟在窗口开始之前延伸时返回null</li></ul></li><li>FIRST_VALUE</li><li>LAST_VALUE</li></ul></li><li><p>OVER 字句</p><ul><li>OVER与标准的聚合<ul><li>COUNT</li><li>SUM</li><li>MIN</li><li>MAX</li><li>AVG</li></ul></li><li>OVER中的PARTITION BY子句使用一个或多个任何基本数据类型的分区列</li><li><p>OVER中的PARTITION BY和ORDER BY字句使用任何数据类型的一个或多个分区和/或排序列</p><ul><li><p>OVER有一定的窗口规范，窗口可以在WINDOW子句中单独定义。 窗口规范支持这些标准选项：   </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ROWS</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">CURRENT</span> <span class="token keyword">ROW</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token keyword">UNBOUNDED</span> <span class="token operator">|</span> <span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">PRECEDING</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token keyword">UNBOUNDED</span> <span class="token operator">|</span> <span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">FOLLOWING</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">OVER</span>子句支持以下功能，但它不支持带有它们的窗口（参见<span class="token punctuation">[</span>HIVE<span class="token number">-4797</span><span class="token punctuation">]</span><span class="token punctuation">(</span>https:<span class="token comment" spellcheck="true">//issues.apache.org/jira/browse/HIVE-4797)）：</span>排名函数：Rank，NTile，DenseRank，CumeDist，PercentRank。LEAD和LAG 函数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ol><ol start="3"><li>分析函数<ul><li>RANK</li><li>ROW_NUMBER</li><li>DENSE_RANK</li><li>CUME_DIST</li><li>PERCENT_RANK</li><li>NTILE</li></ul></li><li><p>Hive 2.1.0 及更高版本支持DISTINCT (查看<a href="https://issues.apache.org/jira/browse/HIVE-9534" target="_blank" rel="noopener">HIVE-9534</a>)<br>DISTINCT支持<code>SUM</code>, <code>COUNT</code>和<code>AVG</code>等聚合函数，以及在每个分区内不同值上的聚合。<br>当前实现具有以下限制：由于性能原因，在分区子句中不能支持ORDER BY或窗口规范。 支持的语法如下：  </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> <span class="token number">a</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Hive 2.1.0 及更高版本支持聚合函数在OVER字句中使用<br>添加了对引用OVER子句中的聚合函数的支持。 例如，目前我们可以使用OVER子句中的SUM聚合函数，如下所示：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token number">a</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p>本节提供了如何在SELECT语句中使用Hive QL窗口化和分析函数的示例，更多的例子见<a href="https://issues.apache.org/jira/browse/HIVE-896" target="_blank" rel="noopener">HIVE-896</a></p><h4 id="PARTITION-BY-带一个分区列，没有ORDER-BY或开窗规范"><a href="#PARTITION-BY-带一个分区列，没有ORDER-BY或开窗规范" class="headerlink" title="PARTITION BY 带一个分区列，没有ORDER BY或开窗规范"></a>PARTITION BY 带一个分区列，没有ORDER BY或开窗规范</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="PARTITION-BY-带两个分区列，没有ORDER-BY或开窗规范"><a href="#PARTITION-BY-带两个分区列，没有ORDER-BY或开窗规范" class="headerlink" title="PARTITION BY 带两个分区列，没有ORDER BY或开窗规范"></a>PARTITION BY 带两个分区列，没有ORDER BY或开窗规范</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span><span class="token punctuation">,</span> <span class="token number">d</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="PARTITION-BY-带一个分区列，一个ORDER-BY列，无开窗规范"><a href="#PARTITION-BY-带一个分区列，一个ORDER-BY列，无开窗规范" class="headerlink" title="PARTITION BY 带一个分区列，一个ORDER BY列，无开窗规范"></a>PARTITION BY 带一个分区列，一个ORDER BY列，无开窗规范</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">d</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="PARTITION-BY-带两个分区列，两个ORDER-BY列，无开窗规范"><a href="#PARTITION-BY-带两个分区列，两个ORDER-BY列，无开窗规范" class="headerlink" title="PARTITION BY 带两个分区列，两个ORDER BY列，无开窗规范"></a>PARTITION BY 带两个分区列，两个ORDER BY列，无开窗规范</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span><span class="token punctuation">,</span> <span class="token number">d</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">e</span><span class="token punctuation">,</span> <span class="token number">f</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="PARTITION-BY-带分区列，ORDER-BY，开窗规范"><a href="#PARTITION-BY-带分区列，ORDER-BY，开窗规范" class="headerlink" title="PARTITION BY 带分区列，ORDER BY，开窗规范"></a>PARTITION BY 带分区列，ORDER BY，开窗规范</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">d</span> <span class="token keyword">ROWS</span> <span class="token operator">BETWEEN</span> <span class="token keyword">UNBOUNDED</span> <span class="token keyword">PRECEDING</span> <span class="token operator">AND</span> <span class="token keyword">CURRENT</span> <span class="token keyword">ROW</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">d</span> <span class="token keyword">ROWS</span> <span class="token operator">BETWEEN</span> <span class="token number">3</span> <span class="token keyword">PRECEDING</span> <span class="token operator">AND</span> <span class="token keyword">CURRENT</span> <span class="token keyword">ROW</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">d</span> <span class="token keyword">ROWS</span> <span class="token operator">BETWEEN</span> <span class="token number">3</span> <span class="token keyword">PRECEDING</span> <span class="token operator">AND</span> <span class="token number">3</span> <span class="token keyword">FOLLOWING</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">d</span> <span class="token keyword">ROWS</span> <span class="token operator">BETWEEN</span> <span class="token keyword">CURRENT</span> <span class="token keyword">ROW</span> <span class="token operator">AND</span> <span class="token keyword">UNBOUNDED</span> <span class="token keyword">FOLLOWING</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在单个查询中可以有多个OVER子句。 单个OVER子句仅适用于前一个函数调用。 在此示例中，第一个OVER子句适用于COUNT（b），第二个OVER子句适用于SUM（b）：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使用别名，带或不带关键字AS：  </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> b_count<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span><span class="token punctuation">)</span> b_sum<span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="WINDOWS字句"><a href="#WINDOWS字句" class="headerlink" title="WINDOWS字句"></a>WINDOWS字句</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> w<span class="token keyword">FROM</span> TWINDOW w <span class="token keyword">AS</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">c</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">d</span> <span class="token keyword">ROWS</span> <span class="token keyword">UNBOUNDED</span> <span class="token keyword">PRECEDING</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="LEAD使用默认的1行导联，而不指定默认值"><a href="#LEAD使用默认的1行导联，而不指定默认值" class="headerlink" title="LEAD使用默认的1行导联，而不指定默认值"></a>LEAD使用默认的1行导联，而不指定默认值</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> LEAD<span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">b</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> C <span class="token keyword">ROWS</span> <span class="token operator">BETWEEN</span> <span class="token keyword">CURRENT</span> <span class="token keyword">ROW</span> <span class="token operator">AND</span> <span class="token number">1</span> <span class="token keyword">FOLLOWING</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="LAG指定3行的滞后，默认值为0"><a href="#LAG指定3行的滞后，默认值为0" class="headerlink" title="LAG指定3行的滞后，默认值为0"></a>LAG指定3行的滞后，默认值为0</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> LAG<span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">b</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> C <span class="token keyword">ROWS</span> <span class="token number">3</span> <span class="token keyword">PRECEDING</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="DISTINCT为每个分区计数"><a href="#DISTINCT为每个分区计数" class="headerlink" title="DISTINCT为每个分区计数"></a>DISTINCT为每个分区计数</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token number">a</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token number">b</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> T<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>参考资料  <ul><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+WindowingAndAnalytics#LanguageManualWindowingAndAnalytics-PARTITIONBYwithonepartitioningcolumn,noORDERBYorwindowspecification" target="_blank" rel="noopener">LanguageManual WindowingAndAnalytics</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windowing and Analytics Functions &lt;/p&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://saboloh.com/categories/BigData/"/>
    
    
      <category term="hive" scheme="http://saboloh.com/tags/hive/"/>
    
      <category term="windowing" scheme="http://saboloh.com/tags/windowing/"/>
    
      <category term="analytics" scheme="http://saboloh.com/tags/analytics/"/>
    
      <category term="languageManual" scheme="http://saboloh.com/tags/languageManual/"/>
    
  </entry>
  
  <entry>
    <title>MySQL使用</title>
    <link href="http://saboloh.com/2016/08/26/mysql-options/"/>
    <id>http://saboloh.com/2016/08/26/mysql-options/</id>
    <published>2016-08-26T04:14:36.000Z</published>
    <updated>2018-03-29T07:14:11.462Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li><p>MySQL 企业版安装后，root密码自动生成在: <code>/root/.mysql_secret</code></p></li><li><p>mysqldump 导出表结构到指定库    </p><a id="more"></a><pre class="line-numbers language-bash"><code class="language-bash">$ mysqldump -hIP -uroot -ppassword --compact --skip-lock-tables --no-data database tableName <span class="token operator">></span> mysqldumpTmp.sql$ mysql -hIP -uroot -ppassword -Ddatabase <span class="token operator">&lt;</span> mysqldumpTemp.sql$ mysqldump -hIP -uroot -ppassword --compact --skip-lock-tables --no-data database tableName <span class="token operator">|</span> mysql -uroot -ppassword databases<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>MySQL 创建指定用户，并授权</p><pre class="line-numbers language-bash"><code class="language-bash">$ CREATE USER <span class="token string">'dw_tools'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'dw_tools'</span><span class="token punctuation">;</span>$ GRANT ALL ON *.* TO <span class="token string">'dw_tools'</span>@<span class="token string">'localhost'</span><span class="token punctuation">;</span>$ FLUSH PRIVILEGES<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>查看进程信息</p><pre><code>$ SELECT * FROM information_schema.processlist WHERE state = &#39;locked&#39;;</code></pre></li></ul><h3 id="切换MySQL-文件目录"><a href="#切换MySQL-文件目录" class="headerlink" title="切换MySQL 文件目录"></a>切换MySQL 文件目录</h3><ul><li><p>Stop MySQL using the following command:</p><pre><code>sudo /etc/init.d/mysql stop</code></pre></li><li><p>Copy the existing data directory (default located in /var/lib/mysql) using the following command:</p><pre><code>sudo cp -R -p /var/lib/mysql /newpath</code></pre></li><li><p>edit the MySQL configuration file with the following command:</p><pre><code>sudo gedit /etc/mysql/my.cnf</code></pre></li><li><p>Look for the entry for datadir, and change the path (which should be /var/lib/mysql) to the new data directory</p></li><li><p>In the terminal, enter the command:</p><pre><code>sudo gedit /etc/apparmor.d/usr.sbin.mysqld</code></pre></li><li><p>Look for lines beginning with <code>/var/lib/mysql</code>. Change <code>/var/lib/mysql</code> in the lines with the new path.</p></li><li><p>Save and close the file.</p></li><li><p>Restart the AppArmor profiles with the command:</p><pre><code>sudo /etc/init.d/apparmor reload</code></pre></li><li><p>Restart MySQL with the command:</p><pre><code>sudo /etc/init.d/mysql restart</code></pre></li><li><p>Now login to MySQL and you can access the same databases you had before.</p></li></ul><h3 id="修改字符集"><a href="#修改字符集" class="headerlink" title="修改字符集"></a>修改字符集</h3><ul><li>修改Column字符集   <pre><code>CREATE TABLE `COLUMNS_V2` (`CD_ID` bigint(20) NOT NULL,`COMMENT` varchar(256) CHARACTER SET latin1 COLLATE latin1_bin DEFAULT NULL,`COLUMN_NAME` varchar(128) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL,`TYPE_NAME` varchar(4000) DEFAULT NULL,`INTEGER_IDX` int(11) NOT NULL,PRIMARY KEY (`CD_ID`,`COLUMN_NAME`),KEY `COLUMNS_V2_N49` (`CD_ID`),CONSTRAINT `COLUMNS_V2_FK1` FOREIGN KEY (`CD_ID`) REFERENCES `CDS` (`CD_ID`)) ENGINE=InnoDB DEFAULT CHARSET=latin1</code></pre><pre><code>CREATE TABLE `PARTITION_KEYS` (`TBL_ID` bigint(20) NOT NULL,`PKEY_COMMENT` varchar(4000) CHARACTER SET latin1 COLLATE latin1_bin DEFAULT NULL,`PKEY_NAME` varchar(128) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL,`PKEY_TYPE` varchar(767) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL,`INTEGER_IDX` int(11) NOT NULL,PRIMARY KEY (`TBL_ID`,`PKEY_NAME`),KEY `PARTITION_KEYS_N49` (`TBL_ID`),CONSTRAINT `PARTITION_KEYS_FK1` FOREIGN KEY (`TBL_ID`) REFERENCES `TBLS` (`TBL_ID`)) ENGINE=InnoDB DEFAULT CHARSET=latin1</code></pre></li></ul><pre><code>ALTER TABLE COLUMNS_V2 MODIFY `COMMENT` varchar(256) CHARACTER SET utf8 collate utf8_bin;ALTER TABLE PARTITION_KEYS MODIFY `PKEY_COMMENT` varchar(4000) CHARACTER SET utf8 collate utf8_bin;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操作&quot; class=&quot;headerlink&quot; title=&quot;基本操作&quot;&gt;&lt;/a&gt;基本操作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MySQL 企业版安装后，root密码自动生成在: &lt;code&gt;/root/.mysql_secret&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mysqldump 导出表结构到指定库    &lt;/p&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://saboloh.com/categories/BigData/"/>
    
    
      <category term="mysql" scheme="http://saboloh.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop常用操作</title>
    <link href="http://saboloh.com/2016/08/19/hadoop-frequently-options/"/>
    <id>http://saboloh.com/2016/08/19/hadoop-frequently-options/</id>
    <published>2016-08-19T03:38:42.000Z</published>
    <updated>2018-03-29T07:14:11.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hadoop-Commands"><a href="#Hadoop-Commands" class="headerlink" title="Hadoop Commands"></a>Hadoop Commands</h2><p>工作中常用的hadoop操作</p><ul><li><p><a href="http://hortonworks.com/blog/simplifying-user-logs-management-and-access-in-yarn/" target="_blank" rel="noopener">Yarn logs</a></p><a id="more"></a><pre class="line-numbers language-bash"><code class="language-bash">$ yarn logs -applicationId <span class="token operator">&lt;</span>application ID<span class="token operator">></span> -appOwner <span class="token operator">&lt;</span>Application Owner<span class="token operator">></span> -containerId <span class="token operator">&lt;</span>Container ID<span class="token operator">></span> -nodeAddress <span class="token operator">&lt;</span>Node Address<span class="token operator">></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Yarn application  </p></li><li><p><a href="https://hadoop.apache.org/docs/r2.4.1/hadoop-hdfs-httpfs/index.html" target="_blank" rel="noopener">HttpFs</a>  </p><pre class="line-numbers language-bash"><code class="language-bash">$ http://localhost:14000/webhdfs/v1/user/history/done/2016/09/03/001509/job_1466675370769_1509892_conf.xml?op<span class="token operator">=</span>open<span class="token operator">&amp;</span>user.name<span class="token operator">=</span>hadoop <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><a href="https://hadoop.apache.org/docs/r2.4.1/hadoop-yarn/hadoop-yarn-site/ResourceManagerRest.html" target="_blank" rel="noopener">ResourceManager REST API’s</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hadoop-Commands&quot;&gt;&lt;a href=&quot;#Hadoop-Commands&quot; class=&quot;headerlink&quot; title=&quot;Hadoop Commands&quot;&gt;&lt;/a&gt;Hadoop Commands&lt;/h2&gt;&lt;p&gt;工作中常用的hadoop操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://hortonworks.com/blog/simplifying-user-logs-management-and-access-in-yarn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Yarn logs&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://saboloh.com/categories/BigData/"/>
    
    
      <category term="hive" scheme="http://saboloh.com/tags/hive/"/>
    
      <category term="Hive" scheme="http://saboloh.com/tags/Hive/"/>
    
      <category term="hadoop" scheme="http://saboloh.com/tags/hadoop/"/>
    
      <category term="command" scheme="http://saboloh.com/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>Git学习指南（二）— MarkDown</title>
    <link href="http://saboloh.com/2016/08/14/git-tutorial-markdown/"/>
    <id>http://saboloh.com/2016/08/14/git-tutorial-markdown/</id>
    <published>2016-08-14T10:08:49.000Z</published>
    <updated>2018-03-29T07:14:11.458Z</updated>
    
    <content type="html"><![CDATA[<p>MarkDown 的目标是易读易写。</p><p>Markdown 强调可读性高于一切。一份Markdown格式的文档应该能直接以纯文本方式发布，而不致一眼看过去满眼都是标签和格式化指令。Markdown的语法确实受了几种现有的text转HTML过滤器影响－－包括 <code>Setext</code> , <code>atx</code>,<code>Textile</code>, <code>reStructuredText</code>,<code>Grutatext</code>, 和<code>EtText</code> – 其中对Markdown语法影响最大的单一来源是纯文本的Email格式。</p><p>为实现这一目标，Markdown的语法几乎全部由标点符号构成，这些标点符号都是精心挑选而来，尽量做到能望文生义。如星号括着一个单词（Markdown中表示强调）看上去就像 <em> 强调 </em>。Markdown的列表看上去就像列表；Markdown的引文就象引文，和你使用email时的感觉一样。</p><a id="more"></a><h3 id="内嵌HTML"><a href="#内嵌HTML" class="headerlink" title="内嵌HTML"></a>内嵌HTML</h3><p>Markdown的语法为“方便地在网上写作”这一目标而生。</p><p>Markdown不是HTML替代品，也不是为了终接HTML。它的语法非常简单，只相当于HTML标签的一个非常非常小的子集。它并非是为了更容易输入HTML标签而创造一种新语法。在我看来，HTML标签已经够容易书写的了。Markdown的目标是让（在网上）让读文章、写文章、修改文章更容易。HTML是一种适合发表的格式；而Markdown是一种书写格式。正因如此，Markdown的格式化语法仅需解决用纯文本表达的问题。</p><p>对Markdown语法无法支持的格式，你可以直接用HTML。你不需要事先声明或者使用什么定界符来告诉Markdown要写HTML了，你直接写就是了。</p><p>唯一的限制是那些块级HTML元素 – 如<strong><code>&lt;div&gt;</code></strong>,<strong><code>&lt;table&gt;</code></strong>,<strong><code>&lt;pre&gt;</code></strong>,<strong><code>&lt;p&gt;</code></strong>等等 – 必须使用空行与相邻内容分开，并且块元素的开始和结束标签之前不要留有空格或TAB。Markdown足够聪明不会添加额外的(也是不必要的)<strong><code>&lt;p&gt;</code></strong>标签包住这些块元素标签。</p><p>下面这个例子，在一篇Markdown文章中添加了一个HTML表格：</p><pre><code> 这是一个普通的段落。 &lt;table&gt;    &lt;tr&gt;    &lt;td&gt;Foo&lt;/td&gt;  &lt;/tr&gt; &lt;/table&gt;</code></pre><p> 注意一点，不要在块级HTML元素内使用Markdown格式化命令，Markdown不会处理它们。比如你不要在一个HTML块中使用 <code>*emphasis*</code>这样的Markdown格式化命令。</p><p> 行内HTML标签 – 如 <strong><code>&lt;span&gt;</code></strong>, <strong><code>&lt;cite&gt;</code></strong>, 或 <strong><code>&lt;del&gt;</code></strong> – 在一个Markdown段落里、列表中、或者标题中－－随便用。 如果需要，你甚至可以用HTML标签代替Markdown格式化命令。比方你可以直接用HTML标签 <strong><code>&lt;a&gt;</code></strong> 或 <strong><code>&lt;img&gt;</code></strong> 而不使用Markdown的链接和图片语法，随你的便。</p><p>不同于这些块级HTML元素，在HTML行内元素内的Markdown语法标记会被正确处理</p><h3 id="自动转换特殊字符"><a href="#自动转换特殊字符" class="headerlink" title="自动转换特殊字符"></a>自动转换特殊字符</h3><p>在HTML中，有两个字符需要特殊对待：<code>&lt;</code>和 <code>&amp;</code>。<code>&lt;</code>用于标签开始，<code>&amp;</code>用于标识HTML实体。如果打算把它们当成普通字符，你必须使用反引号转义它们，如<code>&lt;</code>和<code>&amp;</code>。</p><p>对一些互联网作家来说，&amp;符号特别使人烦恼。如果你打算写’AT&amp;T’，你就得写 ‘AT&amp;T’。甚至在URL中也得想着转义&amp;符号。比方你打算写：</p><pre><code>http://images.google.com/images?num=30&amp;q=larry+bird</code></pre><p>你就得在A标签中把href属性中的URL编码成：</p><pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird</code></pre><p>不用说，这很容易忘。这往往是那些良构HTML站点中最容易出错的地方。</p><p>在Markdown中，你尽管自然的使用这些字符，只需要关心那些必要的转义。如果使用在HTML实体中使用&amp;符号，它会保持不变；而在其它场合，它会转换成<code>&amp;</code>。</p><p>所以，如果你打算在文章中书写版权符号，你可以这样写：</p><pre><code>&amp;copy;</code></pre><p>Markdown不会碰它。然而如果你书写</p><pre><code>AT&amp;T</code></pre><p>Markdown就会把它翻译成：</p><pre><code>AT&amp;amp;T</code></pre><p>类似的，既然Markdown支持内嵌HTML，如果你使用<code>&lt;</code>作为HTML标签定界符，Markdown就会把它们当成HTML标签定界符。可是如果你书写：</p><pre><code>4 &lt; 5</code></pre><p>Markdown就会把它翻译成：</p><pre><code>4&amp;lt;5</code></pre><p>然而，在Mardown代码行内标记和块级标记之中，<code>&lt;</code>和<code>&amp;</code>始终会被自动编码。这使得在Markdown文件中书写HTML代码更容易.(相对于纯HTML。如果想在纯在纯HTML里贴一段HTML代码，那才是糟糕透顶，必须对代码中的每一个<code>&lt;</code>和<code>&amp;</code>都转义才成。)</p><hr><h2 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h2><h4 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h4><p>一个段落由一行或多个相关文本行构成。段落之间用一个或多个空行分隔。（一个空行就是一个看上去什么也没有的行－－如果一行什么也没有或者只有空格和TAB都会被视为空行）正常的段落不要以空白或TAB字符开始。</p><p>一行或多个相关文本行意味着Markdown支持“硬折行”。这一点与其它text转HTML的程序完全不同（包括Moveable Type的“Convert Line Breaks”选项），它们会将段落中的每一个换行符转换成<code>&lt;br /&gt;</code>标签。</p><p>如果你确实需要使用Markdown插入一个<code>&lt;br /&gt;</code>换行符，只需要在每一行的末尾以两个或更多个空格符号结束，然后再打回车键。</p><p>没错，在Markdown里生成一个<code>&lt;br /&gt;</code>稍稍有一点麻烦，但那种简单的“把每一个换行符都转换<code>&lt;br /&gt;</code>规则”并不适用于Markdown。Markdown Email风格的 blockquoting 和 multi-paragraph list items更好用 – 并且更美观 – 在你用换行符对其格式化时。</p><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>Markdown 支持两种风格的标题，<code>Setext</code> 和 <code>atx</code>.</p><p>Setext-风格的一级标题下面一行使用等号符号，二级标题下面使用连字符符号，例如：</p><pre><code>这是一个一级标题=============这是一个二级标题-------------</code></pre><p>至少有一个<strong><code>=</code></strong> 和 <strong><code>-</code></strong>就能正常工作。</p><p>Atx-风格的标题在每行的开头使用1－6个井号字符，分别对应标题级别1－6。例如：</p><pre><code># 这是一级标题## 这是二级标题###### 这是六级标题</code></pre><p>如果愿意, 你也可以 “结束” atx-风格的标题。这纯粹是美观考虑–如果你觉得这样会看上更舒服些的话。结束用的井号个数随便，不必与起始井号数量相同 (起始井号的数量决定标题级别)：</p><pre><code># 这是一级标题 ### 这是二级标题 ######## 这是六级标题 ######</code></pre><h4 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h4><p>Markdown使用Email风格的 <code>&gt;</code> 字符引用块。如果你熟悉Email中的引用块，你就知道在Markdown中如何使用引用块。如果每一行你都使用硬换行并在行首放一个<code>&gt;</code>符号，看上去会很美观：</p><pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt;&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse&gt; id sem consectetuer libero luctus adipiscing.</code></pre><p>（如果觉得每行写一个<code>&gt;</code>太累，）Markdown允许你偷懒，你只需在硬换行段落的第一行之前放一个<code>&gt;</code>号:</p><pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing.</code></pre><p>只需要多加一个<code>&gt;</code>，就得到嵌套的引用块(即引用块中的引用块):</p><pre><code>&gt; This is the first level of quoting.&gt;&gt; &gt; This is nested blockquote.&gt;&gt; Back to the first level.</code></pre><p>引用块中可包含其它Markdown元素，如标题、列表和代码块：</p><pre><code>&gt; ## This is a header.&gt;&gt; 1.   This is the first list item.&gt; 2.   This is the second list item.&gt;&gt; Here&#39;s some example code:&gt;&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre><p>是个象样的文本编辑器都能实现Email风格的引用。比如在BBEdit里，你就可以选中一些文字之后从Text菜单里选择引用级别。</p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>Markdown 支持有序列表和无序列表</p><p>无序列表可使用星号、加号和连字符（这几个符号是等价的，你喜欢哪个就用哪个）作为列表标记：</p><pre><code>* Red* Green* Blue</code></pre><p>等同于:</p><pre><code>+ Red+ Green+ Blue</code></pre><p>也等同于：</p><pre><code>- Red- Green- Blue</code></pre><p>有序列表则使用数字加英文句点：</p><pre><code>1.  Bird2.  McHale3.  Parish</code></pre><p>有一点需要注意，你在列表中输入的标记数字并不会反映到Markdown输出的HTML之中。上面这个列表Markdown会输出为：</p><pre><code>&lt;ol&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;McHale&lt;/li&gt;&lt;li&gt;Parish&lt;/li&gt;&lt;/ol&gt;</code></pre><p>即使你写成下面这样：</p><pre><code>1.  Bird1.  McHale1.  Parish</code></pre><p>甚至这样：</p><pre><code>3. Bird1. McHale8. Parish</code></pre><p>都会得到一模一样（但正确的）输出。要点在于，如果你愿意，就在你的Markdown有序列表里顺序使用数字（这样源代码里的顺序和生成的顺序会一致），如果你希望省点儿事，你就不用费心（去手工编号）。</p><p>如果你打算偷懒，记住列表的第一行使用数字 1。以后Markdown或许会支持有序列表从任意数字开始（译者注：这儿和前面的例子有点矛盾，原文如此）。</p><p>列表标记通常从左边界开始，至多可以有三个空格的缩进。列表标记之后至少要跟一个空格或TAB。</p><p>为了让列表看起来美观，你可以使用TAB缩进列表项内容，使其整齐:</p><pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,    viverra nec, fringilla in, laoreet vitae, risus.*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.    Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>不过如果你很懒，下面这样也行：</p><pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,viverra nec, fringilla in, laoreet vitae, risus.*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果列表项之间用空行分隔，Markdown就会在HTML输出中使用<code>&lt;p&gt;</code>标签包裹列表项。比如：</p><pre><code>*   Bird*   Magic</code></pre><p>生成的HTML如下：</p><pre><code> &lt;ul&gt; &lt;li&gt;Bird&lt;/li&gt; &lt;li&gt;Magic&lt;/li&gt; &lt;/ul&gt;</code></pre><p>而这个：</p><pre><code>*   Bird*   Magic</code></pre><p>生成的HTML是这样：</p><pre><code> &lt;ul&gt; &lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt;</code></pre><p>列表项有可能由多个段落组成，列表项的每个后续段落必须缩进至少4个空格或者一个TAB：</p><pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor    sit amet, consectetuer adipiscing elit. Aliquam hendrerit    mi posuere lectus.    Vestibulum enim wisi, viverra nec, fringilla in, laoreet    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum    sit amet velit.2.  Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>像上面这样缩进后续段落的每一行看起来很美观（但稍有些麻烦），如果你比较懒（和我一样），没问题，Markdown支持你：</p><pre><code>*   This is a list item with two paragraphs.    This is the second paragraph in the list item. You&#39;re only required to indent the      first line. Lorem ipsum dolor sit amet, consectetuer adipiscing elit.*   Another item in the same list.</code></pre><p>要在列表项中使用引用，引用定界符 <code>&gt;</code> 需要缩进：</p><pre><code>*   A list item with a blockquote:    &gt; This is a blockquote    &gt; inside a list item.</code></pre><p>要在列表项中使用代码块，代码块需要缩进两次 – 8个空格或者两个TAB：</p><pre><code>*   A list item with a code block:        &lt;code goes here&gt;</code></pre><p>有时候不小心会触发一个有序列表，比方在写类似下面这样的东西时：</p><pre><code>1986. What a great season.</code></pre><p>换言之， 以数字＋句点＋空格 序列起始的行会触发有序列表。为避免此情况，要对句点符号进行转义：</p><pre><code>1986\. What a great season.</code></pre><h5 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h5><p>我们经常在写有关编程或标记语言源代码时用到预格式化的代码块。不像格式化普通段落，代码块中的行会按字面进行解释。Markdown对代码块同时使用<code>&lt;pre&gt;</code>和<code>&lt;code&gt;</code>标签包裹：</p><p>在Markdown中要生成一个代码块，只需要在代码块内容的每一行缩进至少四个空格或者一个TAB。比如：</p><pre><code>This is a normal paragraph:    This is a code block.</code></pre><p>Markdown会生成:</p><pre><code>&lt;p&gt;This is a normal paragraph:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;This is a code block.&lt;/code&gt;&lt;/pre&gt;</code></pre><p>Markdown会从生成的代码块中删除一级缩进 – 4个空格或者1个TAB。看下面这个例子：</p><pre><code>Here is an example of AppleScript:    tell application &quot;Foo&quot;        beep    end tell</code></pre><p>会得到：</p><pre><code> &lt;p&gt;Here is an example of AppleScript:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot;    beep end tell &lt;/code&gt;&lt;/pre&gt;</code></pre><p>代码块在遇到没有缩进的一行，或者文件末尾时自动结束。</p><p>在代码块中，<code>&amp;</code>符号和<code>&lt;</code>、<code>&gt;</code>会自动转换成HTML实体。因此在Markdown中包含HTML源代码只是小菜一碟－－粘贴进去，缩进一下。剩下的脏活累活Markdown自会处理。看下面这个例子：</p><pre><code>    &lt;div class=&quot;sample_footer&quot;&gt;        &amp;copy; 2004 Foo Corporation    &lt;/div&gt;</code></pre><p>Markdown会生成：</p><pre><code>   © 2004 Foo Corporation    </code></pre><p>Markdown不会解析代码块中的Markdown标记。如代码块中的星号就是星号，失去了它原来的Markdown含义。这意味着你能够使用Markdown编写Markdown自己的语法教程。（就象这篇文章一样）。</p><h6 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h6><p>如果在一行里只放三个或更多个连字符，或星号或下划线，你就会得到一个水平线标记(<code>&lt;hr /&gt;</code>)。下面每一行都会得到一个水平线：</p><pre><code>* * *********- - ----------------------------------------</code></pre><hr><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>Markdown 支持两种风格的链接： 行内链接 和 引用链接.</p><p>两种风格的链接，链接文本都放在中括号之内[square brackets]。</p><p>要生成一个行内链接，在链接文本之后紧跟用一对小括号。小括号里放链接地址和可选的的链接title。如果提供链接title的话，链接title要用引号包起来。例如：</p><pre><code>这是一个 [an example](http://example.com/ &quot;Title&quot;) 行内链接。[这个链接](http://example.net/) 没有title属性。</code></pre><p>Markdown会生成：</p><pre><code> &lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt; an example&lt;/a&gt; inline link.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no title attribute.&lt;/p&gt;</code></pre><p>如果你打算引用一个本地资源或者同一站点的资源，可以使用相对路径：</p><pre><code>如果想进一步了解我，请参阅我的 [关于我](/about/) 页。</code></pre><p>引用风格的链接，在链接文本之后紧跟又一对中括号。这对中括号里放的是该链接的标识符（可以理解为别名）：</p><pre><code>这是一个引用型链接 [示例][id]。</code></pre><p>如果你嫌弃两对中括号过于亲密，Markdown允许你在两对中括号之间放一个空格：</p><pre><code>这是一个引用型链接 [示例] [id]。</code></pre><p>然后，我们可以在文档的任意位置，像下面这样定义链接标识与链接的对应关系（一行一个链接）:</p><pre><code> [id] : http://example.com/  &quot;Optional Title Here&quot;</code></pre><p>即：</p><ul><li>中括号内放链接标识符(行前可选缩进，至多不超过三个空格)；</li><li>之后紧跟一个冒号；</li><li>再后面是一个或多个空格（TAB也行）；</li><li>接下来是链接URL；</li><li>最后面是可选的用双引号或单引号或小括号括起来的链接title。</li></ul><p>下面三种链接定义方式是等价的：</p><pre><code>[foo] : http://example.com/  &quot;Optional Title Here&quot;[foo] : http://example.com/  &#39;Optional Title Here&#39;[foo] : http://example.com/  (Optional Title Here)</code></pre><p><strong>注意： Markdown.pl 1.0.1</strong> 版本有一个已知的bug，用单引号作为链接title的定界符会出问题。</p><p>至于链接URL，还支持使用一对可选的尖括号包裹起来：</p><pre><code> [id] : &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;</code></pre><p>你也可以将链接的title属性放在下一行并使用额外的空格或TAB填充，这样较长的URL会比较美观：</p><pre><code>[id] : http://example.com/longish/path/to/resource/here    &quot;Optional Title Here&quot;</code></pre><p>链妆定义仅供Markdown解析器使用。最终输出的HTML当中不会包含链接定义。</p><p>链接标识符可以由字母、数字、空格和标点符号组成－－不区分大小写。下面这两个链接：</p><pre><code>[link text][a][link text][A]</code></pre><p>是等价的。</p><p>隐式链接标识 允许我们省略链接标识，这时链接文本本身就是链接标识。在链接文本之后加一对空的中括号－－例如，使用”Google”文本链接到google.com站点，可以这样写：</p><pre><code>[Google][]</code></pre><p>然后这样定义它的链接：</p><pre><code>[Google] : http://google.com/</code></pre><p>链接名字有可能包含空格，不过没问题，这种情况照样正常工作：</p><pre><code>Visit [Daring Fireball][] for more information.</code></pre><p>然后这样定义这个链接：</p><pre><code>[Daring Fireball] : http://daringfireball.net/</code></pre><p>链接定义可放于Markdown文档的任意位置。我建议把它们就近放到最先使用它的段落之后。不过如果你更喜欢放到文档末尾，当成某种形式的尾注，随你的便。</p><p>下面是一些引用链接的例子：</p><pre><code>I get 10 times more traffic from [Google] [11] than from[Yahoo] [12] or [MSN] [13].  [1] : http://google.com/        &quot;Google&quot;  [2] : http://search.yahoo.com/  &quot;Yahoo Search&quot;  [3] : http://search.msn.com/    &quot;MSN Search&quot;</code></pre><p>换成隐式链接标识，也可以这么写：</p><pre><code>I get 10 times more traffic from [Google][] than from[Yahoo][] or [MSN][].  [google] : http://google.com/        &quot;Google&quot;  [yahoo] :  http://search.yahoo.com/  &quot;Yahoo Search&quot;  [msn] :    http://search.msn.com/    &quot;MSN Search&quot;</code></pre><p>上面两种写法最终得到HTML输出是一样的：</p><pre><code> &lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/      title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from &lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt; or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN  Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;</code></pre><p>作为比较，下面这个段落使用Markdown的行内链接风格编写：</p><pre><code>I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or[MSN](http://search.msn.com/ &quot;MSN Search&quot;).</code></pre><p>引用型链接的亮点并不在于它更容易书写，而在于引用型链接让你的文档可读性更好。看看上面的例子：使用引用型链接，段落本身仅81个字符；而使用行内链接的例子，是176个字符。最终输出的HTML则有234个字符。纯HTML中标记字符甚至超过了文本本身。</p><p>使用Markdown的引用型链接，源文档更接近于最终的浏览器输出效果。再加上Markdown允许将标记有关的元数据移到段落之外，你尽管添加链接，而不必担心打断文件的故事情节。</p><h4 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h4><p>Markdown使用星号(<code>*</code>)和下划线(<code>_</code>)作为表示强调。用一个 <code>*</code>或 <code>_</code> 包裹的文本会使用 HTML &lt;<code>em</code>&gt; 标签包裹; 用两个 <code>*</code> 或 <code>_</code>包裹的文本会使用HTML<code>&lt;strong&gt;</code> 标签包裹。如：</p><pre><code>*single asterisks*_single underscores_**double asterisks**__double underscores__</code></pre><p>将会输出为：</p><pre><code> &lt;em&gt;single asterisks&lt;/em&gt; &lt;em&gt;single underscores&lt;/em&gt; &lt;strong&gt;double asterisks&lt;/strong&gt; &lt;strong&gt;double underscores&lt;/strong&gt;</code></pre><p>你喜欢哪一种风格就用哪一种，唯一的限制就是起始字符与关闭字符必须一致。</p><p>强调符号可用于一个单词的一部分：</p><pre><code>un*frigging*believable</code></pre><p>不过如果你用空格包裹单独的 <code>*</code> 或 <code>_</code>，它们就失去了强调的含义，而成为字面上的星号或下划线。</p><p>如果不想让Markdown解释这两个元字符，就转义它：</p><pre><code>\*this text is surrounded by literal asterisks\*</code></pre><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>要在行内表示部分代码，用反引号( ` )包住它。与预格式代码块不同和，行内代码用于段落之内。例如：</p><pre><code>Use the `printf()` function.</code></pre><p>会生成：</p><pre><code> &lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;</code></pre><p>要在一个行内代码中使用反引号（`）本身，用多个反引号作为定界符包住它：</p><pre><code>``There is a literal backtick (`) here.``</code></pre><p>这样就会得到：</p><pre><code> &lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;</code></pre><p>包住行内代码的反引号定界符可以包括空格－－即在起始反引号之后，结束反引号之前可以有一个空格。这使得我们能够在行内代码的开始或结束处使用反引号：</p><pre><code>A single backtick in a code span: `` ` ``A backtick-delimited string in a code span: `` `foo` ``</code></pre><p>会生成：</p><pre><code> &lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt; &lt;p&gt;A backtick-delimited string in a code span:   &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;</code></pre><p>在行内代码中，&amp;和&lt;和&gt;会自动编码为HTML实体，以方便包含HTML标签。Markdown会把下面这行：</p><pre><code>Please don&#39;t use any `&lt;blink&gt;` tags.</code></pre><p>转换为：</p><pre><code> &lt;p&gt;Please don&#39;t use any &lt;code&gt;&lt;blink&gt;&lt;/code&gt; tags.&lt;/p&gt;</code></pre><p>你也可以这样写：</p><pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.</code></pre><p>会得到：</p><pre><code> &lt;p&gt;&lt;code&gt;&amp;#8212;&lt;/code&gt; is the decimal-encoded   equivalent of &lt;code&gt;&amp;mdash;&lt;/code&gt;.&lt;/p&gt;</code></pre><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>必须承认，要以“自然的”语法把一个图片放到一个纯文本文档之中，确实是一个挑战。</p><p>Markdown使用了类似链接语法来表示图片，同样有两种风格：行内图片和引用图片。</p><p>行内图片语法示例：</p><pre><code> ![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</code></pre><p>即：</p><ul><li>一个感叹号<code>!</code>开头；</li><li>其后紧跟一对中括号，中括号内存放图片的<code>alt</code>属性；</li><li>其后紧跟一对小括号，小括号内存放图片的URL或路径，及可选的用双引号或单引号或小括号括起来的图片<code>title</code></li></ul><p>引用图片语法如下：</p><pre><code> ![Alt text][id]</code></pre><p>这里 “id” 是图片引用标识。图片引用定义的语法与链接定义完全相同：</p><pre><code> [id] : url/to/image  &quot;Optional title attribute&quot;</code></pre><p>在写这篇文章时，Markdown还没有语法指定图片的大小，如果这一点对你特别重要，你可以直接使用<code>&lt;img&gt;</code>标签。</p><h3 id="杂七杂八"><a href="#杂七杂八" class="headerlink" title="杂七杂八"></a>杂七杂八</h3><h4 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h4><p>Markdown提供了一种快捷方式”自动地”定义链接和Email地址：直接用一对尖括号把URL或Email地址包住。这表示链接文本就是URL本身，Email文本就是Email本身。这样你就得到了一个可点击的链接，如：</p><pre><code>&lt;http://example.com/&gt;</code></pre><p>Markdown会将它转换为：</p><pre><code> &lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;</code></pre><p>自动Email地址工作方式相似，只有一点不同。Markdown自动的用一些十进制和十六进制数字表示你的Email，以防止遭遇垃圾邮件袭击。 例如：</p><pre><code>&lt;address@example.com&gt;</code></pre><p>会被转换为：</p><pre><code>&lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;</code></pre><p>浏览器会将它渲染为一个可点击的链接，并正确显示”<a href="mailto:address@example.com" target="_blank" rel="noopener">address@example.com</a>“。</p><p>(这种实体编码的小方法可以骗过一些收集邮件地址的机器人，不过它确实无法骗过所有的机器人。有总比没有强，聊胜于无。能阻止一点就阻止一点好了。)</p><h4 id="反斜线转义"><a href="#反斜线转义" class="headerlink" title="反斜线转义"></a>反斜线转义</h4><p>Markdown允许你使用反斜线转义那些Markdown元字符，让它们失去原有的“魔力”。举个例子，如果你确实想用星号包住一个词组（而不是想得到<code>&lt;em&gt;</code>标签），就可以在星号之前使用反斜线将其转义。即：</p><pre><code>\*literal asterisks\*</code></pre><p>Markdown中，以下字符支持使用反斜线转义：</p><pre><code>\   反斜线`   反引号*   星号_   下划线{}  大括号[]  中括号()  小括号#   井号+   加号-   减号（连字符）.   句点!   感叹号</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MarkDown 的目标是易读易写。&lt;/p&gt;
&lt;p&gt;Markdown 强调可读性高于一切。一份Markdown格式的文档应该能直接以纯文本方式发布，而不致一眼看过去满眼都是标签和格式化指令。Markdown的语法确实受了几种现有的text转HTML过滤器影响－－包括 &lt;code&gt;Setext&lt;/code&gt; , &lt;code&gt;atx&lt;/code&gt;,&lt;code&gt;Textile&lt;/code&gt;, &lt;code&gt;reStructuredText&lt;/code&gt;,&lt;code&gt;Grutatext&lt;/code&gt;, 和&lt;code&gt;EtText&lt;/code&gt; – 其中对Markdown语法影响最大的单一来源是纯文本的Email格式。&lt;/p&gt;
&lt;p&gt;为实现这一目标，Markdown的语法几乎全部由标点符号构成，这些标点符号都是精心挑选而来，尽量做到能望文生义。如星号括着一个单词（Markdown中表示强调）看上去就像 &lt;em&gt; 强调 &lt;/em&gt;。Markdown的列表看上去就像列表；Markdown的引文就象引文，和你使用email时的感觉一样。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://saboloh.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://saboloh.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Custom hive input format</title>
    <link href="http://saboloh.com/2016/07/02/custom-hive-input-format/"/>
    <id>http://saboloh.com/2016/07/02/custom-hive-input-format/</id>
    <published>2016-07-02T09:53:48.000Z</published>
    <updated>2018-03-29T07:14:11.458Z</updated>
    
    <content type="html"><![CDATA[<p>针对一定规则的HDFS文件，为了更好地和Hive表结合，定制HiveInputFormat</p><p><a href="https://github.com/jianle/UDHiveInputFormat" target="_blank" rel="noopener">查看GitHub项目</a>, 需要实现包含如下：</p><ul><li>FileInputFormat</li><li>RecordReader</li><li>SerDe</li><li>HiveStorageHandler</li></ul><a id="more"></a><h3 id="FileInputFormat"><a href="#FileInputFormat" class="headerlink" title="FileInputFormat"></a>FileInputFormat</h3><p>定义MyFileInputFormat 继承 FileInputFormat（旧接口 org.apache.hadoop.mapred）该类没有做任何其它操作，仅仅只是重写了<code>getRecordReader</code>方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHiveInputFormat</span> <span class="token keyword">extends</span> <span class="token class-name">FileInputFormat</span><span class="token operator">&lt;</span>Text<span class="token punctuation">,</span> BytesWritable<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> RecordReader<span class="token operator">&lt;</span>Text<span class="token punctuation">,</span> BytesWritable<span class="token operator">></span> <span class="token function">getRecordReader</span><span class="token punctuation">(</span>InputSplit split<span class="token punctuation">,</span> JobConf job<span class="token punctuation">,</span> Reporter reporter<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyHiveRecordReader</span><span class="token punctuation">(</span>split<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RecordReader-—-MapReduce-重要组件"><a href="#RecordReader-—-MapReduce-重要组件" class="headerlink" title="RecordReader — MapReduce 重要组件"></a>RecordReader — MapReduce 重要组件</h3><ul><li>以怎样的方式从分片中读取一条记录，每读取一条记录都会调用RecordReader类</li><li>默认的RecordReader是LineRecordReader，如TextInputFormat</li><li>LineRecordReader是用每行的偏移量作为map的key，每行的内容作为map的value</li><li>读入数据主要处理逻辑在<code>next</code>方法中</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHiveRecordReader</span> <span class="token keyword">implements</span> <span class="token class-name">RecordReader</span><span class="token operator">&lt;</span>Text<span class="token punctuation">,</span> BytesWritable<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Log LOG <span class="token operator">=</span> LogFactory<span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span>MyHiveRecordReader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> start<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> pos<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> end<span class="token punctuation">;</span>    <span class="token keyword">private</span> InputStream in<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyHiveRecordReader</span><span class="token punctuation">(</span>InputSplit genericSplit<span class="token punctuation">,</span> Configuration conf<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        FileSplit split <span class="token operator">=</span> <span class="token punctuation">(</span>FileSplit<span class="token punctuation">)</span> genericSplit<span class="token punctuation">;</span>        start <span class="token operator">=</span> split<span class="token punctuation">.</span><span class="token function">getStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        end <span class="token operator">=</span> start <span class="token operator">+</span> split<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Path file <span class="token operator">=</span> split<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileSystem fs <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getFileSystem</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>        FSDataInputStream fileIn <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        CompressionCodecFactory compressionCodecFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompressionCodecFactory</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> CompressionCodec codec <span class="token operator">=</span> compressionCodecFactory<span class="token punctuation">.</span><span class="token function">getCodec</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>codec <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"use conf compressioncodec."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            in <span class="token operator">=</span> codec<span class="token punctuation">.</span><span class="token function">createInputStream</span><span class="token punctuation">(</span>fileIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SnappyInputStream</span><span class="token punctuation">(</span>fileIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pos <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">next</span><span class="token punctuation">(</span>Text key<span class="token punctuation">,</span> BytesWritable value<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>header<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> bodyLength <span class="token operator">=</span> <span class="token function">bytesToInt</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>bodyLength<span class="token punctuation">]</span><span class="token punctuation">;</span>            in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bodyLength<span class="token punctuation">)</span><span class="token punctuation">;</span>            key<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bodyLength<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Text <span class="token function">createKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> BytesWritable <span class="token function">createValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BytesWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1.0f</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>pos <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>in <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// bytes 高位存储转int</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">bytesToInt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        val <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bits<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>                <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bits<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span>                <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bits<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span>                <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SerDe"><a href="#SerDe" class="headerlink" title="SerDe"></a>SerDe</h3><p>Hive的反序列化是对key/value反序列化成hive table的每个列的值。SerDe是Serialize/Deserilize的简称，目的是用于序列化和反序列化</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHiveSerDe</span> <span class="token keyword">implements</span> <span class="token class-name">SerDe</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> StructObjectInspector objectInspector<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> columnNames<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> row<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> numColumns<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>PrimitiveCategory<span class="token operator">></span> columnTypes<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOG <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>MyHiveSerDe<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span>Configuration conf<span class="token punctuation">,</span> Properties tbl<span class="token punctuation">)</span> <span class="token keyword">throws</span> SerDeException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Initializing WTableHiveSerDe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Get column names and types</span>        String columnNameProperty <span class="token operator">=</span> tbl<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>serdeConstants<span class="token punctuation">.</span>LIST_COLUMNS<span class="token punctuation">)</span><span class="token punctuation">;</span>        String columnTypeProperty <span class="token operator">=</span> tbl<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>serdeConstants<span class="token punctuation">.</span>LIST_COLUMN_TYPES<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// all table column names</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>columnNameProperty<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          columnNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          columnNames <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>columnNameProperty<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        numColumns <span class="token operator">=</span> columnNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> hiveColumnTypes <span class="token operator">=</span> columnTypeProperty<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// all column types</span>        List<span class="token operator">&lt;</span>ObjectInspector<span class="token operator">></span> fieldInspectors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>ObjectInspector<span class="token operator">></span><span class="token punctuation">(</span>numColumns<span class="token punctuation">)</span><span class="token punctuation">;</span>        columnTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>PrimitiveCategory<span class="token operator">></span><span class="token punctuation">(</span>numColumns<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numColumns<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String typeName <span class="token operator">=</span> hiveColumnTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            PrimitiveCategory type <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                type <span class="token operator">=</span> PrimitiveObjectInspectorUtils<span class="token punctuation">.</span><span class="token function">getTypeEntryFromTypeName</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">.</span>primitiveCategory<span class="token punctuation">;</span>                columnTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SerDeException</span><span class="token punctuation">(</span>typeName <span class="token operator">+</span> <span class="token string">" is not supported!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            fieldInspectors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>PrimitiveObjectInspectorFactory<span class="token punctuation">.</span><span class="token function">getPrimitiveJavaObjectInspector</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"columns: {}, {}"</span><span class="token punctuation">,</span> columnNameProperty<span class="token punctuation">,</span> columnNames<span class="token punctuation">)</span><span class="token punctuation">;</span>        LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"types: {}, {} "</span><span class="token punctuation">,</span> columnTypeProperty<span class="token punctuation">,</span> columnTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> <span class="token punctuation">(</span>columnNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> columnTypes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span>numColumns<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInspector <span class="token operator">=</span> ObjectInspectorFactory<span class="token punctuation">.</span><span class="token function">getStandardStructObjectInspector</span><span class="token punctuation">(</span>columnNames<span class="token punctuation">,</span> fieldInspectors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">deserialize</span><span class="token punctuation">(</span>Writable blob<span class="token punctuation">)</span> <span class="token keyword">throws</span> SerDeException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        BytesWritable writable <span class="token operator">=</span> <span class="token punctuation">(</span>BytesWritable<span class="token punctuation">)</span> blob<span class="token punctuation">;</span>        CommonDump commonDump <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            commonDump <span class="token operator">=</span> CommonDump<span class="token punctuation">.</span><span class="token function">parseFrom</span><span class="token punctuation">(</span>writable<span class="token punctuation">.</span><span class="token function">copyBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO: handle exception</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Map<span class="token operator">&lt;</span>FieldDescriptor<span class="token punctuation">,</span> Object<span class="token operator">></span> _fields <span class="token operator">=</span> commonDump<span class="token punctuation">.</span><span class="token function">getAllFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> fields <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span>_fields<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        row<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>FieldDescriptor<span class="token operator">></span> fieldKeys <span class="token operator">=</span> _fields<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fieldKeys<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            FieldDescriptor fieldKey <span class="token operator">=</span> fieldKeys<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fields<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>fieldKey<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _fields<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fieldKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numColumns<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String colName <span class="token operator">=</span> columnNames<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            row<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">optVal</span><span class="token punctuation">(</span>columnTypes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> fields<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>colName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> row<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> ObjectInspector <span class="token function">getObjectInspector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SerDeException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> objectInspector<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> SerDeStats <span class="token function">getSerDeStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SerDeStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Writable</span><span class="token operator">></span> <span class="token function">getSerializedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> MyWritable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Writable <span class="token function">serialize</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> ObjectInspector objInspector<span class="token punctuation">)</span> <span class="token keyword">throws</span> SerDeException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SerDeException</span><span class="token punctuation">(</span><span class="token string">"Serialize to db does not supported. Pull-request is appreciated."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object <span class="token function">optVal</span><span class="token punctuation">(</span>PrimitiveCategory pcat<span class="token punctuation">,</span> Object val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>pcat<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> INT<span class="token operator">:</span>            <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> LONG<span class="token operator">:</span>            <span class="token keyword">return</span> Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> BINARY<span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ByteString<span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> STRING<span class="token operator">:</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ByteString<span class="token punctuation">)</span> val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HiveStorageHandler"><a href="#HiveStorageHandler" class="headerlink" title="HiveStorageHandler"></a>HiveStorageHandler</h3><p>使用HiveStorageHandler 整合InputFormat、OutputFormat、SerDe</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStorageHandler</span> <span class="token keyword">implements</span> <span class="token class-name">HiveStorageHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Configuration conf<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setConf</span><span class="token punctuation">(</span>Configuration conf<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>conf <span class="token operator">=</span> conf<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Configuration <span class="token function">getConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"rawtypes"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">InputFormat</span><span class="token operator">></span> <span class="token function">getInputFormatClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> MyHiveInputFormat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"rawtypes"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">OutputFormat</span><span class="token operator">></span> <span class="token function">getOutputFormatClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> HiveIgnoreKeyTextOutputFormat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">SerDe</span><span class="token operator">></span> <span class="token function">getSerDeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> MyHiveSerDe<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> HiveMetaHook <span class="token function">getMetaHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> HiveAuthorizationProvider <span class="token function">getAuthorizationProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> HiveException <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureInputJobProperties</span><span class="token punctuation">(</span>TableDesc tableDesc<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> jobProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureOutputJobProperties</span><span class="token punctuation">(</span>TableDesc tableDesc<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> jobProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureTableJobProperties</span><span class="token punctuation">(</span>TableDesc tableDesc<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> jobProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureJobConf</span><span class="token punctuation">(</span>TableDesc tableDesc<span class="token punctuation">,</span> JobConf jobConf<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>定制HiveInputFormat可灵活让Hive与HDFS文件结合， 重点掌握<code>FileInputFormat</code>，如果考虑到小文件，可使用<code>CombineFileInputFormat</code>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;针对一定规则的HDFS文件，为了更好地和Hive表结合，定制HiveInputFormat&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jianle/UDHiveInputFormat&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;查看GitHub项目&lt;/a&gt;, 需要实现包含如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FileInputFormat&lt;/li&gt;
&lt;li&gt;RecordReader&lt;/li&gt;
&lt;li&gt;SerDe&lt;/li&gt;
&lt;li&gt;HiveStorageHandler&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://saboloh.com/categories/BigData/"/>
    
    
      <category term="java" scheme="http://saboloh.com/tags/java/"/>
    
      <category term="hive" scheme="http://saboloh.com/tags/hive/"/>
    
  </entry>
  
  <entry>
    <title>初试 Protocol Buffers</title>
    <link href="http://saboloh.com/2016/06/29/use-protocol-buffers/"/>
    <id>http://saboloh.com/2016/06/29/use-protocol-buffers/</id>
    <published>2016-06-29T14:35:36.000Z</published>
    <updated>2018-03-29T07:14:11.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Protocol-Buffers"><a href="#Protocol-Buffers" class="headerlink" title="Protocol Buffers"></a><a href="https://developers.google.com/protocol-buffers/docs/javatutorial" target="_blank" rel="noopener">Protocol Buffers</a></h2><p>现有个<a href="http://google.github.io/snappy/" target="_blank" rel="noopener">snappy</a>压缩文件，解压后文件存储格式为：</p><pre><code>[4 byte size][protobuf][4 byte size][protobuf]...</code></pre><p>4个字节（高位存储）存储的是后面<code>protobuf</code>序列化的长度，需对文件进行解析</p><a id="more"></a><ul><li>install protoc</li></ul><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">wget</span> https://github.com/google/protobuf/releases/download/v2.6.1/protobuf-2.6.1.tar.gz$ <span class="token function">tar</span> -zxvf protobuf-2.6.1.tar.gz$ <span class="token function">cd</span> protobuf-2.6.1$ ./configure$ <span class="token function">make</span> <span class="token operator">&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>.protoc</code>文件内容如下：</p><pre class="line-numbers language-java"><code class="language-java">syntax <span class="token operator">=</span> <span class="token string">"proto2"</span><span class="token punctuation">;</span><span class="token keyword">package</span> tutorial<span class="token punctuation">;</span>option java_package <span class="token operator">=</span> <span class="token string">"com.example.tutorial"</span><span class="token punctuation">;</span>option java_outer_classname <span class="token operator">=</span> <span class="token string">"CommonDumpOuter"</span><span class="token punctuation">;</span>message CommonDump <span class="token punctuation">{</span>  optional uint32 tableId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  optional uint32 colSpace <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  optional bytes rowKey <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  optional bytes colKey <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  optional bytes value <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  optional int64 score <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>  optional uint32 ttl <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通过protoc编译成<code>.java</code>文件</li></ul><pre><code>$ protoc --java_out=. commonDump.proto</code></pre><ul><li>通过java解析文件</li></ul><p>a. 首先要知道如何将高位的4字节长度转换为int</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">bytesToInt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span>    value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>            <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span>            <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span>            <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>b. 然后使用SnappyInputStream读入file</p><pre class="line-numbers language-java"><code class="language-java">InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/tmp/path/dump_file.dat.sp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SnappyInputStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用于读入长度</span>CommonDump commonDump <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// protpbuf</span><span class="token keyword">long</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录数</span><span class="token keyword">while</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>header<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> bodylength <span class="token operator">=</span> <span class="token function">bytesToInt</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>bodylength<span class="token punctuation">]</span><span class="token punctuation">;</span>    in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bodylength<span class="token punctuation">)</span><span class="token punctuation">;</span>    length<span class="token operator">++</span><span class="token punctuation">;</span>    commonDump <span class="token operator">=</span> CommonDump<span class="token punctuation">.</span><span class="token function">parseFrom</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 接下来可以打印数据看看</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ol><li>主要需要理解文件的存储格式，才能正确的将<code>protobuf</code>序列化文件反序列化。其次是4字节的高位存储，如何将高位存储的byte转换成int</li><li>在文件读入的时候，使用snappy输入流</li><li>解析是一部分，后续如何结合hive，定义表格式化读取文件展示才是大的挑战</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Protocol-Buffers&quot;&gt;&lt;a href=&quot;#Protocol-Buffers&quot; class=&quot;headerlink&quot; title=&quot;Protocol Buffers&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/javatutorial&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Protocol Buffers&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;现有个&lt;a href=&quot;http://google.github.io/snappy/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;snappy&lt;/a&gt;压缩文件，解压后文件存储格式为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[4 byte size][protobuf][4 byte size][protobuf]...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4个字节（高位存储）存储的是后面&lt;code&gt;protobuf&lt;/code&gt;序列化的长度，需对文件进行解析&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://saboloh.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://saboloh.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hive常用函数</title>
    <link href="http://saboloh.com/2016/06/17/hive-frequently-udf/"/>
    <id>http://saboloh.com/2016/06/17/hive-frequently-udf/</id>
    <published>2016-06-17T02:24:18.000Z</published>
    <updated>2018-03-29T07:14:11.458Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF#LanguageManualUDF-get_json_object" target="_blank" rel="noopener">get_json_object</a></li><li>rank  </li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> <span class="token keyword">key</span> <span class="token keyword">order</span> <span class="token keyword">by</span> created <span class="token keyword">desc</span><span class="token punctuation">)</span> <span class="token keyword">as</span> rk<span class="token keyword">FROM</span>   table_name <span class="token number">a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><a id="more"></a><ul><li>regexp_extract(string subject, string pattern, int index)</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> regexp_extract<span class="token punctuation">(</span>'https:<span class="token comment" spellcheck="true">//cwiki.apache.org/confluence/display', 'org/([a-z]+)/', 1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>regexp_replace(string INITIAL_STRING, string PATTERN, string REPLACEMENT)</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> regexp_replace<span class="token punctuation">(</span><span class="token string">'hive site:xxxx'</span><span class="token punctuation">,</span> <span class="token string">'^[a-z]+'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>current_date</li><li>date_add(string startdate, int days)</li><li>date_sub(string startdate, int days)</li><li>datediff(string enddate, string startdate)</li><li>to_date(string timestamp)</li><li>from_unixtime(string date[, string format]) </li><li>unix_timestamp(string date)</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> from_unixtime<span class="token punctuation">(</span>unix_timestamp<span class="token punctuation">(</span><span class="token string">'2016-09-07 07:07:13.02'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'HH'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//02</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>regexp_extract(string str, string regexp, int idx)</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> regexp_extract<span class="token punctuation">(</span><span class="token string">'2016-09-07 02:07:13.02'</span><span class="token punctuation">,</span> <span class="token string">' ([0-9]+):'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//02</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF#LanguageManualUDF-get_json_object&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;get_json_object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;rank  &lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;SELECT a.*, rank() over(partition by key order by created desc) as rk
FROM   table_name a
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://saboloh.com/categories/BigData/"/>
    
    
      <category term="hive" scheme="http://saboloh.com/tags/hive/"/>
    
  </entry>
  
  <entry>
    <title>Git学习指南（一）— 入门</title>
    <link href="http://saboloh.com/2016/06/15/git-tutorial-getting-start/"/>
    <id>http://saboloh.com/2016/06/15/git-tutorial-getting-start/</id>
    <published>2016-06-15T05:37:22.000Z</published>
    <updated>2018-03-29T07:14:11.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在Windows下安装和配置Git"><a href="#在Windows下安装和配置Git" class="headerlink" title="在Windows下安装和配置Git"></a>在Windows下安装和配置Git</h2><ul><li><p>前往<a href="http://git-scm.com/" target="_blank" rel="noopener">Git官网</a>，下载安装包并安装（建议安装至D:\Git目录），从开始菜单打开Git Bash：</p><a id="more"></a><p><img src="/img/git/git-bash.png" alt="Git Bash"></p></li><li><p>增加中文支持。向/etc/git-completion.bash文件追加以下内容：</p></li></ul><pre><code>alias ls=&#39;ls --show-control-chars --color=auto&#39;alias gl=&#39;git log --graph --pretty=format:&#39;\&#39;&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39;\&#39;&#39; --abbrev-commit --date=relative&#39;</code></pre><p>并向/etc/gitconfig文件追加：</p><pre><code>[gui]encoding = utf-8</code></pre><p>重新启动Git Bash程序。</p><ul><li>配置Git用户名和邮箱，会在提交信息中显示。</li></ul><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.name <span class="token string">"张三"</span>$ <span class="token function">git</span> config --global user.email <span class="token string">"sanzhang@xx.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>生成SSH公私钥对，使用默认目录，建议不要设置密码：</li></ul><pre class="line-numbers language-bash"><code class="language-bash">$ ssh-keygen -t rsa$ <span class="token function">chmod</span> 700 ~/.ssh$ <span class="token function">chmod</span> 400 ~/.ssh/id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/img/git/sshkey.png" alt="ssh-keygen"></p><p>复制~/.ssh/id_rsa.pub公钥文件的内容（可以用资源管理器到C:\Documents and Settings\用户名.ssh\中查看），使用域账号登录<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>，进入<a href="https://github.com/settings/keys" target="_blank" rel="noopener">Settings</a>，新增公钥并粘贴刚才复制的内容。</p><p><img src="/img/git/configkey.png" alt=""></p><h2 id="在Linux-ubuntu-下安装和配置Git"><a href="#在Linux-ubuntu-下安装和配置Git" class="headerlink" title="在Linux(ubuntu)下安装和配置Git"></a>在Linux(ubuntu)下安装和配置Git</h2><ul><li>使用<code>sudo apt-get install git</code>安装git</li><li>配置环境变量 <code>vim .bashrc</code></li></ul><pre><code>alias gl=&#39;git log --graph --pretty=format:&#39;\&#39;&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39;\&#39;&#39; --abbrev-commit --date=relative&#39;</code></pre><ul><li>其余配置同上</li></ul><h3 id="安装TortoiseGit（可选）"><a href="#安装TortoiseGit（可选）" class="headerlink" title="安装TortoiseGit（可选）"></a>安装TortoiseGit（可选）</h3><ul><li>前往<a href="https://code.google.com/p/tortoisegit/wiki/Download" target="_blank" rel="noopener">官网</a>下载安装包并安装（建议安装至D:\TortoiseGit目录）；</li><li>右键进入TortoiseGit - Settings界面，点击Network，设置SSH client为D:\Git\bin\ssh.exe</li><li>使用邮件菜单的Clone就能将远程仓库下载到本地了，并能使用Pull来更新：</li></ul><h3 id="安装EGit"><a href="#安装EGit" class="headerlink" title="安装EGit"></a>安装EGit</h3><p><strong>注：最新版的Eclipse已经包含了EGit插件，下面内容仅针对老版本Helios</strong></p><ul><li>打开Eclipse，点击Help - Install New Software</li><li>在地址栏中输入 <a href="http://download.eclipse.org/egit/updates-2.1" target="_blank" rel="noopener">http://download.eclipse.org/egit/updates-2.1</a> ，回车</li><li>勾选Eclipse Git Team Provider - Eclipse EGit一项即可，安装后会重启Eclipse</li><li>导入仓库中的项目，右击选择Team - Share Project，使用Git</li><li>然后就能直接在Eclipse中进行各种Git操作了</li></ul><h2 id="新建Git仓库"><a href="#新建Git仓库" class="headerlink" title="新建Git仓库"></a>新建Git仓库</h2><h3 id="新建本地仓库"><a href="#新建本地仓库" class="headerlink" title="新建本地仓库"></a>新建本地仓库</h3><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cd</span> /path/to/your-new-repo$ <span class="token function">git</span> init$ <span class="token function">git</span> add -A$ <span class="token function">git</span> commit -m <span class="token string">'init'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在github上新建远程仓库"><a href="#在github上新建远程仓库" class="headerlink" title="在github上新建远程仓库"></a>在github上新建远程仓库</h3><p><a href="https://github.com/" target="_blank" rel="noopener">github</a>中每个用户都可以在自己名下建立任意多个仓库。登录网站后，点击右上角的“+”号，选择“New repository”，输入仓库名称即可。</p><h3 id="推送至远程仓库"><a href="#推送至远程仓库" class="headerlink" title="推送至远程仓库"></a>推送至远程仓库</h3><h4 id="1-对于新建的仓库"><a href="#1-对于新建的仓库" class="headerlink" title="1. 对于新建的仓库"></a>1. 对于新建的仓库</h4><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> remote add origin git@github.com:yourname/your-new-repo.git$ <span class="token function">git</span> push origin master$ <span class="token function">git</span> branch --set-upstream master origin/master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这三条语句的作用分别是：</p><ol><li>在本地仓库的配置文件中新增一个远程仓库地址，名称为origin。</li><li>将本地仓库的master分支推送到线上。</li><li>将本地仓库的master分支和远程仓库的master分支关联起来，这样就能直接运行git pull来拉取远程的改动。</li></ol><h4 id="2-对于从其他仓库克隆过来的项目"><a href="#2-对于从其他仓库克隆过来的项目" class="headerlink" title="2. 对于从其他仓库克隆过来的项目"></a>2. 对于从其他仓库克隆过来的项目</h4><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> remote remove origin$ <span class="token function">git</span> remote add origin <span class="token punctuation">..</span>. 同上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然，你也可以使用新的远程仓库名称，这样可以让你的本地仓库和多个远程仓库相关联：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> remote add newname git@github.com:yourname/your-new-repo.git$ <span class="token function">git</span> push newname master$ <span class="token function">git</span> branch --set-upstream master newname/master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-直接克隆新建的远程仓库"><a href="#3-直接克隆新建的远程仓库" class="headerlink" title="3. 直接克隆新建的远程仓库"></a>3. 直接克隆新建的远程仓库</h4><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> clone git@github.com:yourname/your-new-repo.git$ <span class="token function">cd</span> your-new-repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果你没有先在本地建立仓库，可以直接克隆新建好的远程仓库，这时origin地址、master分支的关联都会自动配置。这种情况用的比较少。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在Windows下安装和配置Git&quot;&gt;&lt;a href=&quot;#在Windows下安装和配置Git&quot; class=&quot;headerlink&quot; title=&quot;在Windows下安装和配置Git&quot;&gt;&lt;/a&gt;在Windows下安装和配置Git&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前往&lt;a href=&quot;http://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git官网&lt;/a&gt;，下载安装包并安装（建议安装至D:\Git目录），从开始菜单打开Git Bash：&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://saboloh.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://saboloh.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hive使用遇到的一些问题</title>
    <link href="http://saboloh.com/2016/04/28/hive-issue/"/>
    <id>http://saboloh.com/2016/04/28/hive-issue/</id>
    <published>2016-04-28T07:28:33.000Z</published>
    <updated>2018-03-29T07:14:11.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="记录使用ORC所遇到的一些问题"><a href="#记录使用ORC所遇到的一些问题" class="headerlink" title="记录使用ORC所遇到的一些问题"></a>记录使用<code>ORC</code>所遇到的一些问题</h2><h3 id="查询报错"><a href="#查询报错" class="headerlink" title="查询报错"></a>查询报错</h3><p>由于hiveserver2中默认设置了“矢量化执行器” enable为true， 这导致使用orc存储的表使用上了这个参数，走了“矢量化执行器”导致错误，其中遇到的错误有：</p><a id="more"></a><ul><li>数组越界  </li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>serv_dt<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>broker_id<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>log_time<span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>log_time       <span class="token punctuation">,</span>unix_timestamp<span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>log_time<span class="token punctuation">)</span><span class="token operator">-</span>unix_timestamp<span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">.</span>log_time<span class="token punctuation">)</span> <span class="token keyword">as</span> time_diff<span class="token keyword">from</span>   <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span>        <span class="token keyword">from</span>   dw_db_temp<span class="token punctuation">.</span>GL_20160422_noqiang_page_broker_action_rank        <span class="token keyword">where</span>  page_id<span class="token operator">=</span><span class="token string">'1-150000'</span>       <span class="token punctuation">)</span> <span class="token number">a</span><span class="token keyword">join</span>   dw_db_temp<span class="token punctuation">.</span>GL_20160422_noqiang_page_broker_action_rank <span class="token number">b</span>  <span class="token keyword">on</span>   <span class="token number">a</span><span class="token punctuation">.</span>con<span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span>con <span class="token operator">and</span> <span class="token number">b</span><span class="token punctuation">.</span>rk<span class="token operator">=</span><span class="token number">a</span><span class="token punctuation">.</span>rk<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>空指向  </li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> dw_db_temp<span class="token punctuation">.</span>gh_esf_tmp1<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> dw_db_temp<span class="token punctuation">.</span>gh_esf_tmp1<span class="token keyword">as</span><span class="token keyword">select</span> cal_dt       <span class="token punctuation">,</span>city_id       <span class="token punctuation">,</span>region_name       <span class="token punctuation">,</span>subregion_id<span class="token punctuation">,</span> subregion_name       <span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> comm_id<span class="token punctuation">)</span> <span class="token keyword">as</span> pm_comm       <span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">case</span> <span class="token keyword">when</span> is_comm_repeat<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">then</span> comm_id <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pm_comm_repeat<span class="token keyword">from</span>   dw_db_temp<span class="token punctuation">.</span>gh_esf_pm_broker_last<span class="token keyword">where</span>  subregion_name <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'长阳'</span><span class="token punctuation">,</span><span class="token string">'良乡'</span><span class="token punctuation">,</span><span class="token string">'窦店'</span><span class="token punctuation">,</span><span class="token string">'梨园'</span><span class="token punctuation">,</span><span class="token string">'通州北苑'</span><span class="token punctuation">,</span><span class="token string">'武夷花园'</span><span class="token punctuation">,</span><span class="token string">'中央别墅区'</span><span class="token punctuation">,</span><span class="token string">'通州北苑'</span><span class="token punctuation">,</span><span class="token string">'华南'</span><span class="token punctuation">,</span><span class="token string">'泉水'</span><span class="token punctuation">,</span><span class="token string">'泡崖'</span><span class="token punctuation">,</span><span class="token string">'机场新区'</span><span class="token punctuation">,</span><span class="token string">'西山水库'</span><span class="token punctuation">,</span><span class="token string">'马坡'</span><span class="token punctuation">)</span><span class="token keyword">group</span> <span class="token keyword">by</span> cal_dt<span class="token punctuation">,</span>city_id<span class="token punctuation">,</span>region_name<span class="token punctuation">,</span>subregion_id<span class="token punctuation">,</span>subregion_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决办法，将<code>矢量化执行器</code>关闭即可：  </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>vectorized<span class="token punctuation">.</span>execution<span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>vectorized<span class="token punctuation">.</span>execution<span class="token punctuation">.</span>reduce<span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="查询无结果"><a href="#查询无结果" class="headerlink" title="查询无结果"></a>查询无结果</h3><p>hive表存成<code>ORC</code>格式，自关联出现无结果现象并且无任何错误，异常SQL如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token operator">*</span>       <span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>call_7<span class="token keyword">FROM</span>   <span class="token punctuation">(</span><span class="token keyword">SELECT</span> comm_id               <span class="token punctuation">,</span>call_30               <span class="token punctuation">,</span>call_success_30               <span class="token punctuation">,</span>call_nonunique_30        <span class="token keyword">FROM</span>   dw_db_temp<span class="token punctuation">.</span>carrie_mr_call_jt_160428_3        <span class="token keyword">WHERE</span>  <span class="token keyword">type</span><span class="token operator">=</span><span class="token number">3</span>       <span class="token punctuation">)</span> <span class="token number">a</span><span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span>       <span class="token punctuation">(</span><span class="token keyword">SELECT</span> comm_id               <span class="token punctuation">,</span>call_30               <span class="token punctuation">,</span>call_success_30               <span class="token punctuation">,</span>call_nonunique_30        <span class="token keyword">FROM</span>   dw_db_temp<span class="token punctuation">.</span>carrie_mr_call_jt_160428_3        <span class="token keyword">WHERE</span>  <span class="token keyword">type</span><span class="token operator">=</span><span class="token number">2</span>       <span class="token punctuation">)</span> <span class="token number">b</span>   <span class="token keyword">ON</span>  <span class="token number">a</span><span class="token punctuation">.</span>comm_id<span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span>comm_id<span class="token keyword">LIMIT</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其导致原因是因为再hiveserver2上默认开启了参数<code>hive.optimize.index.filter</code>为true，解决办法：</p><ul><li>将表格式存成textfile</li><li>关闭hive.optimize.index.filter</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">optimize</span><span class="token punctuation">.</span><span class="token keyword">index</span><span class="token punctuation">.</span>filter<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="写表报错"><a href="#写表报错" class="headerlink" title="写表报错"></a><a href="https://issues.cloudera.org/browse/DISTRO-756" target="_blank" rel="noopener">写表报错</a></h3><p>当默认使用orc写表时，where子句中出现 where col is null 将报  java.lang.IllegalArgumentException: Bad primitive category VOID 异常</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> dw_db_temp<span class="token punctuation">.</span>carrie_call_comm_160428_01<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> dw_db_temp<span class="token punctuation">.</span>carrie_call_comm_160428_01<span class="token keyword">as</span><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>pcall_id<span class="token keyword">from</span>   <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dw_db<span class="token punctuation">.</span>dw_phone_call_logs        <span class="token keyword">where</span> created_dt<span class="token operator">>=</span>date_sub<span class="token punctuation">(</span>${dealDate}<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>       <span class="token punctuation">)</span> <span class="token number">a</span><span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span>       <span class="token punctuation">(</span><span class="token keyword">select</span> date_index<span class="token punctuation">,</span>phonenum<span class="token punctuation">,</span>loupan_id<span class="token punctuation">,</span>pcall_id        <span class="token keyword">from</span>   dw_db<span class="token punctuation">.</span>dw_nh_adm_transfer_log        <span class="token keyword">where</span>  date_index<span class="token operator">>=</span>date_sub<span class="token punctuation">(</span>${dealDate}<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>          <span class="token operator">and</span>  flag<span class="token operator">=</span><span class="token number">2</span>          <span class="token operator">and</span>  <span class="token keyword">type</span><span class="token operator">></span><span class="token number">1</span>       <span class="token punctuation">)</span><span class="token number">b</span>   <span class="token keyword">on</span>  <span class="token number">a</span><span class="token punctuation">.</span>created_dt<span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span>date_index <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span>pcall_id<span class="token keyword">where</span>  <span class="token number">b</span><span class="token punctuation">.</span>pcall_id <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决办法： 将hive表建成textfile即可   </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> table_name stored <span class="token keyword">as</span> textfile<span class="token keyword">as</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="MapJoin-字段类型不一致"><a href="#MapJoin-字段类型不一致" class="headerlink" title="MapJoin 字段类型不一致"></a>MapJoin 字段类型不一致</h2><p>主要是 string 和 int 的列做 join</p><p>日志里面看 job 长期 hang 在以下位置</p><p>查看你 map 的时候，map 的状态为 FAILED， 查看 map 的日志，最后有以下类似的信息：</p><pre><code>2015-12-11 04:26:06,119 INFO [main] org.apache.hadoop.hive.ql.exec.MapJoinOperator: Load back 1 hashtable file from tmp file uri:file:/hadoop3/yarn/nm/usercache/hadoop/appcache/application_1449142557781_73597/container_e11_1449142557781_73597_01_000002/Stage-9.tar.gz/MapJoin-mapfile11--.hashtable</code></pre><p><em>解决方法</em> 保证用于 join 的列一致，cast 或者直接修改表的结构</p><p>如果还不能解决，先手动禁用掉 MapJoin</p><pre><code>set hive.auto.convert.join=false;</code></pre><h2 id="hive-使用的新的序列化方法后偶尔出现的问题"><a href="#hive-使用的新的序列化方法后偶尔出现的问题" class="headerlink" title="hive 使用的新的序列化方法后偶尔出现的问题"></a>hive 使用的新的序列化方法后偶尔出现的问题</h2><p>这种问题一般是代码里面设置了 <code>set hive.exec.parallel=true;</code> 运行的时候，偶尔会报以下错误，重跑有可能成功：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token function">aliasToWork</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span>plan<span class="token punctuation">.</span>MapWork<span class="token punctuation">)</span>     at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>com<span class="token punctuation">.</span>esotericsoftware<span class="token punctuation">.</span>kryo<span class="token punctuation">.</span>util<span class="token punctuation">.</span>DefaultClassResolver<span class="token punctuation">.</span><span class="token function">readClass</span><span class="token punctuation">(</span>DefaultClassResolver<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">119</span><span class="token punctuation">)</span>     at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>com<span class="token punctuation">.</span>esotericsoftware<span class="token punctuation">.</span>kryo<span class="token punctuation">.</span>Kryo<span class="token punctuation">.</span><span class="token function">readClass</span><span class="token punctuation">(</span>Kryo<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">656</span><span class="token punctuation">)</span>     at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>com<span class="token punctuation">.</span>esotericsoftware<span class="token punctuation">.</span>kryo<span class="token punctuation">.</span>serializers<span class="token punctuation">.</span>ObjectField<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>ObjectField<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">99</span><span class="token punctuation">)</span>     at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>com<span class="token punctuation">.</span>esotericsoftware<span class="token punctuation">.</span>kryo<span class="token punctuation">.</span>serializers<span class="token punctuation">.</span>FieldSerializer<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>FieldSerializer<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">507</span><span class="token punctuation">)</span>     at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>com<span class="token punctuation">.</span>esotericsoftware<span class="token punctuation">.</span>kryo<span class="token punctuation">.</span>Kryo<span class="token punctuation">.</span><span class="token function">readClassAndObject</span><span class="token punctuation">(</span>Kryo<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">776</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果有这种情况，解决的方法是先更换序列化的方法，即加入：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">plan</span><span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>format<span class="token operator">=</span>javaXML<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="WHERE-条件int限制值超过Integer-MAX-VALUE值导致出错"><a href="#WHERE-条件int限制值超过Integer-MAX-VALUE值导致出错" class="headerlink" title="WHERE 条件int限制值超过Integer.MAX_VALUE值导致出错"></a>WHERE 条件int限制值超过Integer.MAX_VALUE值导致出错</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span>   dual<span class="token keyword">where</span>  id<span class="token operator">=</span><span class="token number">2183402559</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>id为int类型，where里面id=’2183402559’ 限制值超过 Integer.MAX_VALUE=2147483647 导致下面报错</p><pre class="line-numbers language-java"><code class="language-java">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>service<span class="token punctuation">.</span>cli<span class="token punctuation">.</span>HiveSQLException<span class="token operator">:</span> Error <span class="token keyword">while</span> compiling statement<span class="token operator">:</span> FAILED<span class="token operator">:</span> SemanticException <span class="token punctuation">[</span>Error <span class="token number">10041</span><span class="token punctuation">]</span><span class="token operator">:</span> No partition predicate found <span class="token keyword">for</span> Alias “a” Table <span class="token operator">></span> “dw_ganji_house_source_officetrade”<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;记录使用ORC所遇到的一些问题&quot;&gt;&lt;a href=&quot;#记录使用ORC所遇到的一些问题&quot; class=&quot;headerlink&quot; title=&quot;记录使用ORC所遇到的一些问题&quot;&gt;&lt;/a&gt;记录使用&lt;code&gt;ORC&lt;/code&gt;所遇到的一些问题&lt;/h2&gt;&lt;h3 id=&quot;查询报错&quot;&gt;&lt;a href=&quot;#查询报错&quot; class=&quot;headerlink&quot; title=&quot;查询报错&quot;&gt;&lt;/a&gt;查询报错&lt;/h3&gt;&lt;p&gt;由于hiveserver2中默认设置了“矢量化执行器” enable为true， 这导致使用orc存储的表使用上了这个参数，走了“矢量化执行器”导致错误，其中遇到的错误有：&lt;/p&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://saboloh.com/categories/BigData/"/>
    
    
      <category term="hive" scheme="http://saboloh.com/tags/hive/"/>
    
      <category term="Hive" scheme="http://saboloh.com/tags/Hive/"/>
    
      <category term="ORC" scheme="http://saboloh.com/tags/ORC/"/>
    
      <category term="issue" scheme="http://saboloh.com/tags/issue/"/>
    
  </entry>
  
  <entry>
    <title>如何使用hexo+github搭建博客</title>
    <link href="http://saboloh.com/2016/04/26/how-to-use-hexo-setup-blog/"/>
    <id>http://saboloh.com/2016/04/26/how-to-use-hexo-setup-blog/</id>
    <published>2016-04-26T12:34:16.000Z</published>
    <updated>2018-03-29T07:14:11.458Z</updated>
    
    <content type="html"><![CDATA[<p>本文详细描述如何在Linux（本人ubuntu开发环境）下使用hexo在github上搭建属于自己的博客</p><p>搭建分为两步：</p><ul><li>使用Hexo 搭建本地blog</li><li>在github建立x.github.com 项目，并将本地hexo推送到github上</li></ul><a id="more"></a><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><ul><li>安装git</li></ul><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>下载<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a><ul><li>解压</li><li>配置环境</li><li>查看node是否安装成功</li></ul></li></ul><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">tar</span> -zxvf node-v5.1.0-linux-x64.tar.gz$ vim .bashrc<span class="token comment" spellcheck="true"># node</span><span class="token function">export</span> NODE_HOME<span class="token operator">=</span>/home/saboloh/developer/node-v5.1.0-linux-x64<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$NODE_HOME</span>/bin:<span class="token variable">$PATH</span>$ <span class="token function">source</span> .bashrc$ <span class="token function">npm</span> config <span class="token keyword">set</span> unsafe-perm <span class="token boolean">true</span>$ node -v<span class="token operator">|</span><span class="token function">npm</span> -v  查看一下版本即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo</a></li></ul><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g$ <span class="token function">npm</span> <span class="token function">install</span> hexo-server -g <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="开始blog之旅"><a href="#开始blog之旅" class="headerlink" title="开始blog之旅"></a>开始blog之旅</h2><ul><li>初始化</li></ul><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> blog$ <span class="token function">cd</span> blog$ hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>安装依赖包</li></ul><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>启动本地服务查看</li></ul><pre class="line-numbers language-bash"><code class="language-bash">$ hexo s -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 如果看到如下，那么恭喜你第一步已经完成</p><p><img src="/img/hexo_init.png" alt=""></p><ul><li>选择<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题</a></li></ul><p>以主题<a href="http://blog.zhangruipeng.me/hexo-theme-minos/" target="_blank" rel="noopener">Minos</a>为例</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cd</span> blog$ <span class="token function">git</span> clone https://github.com/ppoffice/hexo-theme-minos.git themes/minos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改<code>_config.yml</code>，指定主题</p><pre><code># Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: minos</code></pre><p>启动<code>hexo s -g</code>并访问效果如下：</p><p><img src="/img/minos_demo.png" alt=""></p><p>接下来需要配置blog的一些信息以及页面，其中包括home/Archives/Categories/Tags/About</p><p>修改或添加相关信息至_config.yml</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Site</span>title: Loh<span class="token string">'s Blogsubtitle: Loh'</span>s Blogdescription: Loh's Blogauthor: Lohlanguage: zh-CNtimezone: Asia/Shanghai<span class="token comment" spellcheck="true"># Header</span>menu:  Home: /  Archives: archives  Categories: categories  Tags: tags  About: about<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Header效果如下:<br><img src="/img/minos_header.png" alt=""></p><p>页面的部分地方可以自己修改主题里面的代码，调整至自己想要的</p><p>接下来需要开始写博文和创建页面了</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo n <span class="token string">"我的第一篇博文"</span>$ hexo n page <span class="token string">"About"</span>    //创建页面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>在<a href="https://github.com/" target="_blank" rel="noopener">github</a>上创建一个项目格式为“username.github.com”</p></li><li><p>配置本地<a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">hexo-blog 部署</a></p></li></ul><p>执行<code>hexo g</code> + <code>hexo d</code> 就完成了部署, 这样在浏览器中访问username.github.com即可看到你的博客了，简单轻松完成！如果舍得花钱，可以买个域名，本人在万维网上买的，域名便宜。</p><ul><li>配置域名</li></ul><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cd</span> blog$ vim source/CNAMEsaboloh.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也许你还会发现少了点什么 —— 评论！！！<br>我使用的是<a href="https://disqus.com/" target="_blank" rel="noopener">disqus</a> 在disqus上创建账户，将shortname配置到_config.yml</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#disqus</span>disqus_shortname: saboloh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>基本搭建完成，如果需要额外的功能，可以在<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a> 上研究研究</p><p>如果在搭建过程中遇到问题，可以评论留言或email给我，大家可以一起探讨</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文详细描述如何在Linux（本人ubuntu开发环境）下使用hexo在github上搭建属于自己的博客&lt;/p&gt;
&lt;p&gt;搭建分为两步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Hexo 搭建本地blog&lt;/li&gt;
&lt;li&gt;在github建立x.github.com 项目，并将本地hexo推送到github上&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://saboloh.com/categories/Linux/"/>
    
    
      <category term="blog" scheme="http://saboloh.com/tags/blog/"/>
    
      <category term="github" scheme="http://saboloh.com/tags/github/"/>
    
      <category term="hexo" scheme="http://saboloh.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse远程调试Java应用</title>
    <link href="http://saboloh.com/2016/04/21/Debug-Java-applications-remotely-with-Eclipse/"/>
    <id>http://saboloh.com/2016/04/21/Debug-Java-applications-remotely-with-Eclipse/</id>
    <published>2016-04-21T07:08:13.000Z</published>
    <updated>2018-03-29T07:14:11.458Z</updated>
    
    <content type="html"><![CDATA[<ul><li>原文地址 <a href="http://www.ibm.com/developerworks/library/os-eclipse-javadebug/" target="_blank" rel="noopener">Debug Java applications remotely with Eclipse</a></li></ul><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>如果你还没准备好， 下载Eclipse V3.4 (Ganymede)，在Ganymede中socket监听连接器已被添加到远程Java应用程序启动配置类型中。Eclipse新的socket监听连接器允许你启动Java调试模式，它监听特定的socket连接，可以使用命令行选项来启动程序连接调试模式开始程序调试。在Ganymede之前的发行版本中，只有提供了socket-attaching连接器，当前调试程序需作为调试主机被调试器连接。这对于移动设备由于内存电源不足是不切实际的。</p><p>要使用远程调试，Java虚拟机必须是5.0或更高的版本，如IBM® J9或者Sun Microsystems公司的Java SE开发工具包（JDK），在这篇文章中，我们重点关注远程调试，而不是Eclipse调试功能的每一个细节。请查阅相关<a href="http://www.ibm.com/developerworks/library/os-eclipse-javadebug/#resources" target="_blank" rel="noopener">资料</a> 有关于Eclipse调试及上述信息。</p><a id="more"></a><h2 id="JPDA介绍"><a href="#JPDA介绍" class="headerlink" title="JPDA介绍"></a>JPDA介绍</h2><ul><li>常用缩写<ul><li>JDI— Java Debug Interface</li><li>JDT— Java Development Tools</li><li>JDWP— Java Debug Wire Protocol</li><li>JPDA— Java Platform Debugger Architecture</li><li>JVM— Java Virtual Machine</li><li>JVMDI— JVM Debug Interface</li><li>JVMTI— JVM Tool Interface</li><li>VM— Virtual Machine</li></ul></li></ul><p>Sun Microsystems的Java平台调试器架构（JPDA）技术是一个多层次的体系结构，允许你在任何情况下轻松调试Java应用程序。JPDA由两个接口组成（一个是JVM工具和JDI），另一个是协议（Java Debug Wire Protocol），这两个软件一起组成（前台和后台），它的设计是为了在任何环境下使用调试器。JPAD也不仅仅是桌面系统，同时也适用于嵌入式系统。<br>JVM工具接口（JVMTI）定义了一个虚拟机必须提供的调试（编者注：从java V5开始，JVMTI取代JVMDI，用于java V1.4），</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;原文地址 &lt;a href=&quot;http://www.ibm.com/developerworks/library/os-eclipse-javadebug/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Debug Java applications remotely with Eclipse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h2&gt;&lt;p&gt;如果你还没准备好， 下载Eclipse V3.4 (Ganymede)，在Ganymede中socket监听连接器已被添加到远程Java应用程序启动配置类型中。Eclipse新的socket监听连接器允许你启动Java调试模式，它监听特定的socket连接，可以使用命令行选项来启动程序连接调试模式开始程序调试。在Ganymede之前的发行版本中，只有提供了socket-attaching连接器，当前调试程序需作为调试主机被调试器连接。这对于移动设备由于内存电源不足是不切实际的。&lt;/p&gt;
&lt;p&gt;要使用远程调试，Java虚拟机必须是5.0或更高的版本，如IBM® J9或者Sun Microsystems公司的Java SE开发工具包（JDK），在这篇文章中，我们重点关注远程调试，而不是Eclipse调试功能的每一个细节。请查阅相关&lt;a href=&quot;http://www.ibm.com/developerworks/library/os-eclipse-javadebug/#resources&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;资料&lt;/a&gt; 有关于Eclipse调试及上述信息。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://saboloh.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://saboloh.com/tags/java/"/>
    
      <category term="debug" scheme="http://saboloh.com/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>hadoop 机房迁移相关问题</title>
    <link href="http://saboloh.com/2016/04/19/hadoop-relocation-issue/"/>
    <id>http://saboloh.com/2016/04/19/hadoop-relocation-issue/</id>
    <published>2016-04-19T11:08:34.000Z</published>
    <updated>2018-03-30T06:38:35.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更改机器的-ip-参考"><a href="#更改机器的-ip-参考" class="headerlink" title="更改机器的 ip 参考"></a>更改机器的 ip 参考</h2><ul><li>CDH 4 的时候需要修改数据库</li></ul><p><code>/etc/cloudera-scm-server/db.properties</code>这个文件记录 cm 用的 DB 的信息  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># psql  -h localhost -U scm -p 7432</span>scm<span class="token operator">=</span><span class="token operator">></span> \dt <span class="token comment" spellcheck="true"># show tables in pg</span>scm<span class="token operator">=</span><span class="token operator">></span> \listscm<span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">select</span> * from hosts<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># show hostinfo in hosts</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><p><code>/etc/cloudera-scm-agent/config.ini</code> 每个 agent 里面有记录 cm 的地址, 修改:   </p><pre class="line-numbers language-bash"><code class="language-bash">server_host<span class="token operator">=</span>10.xx.xx.xx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>CDH 5 的时候使用 uuid 来标识每台机器，看起来只需要修改一下 <code>/etc/cloudera-scm-agent/config.ini</code> 里面对应的 server_host 即可</p><ul><li>相关参考：<ul><li><a href="https://groups.google.com/a/cloudera.org/forum/#!mydiscussions/scm-users/gM-DtmxvkJ8" target="_blank" rel="noopener">https://groups.google.com/a/cloudera.org/forum/#!mydiscussions/scm-users/gM-DtmxvkJ8</a></li><li><a href="http://shulhi.com/change-ip-address-for-existing-nodes-in-cdh-5-3/" target="_blank" rel="noopener">http://shulhi.com/change-ip-address-for-existing-nodes-in-cdh-5-3/</a></li></ul></li></ul><p>除了上面写的，还需要保证:<br>a. dns 解析正确，或者 <code>/etc/hosts</code> 里面配置正确，否则 <code>cloudera-scm-server</code> 会hang住，导致 7182 这个服务无法连接。<code>cloudera-scm-agent</code> 连不上<br>b. 需要deploy client config<br>c. namenode ha 启动会有问题，原因是之前 zk 里面保存的 hostname 发生改变，停掉 failover controller 去 initiale zookeeper 都不会失败  </p><p>需要手动去设置</p><pre class="line-numbers language-bash"><code class="language-bash">HADOOP_USER_NAME<span class="token operator">=</span>hdfshdfs --config /var/run/cloudera-scm-agent/process/150-failover-controller-initialize-znode zkfc -formatZK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>提示我们 stop all hdfs service，输入 Y 确认格式掉 zookeeper 相关数据（注意，不是格式化 namenode）后面重启就好了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;更改机器的-ip-参考&quot;&gt;&lt;a href=&quot;#更改机器的-ip-参考&quot; class=&quot;headerlink&quot; title=&quot;更改机器的 ip 参考&quot;&gt;&lt;/a&gt;更改机器的 ip 参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;CDH 4 的时候需要修改数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;/etc/cloudera-scm-server/db.properties&lt;/code&gt;这个文件记录 cm 用的 DB 的信息  &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;# psql  -h localhost -U scm -p 7432
scm=&amp;gt; \dt # show tables in pg
scm=&amp;gt; \list
scm=&amp;gt; select * from hosts; # show hostinfo in hosts
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://saboloh.com/categories/BigData/"/>
    
    
      <category term="hadoop" scheme="http://saboloh.com/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>安装CDH指定版本5.4.7</title>
    <link href="http://saboloh.com/2016/04/19/install-cdh-5.4.7/"/>
    <id>http://saboloh.com/2016/04/19/install-cdh-5.4.7/</id>
    <published>2016-04-19T08:34:42.000Z</published>
    <updated>2018-03-29T07:14:11.458Z</updated>
    
    <content type="html"><![CDATA[<p>离线安装CDH5.4.7</p><ul><li><p><a href="http://www.cloudera.com/documentation/enterprise/latest/topics/cm_ig_install_path_a.html#cmig_topic_6_5_unique_2" target="_blank" rel="noopener">官方文档</a></p></li><li><p>删除已有<a href="http://www.cloudera.com/documentation/enterprise/5-5-x/topics/cm_ig_uninstall_cm.html" target="_blank" rel="noopener">cloudera manager</a></p></li></ul><pre class="line-numbers language-bash"><code class="language-bash">$ /usr/share/cmf/uninstall-cloudera-manager.sh$ <span class="token function">apt-get</span> purge <span class="token string">'cloudera-manager-*'</span>$ <span class="token function">umount</span> cm_processes$ <span class="token function">rm</span> -Rf /usr/share/cmf /var/lib/cloudera* /var/cache/yum/cloudera* /var/log/cloudera* /var/run/cloudera*$ <span class="token function">rm</span> -Rf /var/lib/flume-ng /var/lib/hadoop* /var/lib/hue /var/lib/navigator /var/lib/oozie /var/lib/solr /var/lib/sqoop* /var/lib/zookeeper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><ul><li>查看系统版本 </li></ul><pre class="line-numbers language-bash"><code class="language-bash">$ lsb_release -aNo LSB modules are available.Distributor ID: UbuntuDescription:    Ubuntu 12.04.4 LTSRelease:    12.04Codename:   precise<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>下载对应包并且配置本地源(避免使用cloudera-manager-installer.bin直接安装总是获取最新版CDH) </li></ul><pre class="line-numbers language-bash"><code class="language-bash">下载好tarball$ <span class="token function">wget</span> http://archive.cloudera.com/cm5/repo-as-tarball/5.4.7/cm5.4.7-ubuntu12-04.tar.gz$ <span class="token function">tar</span> -zxvf cm5.4.7-ubuntu12-04.tar.gz$ <span class="token function">cp</span> -r cm /var/spool/apt-mirror/mirror/archive.cloudera.com/<span class="token comment" spellcheck="true"># 使用nginx配置</span>$ <span class="token function">apt-get</span> <span class="token function">install</span> nginx $ vim /etc/nginx/nginx.conf<span class="token comment" spellcheck="true"># 访问本地目录列表</span>server <span class="token punctuation">{</span>    listen       80<span class="token punctuation">;</span>    server_name  dev-001<span class="token punctuation">;</span>    location / <span class="token punctuation">{</span>        root   /var/spool/apt-mirror/mirror/archive.cloudera.com/<span class="token punctuation">;</span>        index  index.html index.htm<span class="token punctuation">;</span>        autoindex on<span class="token punctuation">;</span>        autoindex_exact_size off<span class="token punctuation">;</span>        autoindex_localtime on<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    error_page   500 502 503 504  /50x.html<span class="token punctuation">;</span>    location <span class="token operator">=</span> /50x.html <span class="token punctuation">{</span>        root   html<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>浏览确认是否能访问 </li></ul><p><img src="/img/filelist.png" alt=""></p><ul><li>配置apt source</li></ul><pre><code>$ vim /etc/apt/source.list.d/my-private-cloudera-repo.list# Packages for Clouderas Distribution for Hadoop, Version 4, on Ubuntu 12.04 x86_64deb [arch=amd64] http://dev-001/cm precise-cm5 contribdeb-src http://dev-001/cm precise-cm5.4.7 contrib</code></pre><ul><li>下载对应<a href="http://archive.cloudera.com/cdh5/parcels/" target="_blank" rel="noopener">parcel</a></li></ul><pre><code>找到对应自己系统的parcels$ wget http://archive.cloudera.com/cdh5/parcels/5.4.7/CDH-5.4.7-1.cdh5.4.7.p0.3-precise.parcel$ wget wget http://archive.cloudera.com/cdh5/parcels/5.4.7/CDH-5.4.7-1.cdh5.4.7.p0.3-precise.parcel.sha1$ wget http://archive.cloudera.com/cdh5/parcels/5.4.7/manifest.jsonsha1需修改成sha$ mv CDH-5.4.7-1.cdh5.4.7.p0.3-precise.parcel.sha1 CDH-5.4.7-1.cdh5.4.7.p0.3-precise.parcel.sha</code></pre><ul><li>下载安装<a href="https://archive.cloudera.com/cm5/installer/" target="_blank" rel="noopener">Cloudera Manager</a></li></ul><pre><code>$ wget https://archive.cloudera.com/cm5/installer/5.4.7/cloudera-manager-installer.bin</code></pre><ul><li>安装</li></ul><pre><code>$ chmod +x cloudera-manager-installer.bin$ ./cloudera-manager-installer.bin --skip_repo_package=1</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;离线安装CDH5.4.7&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.cloudera.com/documentation/enterprise/latest/topics/cm_ig_install_path_a.html#cmig_topic_6_5_unique_2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除已有&lt;a href=&quot;http://www.cloudera.com/documentation/enterprise/5-5-x/topics/cm_ig_uninstall_cm.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cloudera manager&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ /usr/share/cmf/uninstall-cloudera-manager.sh

$ apt-get purge &amp;#39;cloudera-manager-*&amp;#39;

$ umount cm_processes
$ rm -Rf /usr/share/cmf /var/lib/cloudera* /var/cache/yum/cloudera* /var/log/cloudera* /var/run/cloudera*

$ rm -Rf /var/lib/flume-ng /var/lib/hadoop* /var/lib/hue /var/lib/navigator /var/lib/oozie /var/lib/solr /var/lib/sqoop* /var/lib/zookeeper
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="BigData" scheme="http://saboloh.com/categories/BigData/"/>
    
    
      <category term="hadoop" scheme="http://saboloh.com/tags/hadoop/"/>
    
      <category term="chd" scheme="http://saboloh.com/tags/chd/"/>
    
      <category term="cloudera" scheme="http://saboloh.com/tags/cloudera/"/>
    
  </entry>
  
  <entry>
    <title>使用supervisor守护进程</title>
    <link href="http://saboloh.com/2016/04/19/use-supervisor/"/>
    <id>http://saboloh.com/2016/04/19/use-supervisor/</id>
    <published>2016-04-19T02:04:27.000Z</published>
    <updated>2018-03-29T07:14:11.462Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Install </li></ul><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> supervisor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>配置 </li></ul><ol><li>使用默认路径下配置(/etc/supervisord.conf)</li><li>指定目录<code>supervisord.conf</code>配置 </li></ol><a id="more"></a><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">;</span> supervisor config <span class="token function">file</span><span class="token punctuation">[</span>unix_http_server<span class="token punctuation">]</span>file<span class="token operator">=</span>/home/hadoop/supervisor/supervisor.sock   <span class="token punctuation">;</span> <span class="token punctuation">(</span>the path to the socket file<span class="token punctuation">)</span>chmod<span class="token operator">=</span>0700                       <span class="token punctuation">;</span> sockef <span class="token function">file</span> mode <span class="token punctuation">(</span>default 0700<span class="token punctuation">)</span><span class="token punctuation">[</span>supervisord<span class="token punctuation">]</span>logfile<span class="token operator">=</span>/home/hadoop/supervisor/supervisord.log <span class="token punctuation">;</span> <span class="token punctuation">(</span>main log <span class="token function">file</span><span class="token punctuation">;</span>default <span class="token variable">$CWD</span>/supervisord.log<span class="token punctuation">)</span>pidfile<span class="token operator">=</span>/home/hadoop/supervisor/supervisord.pid <span class="token punctuation">;</span> <span class="token punctuation">(</span>supervisord pidfile<span class="token punctuation">;</span>default supervisord.pid<span class="token punctuation">)</span>childlogdir<span class="token operator">=</span>/home/hadoop/supervisor             <span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token string">'AUTO'</span> child log dir, default <span class="token variable">$TEMP</span><span class="token punctuation">)</span><span class="token punctuation">;</span> the below section must remain <span class="token keyword">in</span> the config <span class="token function">file</span> <span class="token keyword">for</span> RPC<span class="token punctuation">;</span> <span class="token punctuation">(</span>supervisorctl/web interface<span class="token punctuation">)</span> to work, additional interfaces may be<span class="token punctuation">;</span> added by defining them <span class="token keyword">in</span> separate rpcinterface: sections<span class="token punctuation">[</span>rpcinterface:supervisor<span class="token punctuation">]</span>supervisor.rpcinterface_factory <span class="token operator">=</span> supervisor.rpcinterface:make_main_rpcinterface<span class="token punctuation">[</span>supervisorctl<span class="token punctuation">]</span>serverurl<span class="token operator">=</span>unix:///home/hadoop/supervisor/supervisor.sock <span class="token punctuation">;</span> use a unix:// URL  <span class="token keyword">for</span> a unix socket<span class="token punctuation">;</span> The <span class="token punctuation">[</span>include<span class="token punctuation">]</span> section can just contain the <span class="token string">"files"</span> setting.  This<span class="token punctuation">;</span> setting can list multiple files <span class="token punctuation">(</span>separated by whitespace or<span class="token punctuation">;</span> newlines<span class="token punctuation">)</span>.  It can also contain wildcards.  The filenames are<span class="token punctuation">;</span> interpreted as relative to this file.  Included files *cannot*<span class="token punctuation">;</span> include files themselves.<span class="token punctuation">[</span>include<span class="token punctuation">]</span>files <span class="token operator">=</span> /home/hadoop/supervisor/conf.d/*.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cd</span> /home/hadoop/supervisor/$ supervisord -c supervisord.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>守护进程<code>/home/hadoop/supervisor/conf.d/*.conf</code> 下创建<code>app.conf</code></li></ul><pre><code>[program:app]command=/home/hadoop/spark-1.5.2-bin-hadoop2.6/bin/spark-submit  --executor-cores 1  --num-executors 2  --queue root.spark  --master yarn-cluster  --files /home/hadoop/spark-mining/log4j-spark.properties  --class com.app.dw.MainClassCount  --conf &quot;spark.driver.extraJavaOptions=-Xms512M -Xmn256M -XX:+UseConcMarkSweepGC -Dlog4j.configuration=log4j-spark.properties -Ddm.logging.level=DEBUG&quot;  --conf &quot;spark.executor.extraJavaOptions=-XX:+UseConcMarkSweepGC -Dlog4j.configuration=log4j-spark.properties -Ddm.logging.level=DEBUG&quot;  /home/hadoop/realtime/app.jar resetautostart=trueautorestart=trueenvironment=JAVA_HOME=&quot;/usr/local/java/jdk1.8.0_60&quot;stdout_logfile=/home/hadoop/realtime/logs/app.logredirect_stderr=trueuser=hadoop</code></pre><ul><li>命令行操作</li></ul><pre class="line-numbers language-bash"><code class="language-bash">$ supervisorctl update<span class="token operator">|</span>status<span class="token operator">|</span>stop<span class="token operator">|</span>start<span class="token operator">|</span>restart   // 更新配置<span class="token operator">|</span>查看状态<span class="token operator">|</span>停止指定进程<span class="token operator">|</span>启动进程<span class="token operator">|</span>重启进程<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Install &lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ sudo apt-get install supervisor
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;配置 &lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;使用默认路径下配置(/etc/supervisord.conf)&lt;/li&gt;
&lt;li&gt;指定目录&lt;code&gt;supervisord.conf&lt;/code&gt;配置 &lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://saboloh.com/categories/Linux/"/>
    
    
      <category term="supervisor" scheme="http://saboloh.com/tags/supervisor/"/>
    
  </entry>
  
</feed>
